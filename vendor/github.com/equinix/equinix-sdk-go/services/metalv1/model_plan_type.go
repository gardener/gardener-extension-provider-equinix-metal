/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// PlanType The plan type
type PlanType string

// List of Plan_type
const (
	PLANTYPE_STANDARD           PlanType = "standard"
	PLANTYPE_WORKLOAD_OPTIMIZED PlanType = "workload_optimized"
	PLANTYPE_CUSTOM             PlanType = "custom"
)

// All allowed values of PlanType enum
var AllowedPlanTypeEnumValues = []PlanType{
	"standard",
	"workload_optimized",
	"custom",
}

func (v *PlanType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlanType(value)
	for _, existing := range AllowedPlanTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlanType", value)
}

// NewPlanTypeFromValue returns a pointer to a valid PlanType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlanTypeFromValue(v string) (*PlanType, error) {
	ev := PlanType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlanType: valid values are %v", v, AllowedPlanTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlanType) IsValid() bool {
	for _, existing := range AllowedPlanTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Plan_type value
func (v PlanType) Ptr() *PlanType {
	return &v
}

type NullablePlanType struct {
	value *PlanType
	isSet bool
}

func (v NullablePlanType) Get() *PlanType {
	return v.value
}

func (v *NullablePlanType) Set(val *PlanType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanType(val *PlanType) *NullablePlanType {
	return &NullablePlanType{value: val, isSet: true}
}

func (v NullablePlanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
