/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the LicenseUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseUpdateInput{}

// LicenseUpdateInput struct for LicenseUpdateInput
type LicenseUpdateInput struct {
	Description          *string  `json:"description,omitempty"`
	Size                 *float32 `json:"size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LicenseUpdateInput LicenseUpdateInput

// NewLicenseUpdateInput instantiates a new LicenseUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseUpdateInput() *LicenseUpdateInput {
	this := LicenseUpdateInput{}
	return &this
}

// NewLicenseUpdateInputWithDefaults instantiates a new LicenseUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseUpdateInputWithDefaults() *LicenseUpdateInput {
	this := LicenseUpdateInput{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LicenseUpdateInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUpdateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LicenseUpdateInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LicenseUpdateInput) SetDescription(v string) {
	o.Description = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *LicenseUpdateInput) GetSize() float32 {
	if o == nil || IsNil(o.Size) {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUpdateInput) GetSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *LicenseUpdateInput) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *LicenseUpdateInput) SetSize(v float32) {
	o.Size = &v
}

func (o LicenseUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseUpdateInput) UnmarshalJSON(data []byte) (err error) {
	varLicenseUpdateInput := _LicenseUpdateInput{}

	err = json.Unmarshal(data, &varLicenseUpdateInput)

	if err != nil {
		return err
	}

	*o = LicenseUpdateInput(varLicenseUpdateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseUpdateInput struct {
	value *LicenseUpdateInput
	isSet bool
}

func (v NullableLicenseUpdateInput) Get() *LicenseUpdateInput {
	return v.value
}

func (v *NullableLicenseUpdateInput) Set(val *LicenseUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseUpdateInput(val *LicenseUpdateInput) *NullableLicenseUpdateInput {
	return &NullableLicenseUpdateInput{value: val, isSet: true}
}

func (v NullableLicenseUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
