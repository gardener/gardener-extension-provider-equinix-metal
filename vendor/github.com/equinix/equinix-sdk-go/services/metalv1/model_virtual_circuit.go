/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// VirtualCircuit - struct for VirtualCircuit
type VirtualCircuit struct {
	VlanVirtualCircuit *VlanVirtualCircuit
	VrfVirtualCircuit  *VrfVirtualCircuit
}

// VlanVirtualCircuitAsVirtualCircuit is a convenience function that returns VlanVirtualCircuit wrapped in VirtualCircuit
func VlanVirtualCircuitAsVirtualCircuit(v *VlanVirtualCircuit) VirtualCircuit {
	return VirtualCircuit{
		VlanVirtualCircuit: v,
	}
}

// VrfVirtualCircuitAsVirtualCircuit is a convenience function that returns VrfVirtualCircuit wrapped in VirtualCircuit
func VrfVirtualCircuitAsVirtualCircuit(v *VrfVirtualCircuit) VirtualCircuit {
	return VirtualCircuit{
		VrfVirtualCircuit: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *VirtualCircuit) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VlanVirtualCircuit
	err = newStrictDecoder(data).Decode(&dst.VlanVirtualCircuit)
	if err == nil {
		jsonVlanVirtualCircuit, _ := json.Marshal(dst.VlanVirtualCircuit)
		if string(jsonVlanVirtualCircuit) == "{}" { // empty struct
			dst.VlanVirtualCircuit = nil
		} else {
			match++
		}
	} else {
		dst.VlanVirtualCircuit = nil
	}

	// try to unmarshal data into VrfVirtualCircuit
	err = newStrictDecoder(data).Decode(&dst.VrfVirtualCircuit)
	if err == nil {
		jsonVrfVirtualCircuit, _ := json.Marshal(dst.VrfVirtualCircuit)
		if string(jsonVrfVirtualCircuit) == "{}" { // empty struct
			dst.VrfVirtualCircuit = nil
		} else {
			match++
		}
	} else {
		dst.VrfVirtualCircuit = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VlanVirtualCircuit = nil
		dst.VrfVirtualCircuit = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VirtualCircuit)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VirtualCircuit)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VirtualCircuit) MarshalJSON() ([]byte, error) {
	if src.VlanVirtualCircuit != nil {
		return json.Marshal(&src.VlanVirtualCircuit)
	}

	if src.VrfVirtualCircuit != nil {
		return json.Marshal(&src.VrfVirtualCircuit)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VirtualCircuit) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.VlanVirtualCircuit != nil {
		return obj.VlanVirtualCircuit
	}

	if obj.VrfVirtualCircuit != nil {
		return obj.VrfVirtualCircuit
	}

	// all schemas are nil
	return nil
}

type NullableVirtualCircuit struct {
	value *VirtualCircuit
	isSet bool
}

func (v NullableVirtualCircuit) Get() *VirtualCircuit {
	return v.value
}

func (v *NullableVirtualCircuit) Set(val *VirtualCircuit) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCircuit) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCircuit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCircuit(val *VirtualCircuit) *NullableVirtualCircuit {
	return &NullableVirtualCircuit{value: val, isSet: true}
}

func (v NullableVirtualCircuit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCircuit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
