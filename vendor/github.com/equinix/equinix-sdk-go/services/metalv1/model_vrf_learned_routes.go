/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VrfLearnedRoutes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfLearnedRoutes{}

// VrfLearnedRoutes struct for VrfLearnedRoutes
type VrfLearnedRoutes struct {
	Prefix *string `json:"prefix,omitempty"`
	// The ASN of the peer that advertised the prefix.
	OriginAs             *int64 `json:"origin_as,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfLearnedRoutes VrfLearnedRoutes

// NewVrfLearnedRoutes instantiates a new VrfLearnedRoutes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfLearnedRoutes() *VrfLearnedRoutes {
	this := VrfLearnedRoutes{}
	return &this
}

// NewVrfLearnedRoutesWithDefaults instantiates a new VrfLearnedRoutes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfLearnedRoutesWithDefaults() *VrfLearnedRoutes {
	this := VrfLearnedRoutes{}
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VrfLearnedRoutes) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfLearnedRoutes) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VrfLearnedRoutes) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *VrfLearnedRoutes) SetPrefix(v string) {
	o.Prefix = &v
}

// GetOriginAs returns the OriginAs field value if set, zero value otherwise.
func (o *VrfLearnedRoutes) GetOriginAs() int64 {
	if o == nil || IsNil(o.OriginAs) {
		var ret int64
		return ret
	}
	return *o.OriginAs
}

// GetOriginAsOk returns a tuple with the OriginAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfLearnedRoutes) GetOriginAsOk() (*int64, bool) {
	if o == nil || IsNil(o.OriginAs) {
		return nil, false
	}
	return o.OriginAs, true
}

// HasOriginAs returns a boolean if a field has been set.
func (o *VrfLearnedRoutes) HasOriginAs() bool {
	if o != nil && !IsNil(o.OriginAs) {
		return true
	}

	return false
}

// SetOriginAs gets a reference to the given int64 and assigns it to the OriginAs field.
func (o *VrfLearnedRoutes) SetOriginAs(v int64) {
	o.OriginAs = &v
}

func (o VrfLearnedRoutes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfLearnedRoutes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.OriginAs) {
		toSerialize["origin_as"] = o.OriginAs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfLearnedRoutes) UnmarshalJSON(data []byte) (err error) {
	varVrfLearnedRoutes := _VrfLearnedRoutes{}

	err = json.Unmarshal(data, &varVrfLearnedRoutes)

	if err != nil {
		return err
	}

	*o = VrfLearnedRoutes(varVrfLearnedRoutes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "origin_as")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfLearnedRoutes struct {
	value *VrfLearnedRoutes
	isSet bool
}

func (v NullableVrfLearnedRoutes) Get() *VrfLearnedRoutes {
	return v.value
}

func (v *NullableVrfLearnedRoutes) Set(val *VrfLearnedRoutes) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfLearnedRoutes) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfLearnedRoutes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfLearnedRoutes(val *VrfLearnedRoutes) *NullableVrfLearnedRoutes {
	return &NullableVrfLearnedRoutes{value: val, isSet: true}
}

func (v NullableVrfLearnedRoutes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfLearnedRoutes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
