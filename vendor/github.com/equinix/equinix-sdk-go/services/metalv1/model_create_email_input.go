/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateEmailInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEmailInput{}

// CreateEmailInput struct for CreateEmailInput
type CreateEmailInput struct {
	Address              string `json:"address"`
	AdditionalProperties map[string]interface{}
}

type _CreateEmailInput CreateEmailInput

// NewCreateEmailInput instantiates a new CreateEmailInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEmailInput(address string) *CreateEmailInput {
	this := CreateEmailInput{}
	this.Address = address
	return &this
}

// NewCreateEmailInputWithDefaults instantiates a new CreateEmailInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEmailInputWithDefaults() *CreateEmailInput {
	this := CreateEmailInput{}
	return &this
}

// GetAddress returns the Address field value
func (o *CreateEmailInput) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CreateEmailInput) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CreateEmailInput) SetAddress(v string) {
	o.Address = v
}

func (o CreateEmailInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEmailInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateEmailInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateEmailInput := _CreateEmailInput{}

	err = json.Unmarshal(data, &varCreateEmailInput)

	if err != nil {
		return err
	}

	*o = CreateEmailInput(varCreateEmailInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateEmailInput struct {
	value *CreateEmailInput
	isSet bool
}

func (v NullableCreateEmailInput) Get() *CreateEmailInput {
	return v.value
}

func (v *NullableCreateEmailInput) Set(val *CreateEmailInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEmailInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEmailInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEmailInput(val *CreateEmailInput) *NullableCreateEmailInput {
	return &NullableCreateEmailInput{value: val, isSet: true}
}

func (v NullableCreateEmailInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEmailInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
