/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// VirtualCircuitUpdateInput - struct for VirtualCircuitUpdateInput
type VirtualCircuitUpdateInput struct {
	VlanVirtualCircuitUpdateInput *VlanVirtualCircuitUpdateInput
	VrfVirtualCircuitUpdateInput  *VrfVirtualCircuitUpdateInput
}

// VlanVirtualCircuitUpdateInputAsVirtualCircuitUpdateInput is a convenience function that returns VlanVirtualCircuitUpdateInput wrapped in VirtualCircuitUpdateInput
func VlanVirtualCircuitUpdateInputAsVirtualCircuitUpdateInput(v *VlanVirtualCircuitUpdateInput) VirtualCircuitUpdateInput {
	return VirtualCircuitUpdateInput{
		VlanVirtualCircuitUpdateInput: v,
	}
}

// VrfVirtualCircuitUpdateInputAsVirtualCircuitUpdateInput is a convenience function that returns VrfVirtualCircuitUpdateInput wrapped in VirtualCircuitUpdateInput
func VrfVirtualCircuitUpdateInputAsVirtualCircuitUpdateInput(v *VrfVirtualCircuitUpdateInput) VirtualCircuitUpdateInput {
	return VirtualCircuitUpdateInput{
		VrfVirtualCircuitUpdateInput: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *VirtualCircuitUpdateInput) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VlanVirtualCircuitUpdateInput
	err = newStrictDecoder(data).Decode(&dst.VlanVirtualCircuitUpdateInput)
	if err == nil {
		jsonVlanVirtualCircuitUpdateInput, _ := json.Marshal(dst.VlanVirtualCircuitUpdateInput)
		if string(jsonVlanVirtualCircuitUpdateInput) == "{}" { // empty struct
			dst.VlanVirtualCircuitUpdateInput = nil
		} else {
			match++
		}
	} else {
		dst.VlanVirtualCircuitUpdateInput = nil
	}

	// try to unmarshal data into VrfVirtualCircuitUpdateInput
	err = newStrictDecoder(data).Decode(&dst.VrfVirtualCircuitUpdateInput)
	if err == nil {
		jsonVrfVirtualCircuitUpdateInput, _ := json.Marshal(dst.VrfVirtualCircuitUpdateInput)
		if string(jsonVrfVirtualCircuitUpdateInput) == "{}" { // empty struct
			dst.VrfVirtualCircuitUpdateInput = nil
		} else {
			match++
		}
	} else {
		dst.VrfVirtualCircuitUpdateInput = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VlanVirtualCircuitUpdateInput = nil
		dst.VrfVirtualCircuitUpdateInput = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VirtualCircuitUpdateInput)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VirtualCircuitUpdateInput)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VirtualCircuitUpdateInput) MarshalJSON() ([]byte, error) {
	if src.VlanVirtualCircuitUpdateInput != nil {
		return json.Marshal(&src.VlanVirtualCircuitUpdateInput)
	}

	if src.VrfVirtualCircuitUpdateInput != nil {
		return json.Marshal(&src.VrfVirtualCircuitUpdateInput)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VirtualCircuitUpdateInput) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.VlanVirtualCircuitUpdateInput != nil {
		return obj.VlanVirtualCircuitUpdateInput
	}

	if obj.VrfVirtualCircuitUpdateInput != nil {
		return obj.VrfVirtualCircuitUpdateInput
	}

	// all schemas are nil
	return nil
}

type NullableVirtualCircuitUpdateInput struct {
	value *VirtualCircuitUpdateInput
	isSet bool
}

func (v NullableVirtualCircuitUpdateInput) Get() *VirtualCircuitUpdateInput {
	return v.value
}

func (v *NullableVirtualCircuitUpdateInput) Set(val *VirtualCircuitUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCircuitUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCircuitUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCircuitUpdateInput(val *VirtualCircuitUpdateInput) *NullableVirtualCircuitUpdateInput {
	return &NullableVirtualCircuitUpdateInput{value: val, isSet: true}
}

func (v NullableVirtualCircuitUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCircuitUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
