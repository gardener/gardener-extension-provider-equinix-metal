/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"time"
)

// checks if the VirtualNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualNetwork{}

// VirtualNetwork struct for VirtualNetwork
type VirtualNetwork struct {
	AssignedTo *Project `json:"assigned_to,omitempty"`
	// True if the virtual network is attached to a virtual circuit. False if not.
	AssignedToVirtualCircuit *bool      `json:"assigned_to_virtual_circuit,omitempty"`
	Description              *string    `json:"description,omitempty"`
	Facility                 *Href      `json:"facility,omitempty"`
	Href                     *string    `json:"href,omitempty"`
	CreatedAt                *time.Time `json:"created_at,omitempty"`
	Id                       *string    `json:"id,omitempty"`
	// A list of instances with ports currently associated to this Virtual Network.
	Instances []Device `json:"instances,omitempty"`
	// A list of metal gateways currently associated to this Virtual Network.
	MetalGateways []MetalGatewayLite `json:"metal_gateways,omitempty"`
	Metro         *Metro             `json:"metro,omitempty"`
	// The Metro code of the metro in which this Virtual Network is defined.
	MetroCode            *string  `json:"metro_code,omitempty"`
	Vxlan                *int32   `json:"vxlan,omitempty"`
	Tags                 []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualNetwork VirtualNetwork

// NewVirtualNetwork instantiates a new VirtualNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualNetwork() *VirtualNetwork {
	this := VirtualNetwork{}
	return &this
}

// NewVirtualNetworkWithDefaults instantiates a new VirtualNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualNetworkWithDefaults() *VirtualNetwork {
	this := VirtualNetwork{}
	return &this
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *VirtualNetwork) GetAssignedTo() Project {
	if o == nil || IsNil(o.AssignedTo) {
		var ret Project
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetAssignedToOk() (*Project, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *VirtualNetwork) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given Project and assigns it to the AssignedTo field.
func (o *VirtualNetwork) SetAssignedTo(v Project) {
	o.AssignedTo = &v
}

// GetAssignedToVirtualCircuit returns the AssignedToVirtualCircuit field value if set, zero value otherwise.
func (o *VirtualNetwork) GetAssignedToVirtualCircuit() bool {
	if o == nil || IsNil(o.AssignedToVirtualCircuit) {
		var ret bool
		return ret
	}
	return *o.AssignedToVirtualCircuit
}

// GetAssignedToVirtualCircuitOk returns a tuple with the AssignedToVirtualCircuit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetAssignedToVirtualCircuitOk() (*bool, bool) {
	if o == nil || IsNil(o.AssignedToVirtualCircuit) {
		return nil, false
	}
	return o.AssignedToVirtualCircuit, true
}

// HasAssignedToVirtualCircuit returns a boolean if a field has been set.
func (o *VirtualNetwork) HasAssignedToVirtualCircuit() bool {
	if o != nil && !IsNil(o.AssignedToVirtualCircuit) {
		return true
	}

	return false
}

// SetAssignedToVirtualCircuit gets a reference to the given bool and assigns it to the AssignedToVirtualCircuit field.
func (o *VirtualNetwork) SetAssignedToVirtualCircuit(v bool) {
	o.AssignedToVirtualCircuit = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VirtualNetwork) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VirtualNetwork) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VirtualNetwork) SetDescription(v string) {
	o.Description = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *VirtualNetwork) GetFacility() Href {
	if o == nil || IsNil(o.Facility) {
		var ret Href
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetFacilityOk() (*Href, bool) {
	if o == nil || IsNil(o.Facility) {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *VirtualNetwork) HasFacility() bool {
	if o != nil && !IsNil(o.Facility) {
		return true
	}

	return false
}

// SetFacility gets a reference to the given Href and assigns it to the Facility field.
func (o *VirtualNetwork) SetFacility(v Href) {
	o.Facility = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *VirtualNetwork) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *VirtualNetwork) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *VirtualNetwork) SetHref(v string) {
	o.Href = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *VirtualNetwork) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *VirtualNetwork) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *VirtualNetwork) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualNetwork) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualNetwork) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualNetwork) SetId(v string) {
	o.Id = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *VirtualNetwork) GetInstances() []Device {
	if o == nil || IsNil(o.Instances) {
		var ret []Device
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetInstancesOk() ([]Device, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *VirtualNetwork) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []Device and assigns it to the Instances field.
func (o *VirtualNetwork) SetInstances(v []Device) {
	o.Instances = v
}

// GetMetalGateways returns the MetalGateways field value if set, zero value otherwise.
func (o *VirtualNetwork) GetMetalGateways() []MetalGatewayLite {
	if o == nil || IsNil(o.MetalGateways) {
		var ret []MetalGatewayLite
		return ret
	}
	return o.MetalGateways
}

// GetMetalGatewaysOk returns a tuple with the MetalGateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetMetalGatewaysOk() ([]MetalGatewayLite, bool) {
	if o == nil || IsNil(o.MetalGateways) {
		return nil, false
	}
	return o.MetalGateways, true
}

// HasMetalGateways returns a boolean if a field has been set.
func (o *VirtualNetwork) HasMetalGateways() bool {
	if o != nil && !IsNil(o.MetalGateways) {
		return true
	}

	return false
}

// SetMetalGateways gets a reference to the given []MetalGatewayLite and assigns it to the MetalGateways field.
func (o *VirtualNetwork) SetMetalGateways(v []MetalGatewayLite) {
	o.MetalGateways = v
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *VirtualNetwork) GetMetro() Metro {
	if o == nil || IsNil(o.Metro) {
		var ret Metro
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetMetroOk() (*Metro, bool) {
	if o == nil || IsNil(o.Metro) {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *VirtualNetwork) HasMetro() bool {
	if o != nil && !IsNil(o.Metro) {
		return true
	}

	return false
}

// SetMetro gets a reference to the given Metro and assigns it to the Metro field.
func (o *VirtualNetwork) SetMetro(v Metro) {
	o.Metro = &v
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *VirtualNetwork) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *VirtualNetwork) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *VirtualNetwork) SetMetroCode(v string) {
	o.MetroCode = &v
}

// GetVxlan returns the Vxlan field value if set, zero value otherwise.
func (o *VirtualNetwork) GetVxlan() int32 {
	if o == nil || IsNil(o.Vxlan) {
		var ret int32
		return ret
	}
	return *o.Vxlan
}

// GetVxlanOk returns a tuple with the Vxlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetVxlanOk() (*int32, bool) {
	if o == nil || IsNil(o.Vxlan) {
		return nil, false
	}
	return o.Vxlan, true
}

// HasVxlan returns a boolean if a field has been set.
func (o *VirtualNetwork) HasVxlan() bool {
	if o != nil && !IsNil(o.Vxlan) {
		return true
	}

	return false
}

// SetVxlan gets a reference to the given int32 and assigns it to the Vxlan field.
func (o *VirtualNetwork) SetVxlan(v int32) {
	o.Vxlan = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VirtualNetwork) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetwork) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VirtualNetwork) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VirtualNetwork) SetTags(v []string) {
	o.Tags = v
}

func (o VirtualNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssignedTo) {
		toSerialize["assigned_to"] = o.AssignedTo
	}
	if !IsNil(o.AssignedToVirtualCircuit) {
		toSerialize["assigned_to_virtual_circuit"] = o.AssignedToVirtualCircuit
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Facility) {
		toSerialize["facility"] = o.Facility
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.MetalGateways) {
		toSerialize["metal_gateways"] = o.MetalGateways
	}
	if !IsNil(o.Metro) {
		toSerialize["metro"] = o.Metro
	}
	if !IsNil(o.MetroCode) {
		toSerialize["metro_code"] = o.MetroCode
	}
	if !IsNil(o.Vxlan) {
		toSerialize["vxlan"] = o.Vxlan
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualNetwork) UnmarshalJSON(data []byte) (err error) {
	varVirtualNetwork := _VirtualNetwork{}

	err = json.Unmarshal(data, &varVirtualNetwork)

	if err != nil {
		return err
	}

	*o = VirtualNetwork(varVirtualNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assigned_to")
		delete(additionalProperties, "assigned_to_virtual_circuit")
		delete(additionalProperties, "description")
		delete(additionalProperties, "facility")
		delete(additionalProperties, "href")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "instances")
		delete(additionalProperties, "metal_gateways")
		delete(additionalProperties, "metro")
		delete(additionalProperties, "metro_code")
		delete(additionalProperties, "vxlan")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualNetwork struct {
	value *VirtualNetwork
	isSet bool
}

func (v NullableVirtualNetwork) Get() *VirtualNetwork {
	return v.value
}

func (v *NullableVirtualNetwork) Set(val *VirtualNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualNetwork(val *VirtualNetwork) *NullableVirtualNetwork {
	return &NullableVirtualNetwork{value: val, isSet: true}
}

func (v NullableVirtualNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
