/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the InvitationList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvitationList{}

// InvitationList struct for InvitationList
type InvitationList struct {
	Invitations          []Membership `json:"invitations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InvitationList InvitationList

// NewInvitationList instantiates a new InvitationList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvitationList() *InvitationList {
	this := InvitationList{}
	return &this
}

// NewInvitationListWithDefaults instantiates a new InvitationList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvitationListWithDefaults() *InvitationList {
	this := InvitationList{}
	return &this
}

// GetInvitations returns the Invitations field value if set, zero value otherwise.
func (o *InvitationList) GetInvitations() []Membership {
	if o == nil || IsNil(o.Invitations) {
		var ret []Membership
		return ret
	}
	return o.Invitations
}

// GetInvitationsOk returns a tuple with the Invitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationList) GetInvitationsOk() ([]Membership, bool) {
	if o == nil || IsNil(o.Invitations) {
		return nil, false
	}
	return o.Invitations, true
}

// HasInvitations returns a boolean if a field has been set.
func (o *InvitationList) HasInvitations() bool {
	if o != nil && !IsNil(o.Invitations) {
		return true
	}

	return false
}

// SetInvitations gets a reference to the given []Membership and assigns it to the Invitations field.
func (o *InvitationList) SetInvitations(v []Membership) {
	o.Invitations = v
}

func (o InvitationList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvitationList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invitations) {
		toSerialize["invitations"] = o.Invitations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InvitationList) UnmarshalJSON(data []byte) (err error) {
	varInvitationList := _InvitationList{}

	err = json.Unmarshal(data, &varInvitationList)

	if err != nil {
		return err
	}

	*o = InvitationList(varInvitationList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "invitations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvitationList struct {
	value *InvitationList
	isSet bool
}

func (v NullableInvitationList) Get() *InvitationList {
	return v.value
}

func (v *NullableInvitationList) Set(val *InvitationList) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationList) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationList(val *InvitationList) *NullableInvitationList {
	return &NullableInvitationList{value: val, isSet: true}
}

func (v NullableInvitationList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
