/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// VlanVirtualCircuitStatus The status of a Virtual Circuit is always 'pending' on creation. The status can turn to 'Waiting on Customer VLAN' if a Metro VLAN was not set yet on the Virtual Circuit and is the last step needed for full activation. For Dedicated interconnections, as long as the Dedicated Port has been associated to the Virtual Circuit and a NNI VNID has been set, it will turn to 'waiting_on_customer_vlan'. For Fabric VCs, it will only change to 'waiting_on_customer_vlan' once the corresponding Fabric connection has been found on the Fabric side. If the Fabric service token associated with the Virtual Circuit hasn't been redeemed on Fabric within the expiry time, it will change to an `expired` status. Once a Metro VLAN is set on the Virtual Circuit (which for Fabric VCs, can be set on creation of a Fabric VC) and the necessary set up is done, it will turn into 'Activating' status as it tries to activate the Virtual Circuit. Once the Virtual Circuit fully activates and is configured on the switch, it will turn to staus 'active'. For Fabric VCs (Metal Billed), we will start billing the moment the status of the Virtual Circuit turns to 'active'. If there are any changes to the VLAN after the Virtual Circuit is in an 'active' status, the status will show 'changing_vlan' if a new VLAN has been provided, or 'deactivating' if we are removing the VLAN. When a deletion request is issued for the Virtual Circuit, it will move to a 'deleting' status, and we will immediately unconfigure the switch for the Virtual Circuit and issue a deletion on any associated Fabric connections. Any associated Metro VLANs on the virtual circuit will also be unassociated after the switch has been successfully unconfigured. If there are any associated Fabric connections, we will only fully delete the Virtual Circuit once we have checked that the Fabric connection was fully deprovisioned on Fabric.
type VlanVirtualCircuitStatus string

// List of VlanVirtualCircuit_status
const (
	VLANVIRTUALCIRCUITSTATUS_PENDING                            VlanVirtualCircuitStatus = "pending"
	VLANVIRTUALCIRCUITSTATUS_WAITING_ON_CUSTOMER_VLAN           VlanVirtualCircuitStatus = "waiting_on_customer_vlan"
	VLANVIRTUALCIRCUITSTATUS_ACTIVATING                         VlanVirtualCircuitStatus = "activating"
	VLANVIRTUALCIRCUITSTATUS_CHANGING_VLAN                      VlanVirtualCircuitStatus = "changing_vlan"
	VLANVIRTUALCIRCUITSTATUS_DEACTIVATING                       VlanVirtualCircuitStatus = "deactivating"
	VLANVIRTUALCIRCUITSTATUS_DELETING                           VlanVirtualCircuitStatus = "deleting"
	VLANVIRTUALCIRCUITSTATUS_ACTIVE                             VlanVirtualCircuitStatus = "active"
	VLANVIRTUALCIRCUITSTATUS_EXPIRED                            VlanVirtualCircuitStatus = "expired"
	VLANVIRTUALCIRCUITSTATUS_ACTIVATION_FAILED                  VlanVirtualCircuitStatus = "activation_failed"
	VLANVIRTUALCIRCUITSTATUS_CHANGING_VLAN_FAILED               VlanVirtualCircuitStatus = "changing_vlan_failed"
	VLANVIRTUALCIRCUITSTATUS_DEACTIVATION_FAILED                VlanVirtualCircuitStatus = "deactivation_failed"
	VLANVIRTUALCIRCUITSTATUS_DELETE_FAILED                      VlanVirtualCircuitStatus = "delete_failed"
	VLANVIRTUALCIRCUITSTATUS_CONFIGURE_FABRIC_ROUTING_PROTOCOLS VlanVirtualCircuitStatus = "configure_fabric_routing_protocols"
)

// All allowed values of VlanVirtualCircuitStatus enum
var AllowedVlanVirtualCircuitStatusEnumValues = []VlanVirtualCircuitStatus{
	"pending",
	"waiting_on_customer_vlan",
	"activating",
	"changing_vlan",
	"deactivating",
	"deleting",
	"active",
	"expired",
	"activation_failed",
	"changing_vlan_failed",
	"deactivation_failed",
	"delete_failed",
	"configure_fabric_routing_protocols",
}

func (v *VlanVirtualCircuitStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VlanVirtualCircuitStatus(value)
	for _, existing := range AllowedVlanVirtualCircuitStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VlanVirtualCircuitStatus", value)
}

// NewVlanVirtualCircuitStatusFromValue returns a pointer to a valid VlanVirtualCircuitStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVlanVirtualCircuitStatusFromValue(v string) (*VlanVirtualCircuitStatus, error) {
	ev := VlanVirtualCircuitStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VlanVirtualCircuitStatus: valid values are %v", v, AllowedVlanVirtualCircuitStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VlanVirtualCircuitStatus) IsValid() bool {
	for _, existing := range AllowedVlanVirtualCircuitStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VlanVirtualCircuit_status value
func (v VlanVirtualCircuitStatus) Ptr() *VlanVirtualCircuitStatus {
	return &v
}

type NullableVlanVirtualCircuitStatus struct {
	value *VlanVirtualCircuitStatus
	isSet bool
}

func (v NullableVlanVirtualCircuitStatus) Get() *VlanVirtualCircuitStatus {
	return v.value
}

func (v *NullableVlanVirtualCircuitStatus) Set(val *VlanVirtualCircuitStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanVirtualCircuitStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanVirtualCircuitStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanVirtualCircuitStatus(val *VlanVirtualCircuitStatus) *NullableVlanVirtualCircuitStatus {
	return &NullableVlanVirtualCircuitStatus{value: val, isSet: true}
}

func (v NullableVlanVirtualCircuitStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanVirtualCircuitStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
