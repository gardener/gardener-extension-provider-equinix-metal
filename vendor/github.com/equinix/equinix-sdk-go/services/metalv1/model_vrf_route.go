/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"time"
)

// checks if the VrfRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfRoute{}

// VrfRoute struct for VrfRoute
type VrfRoute struct {
	// The unique identifier for the newly-created resource
	Id     *string         `json:"id,omitempty"`
	Status *VrfRouteStatus `json:"status,omitempty"`
	// The IPv4 prefix for the route, in CIDR-style notation
	Prefix *string `json:"prefix,omitempty"`
	// The next-hop IPv4 address for the route
	NextHop              *string          `json:"next_hop,omitempty"`
	Type                 *VrfRouteType    `json:"type,omitempty"`
	CreatedAt            *time.Time       `json:"created_at,omitempty"`
	UpdatedAt            *time.Time       `json:"updated_at,omitempty"`
	MetalGateway         *VrfMetalGateway `json:"metal_gateway,omitempty"`
	VirtualNetwork       *VirtualNetwork  `json:"virtual_network,omitempty"`
	Vrf                  *Vrf             `json:"vrf,omitempty"`
	Href                 *string          `json:"href,omitempty"`
	Tags                 []string         `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfRoute VrfRoute

// NewVrfRoute instantiates a new VrfRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfRoute() *VrfRoute {
	this := VrfRoute{}
	return &this
}

// NewVrfRouteWithDefaults instantiates a new VrfRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfRouteWithDefaults() *VrfRoute {
	this := VrfRoute{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VrfRoute) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VrfRoute) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VrfRoute) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VrfRoute) GetStatus() VrfRouteStatus {
	if o == nil || IsNil(o.Status) {
		var ret VrfRouteStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetStatusOk() (*VrfRouteStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VrfRoute) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given VrfRouteStatus and assigns it to the Status field.
func (o *VrfRoute) SetStatus(v VrfRouteStatus) {
	o.Status = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VrfRoute) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VrfRoute) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *VrfRoute) SetPrefix(v string) {
	o.Prefix = &v
}

// GetNextHop returns the NextHop field value if set, zero value otherwise.
func (o *VrfRoute) GetNextHop() string {
	if o == nil || IsNil(o.NextHop) {
		var ret string
		return ret
	}
	return *o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetNextHopOk() (*string, bool) {
	if o == nil || IsNil(o.NextHop) {
		return nil, false
	}
	return o.NextHop, true
}

// HasNextHop returns a boolean if a field has been set.
func (o *VrfRoute) HasNextHop() bool {
	if o != nil && !IsNil(o.NextHop) {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given string and assigns it to the NextHop field.
func (o *VrfRoute) SetNextHop(v string) {
	o.NextHop = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VrfRoute) GetType() VrfRouteType {
	if o == nil || IsNil(o.Type) {
		var ret VrfRouteType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetTypeOk() (*VrfRouteType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VrfRoute) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VrfRouteType and assigns it to the Type field.
func (o *VrfRoute) SetType(v VrfRouteType) {
	o.Type = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *VrfRoute) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *VrfRoute) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *VrfRoute) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *VrfRoute) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *VrfRoute) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *VrfRoute) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetMetalGateway returns the MetalGateway field value if set, zero value otherwise.
func (o *VrfRoute) GetMetalGateway() VrfMetalGateway {
	if o == nil || IsNil(o.MetalGateway) {
		var ret VrfMetalGateway
		return ret
	}
	return *o.MetalGateway
}

// GetMetalGatewayOk returns a tuple with the MetalGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetMetalGatewayOk() (*VrfMetalGateway, bool) {
	if o == nil || IsNil(o.MetalGateway) {
		return nil, false
	}
	return o.MetalGateway, true
}

// HasMetalGateway returns a boolean if a field has been set.
func (o *VrfRoute) HasMetalGateway() bool {
	if o != nil && !IsNil(o.MetalGateway) {
		return true
	}

	return false
}

// SetMetalGateway gets a reference to the given VrfMetalGateway and assigns it to the MetalGateway field.
func (o *VrfRoute) SetMetalGateway(v VrfMetalGateway) {
	o.MetalGateway = &v
}

// GetVirtualNetwork returns the VirtualNetwork field value if set, zero value otherwise.
func (o *VrfRoute) GetVirtualNetwork() VirtualNetwork {
	if o == nil || IsNil(o.VirtualNetwork) {
		var ret VirtualNetwork
		return ret
	}
	return *o.VirtualNetwork
}

// GetVirtualNetworkOk returns a tuple with the VirtualNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetVirtualNetworkOk() (*VirtualNetwork, bool) {
	if o == nil || IsNil(o.VirtualNetwork) {
		return nil, false
	}
	return o.VirtualNetwork, true
}

// HasVirtualNetwork returns a boolean if a field has been set.
func (o *VrfRoute) HasVirtualNetwork() bool {
	if o != nil && !IsNil(o.VirtualNetwork) {
		return true
	}

	return false
}

// SetVirtualNetwork gets a reference to the given VirtualNetwork and assigns it to the VirtualNetwork field.
func (o *VrfRoute) SetVirtualNetwork(v VirtualNetwork) {
	o.VirtualNetwork = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *VrfRoute) GetVrf() Vrf {
	if o == nil || IsNil(o.Vrf) {
		var ret Vrf
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetVrfOk() (*Vrf, bool) {
	if o == nil || IsNil(o.Vrf) {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *VrfRoute) HasVrf() bool {
	if o != nil && !IsNil(o.Vrf) {
		return true
	}

	return false
}

// SetVrf gets a reference to the given Vrf and assigns it to the Vrf field.
func (o *VrfRoute) SetVrf(v Vrf) {
	o.Vrf = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *VrfRoute) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *VrfRoute) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *VrfRoute) SetHref(v string) {
	o.Href = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VrfRoute) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRoute) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VrfRoute) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VrfRoute) SetTags(v []string) {
	o.Tags = v
}

func (o VrfRoute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.NextHop) {
		toSerialize["next_hop"] = o.NextHop
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.MetalGateway) {
		toSerialize["metal_gateway"] = o.MetalGateway
	}
	if !IsNil(o.VirtualNetwork) {
		toSerialize["virtual_network"] = o.VirtualNetwork
	}
	if !IsNil(o.Vrf) {
		toSerialize["vrf"] = o.Vrf
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfRoute) UnmarshalJSON(data []byte) (err error) {
	varVrfRoute := _VrfRoute{}

	err = json.Unmarshal(data, &varVrfRoute)

	if err != nil {
		return err
	}

	*o = VrfRoute(varVrfRoute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "next_hop")
		delete(additionalProperties, "type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "metal_gateway")
		delete(additionalProperties, "virtual_network")
		delete(additionalProperties, "vrf")
		delete(additionalProperties, "href")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfRoute struct {
	value *VrfRoute
	isSet bool
}

func (v NullableVrfRoute) Get() *VrfRoute {
	return v.value
}

func (v *NullableVrfRoute) Set(val *VrfRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfRoute(val *VrfRoute) *NullableVrfRoute {
	return &NullableVrfRoute{value: val, isSet: true}
}

func (v NullableVrfRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
