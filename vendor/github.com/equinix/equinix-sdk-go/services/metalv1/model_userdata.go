/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the Userdata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Userdata{}

// Userdata struct for Userdata
type Userdata struct {
	Userdata             *string `json:"userdata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Userdata Userdata

// NewUserdata instantiates a new Userdata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserdata() *Userdata {
	this := Userdata{}
	return &this
}

// NewUserdataWithDefaults instantiates a new Userdata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserdataWithDefaults() *Userdata {
	this := Userdata{}
	return &this
}

// GetUserdata returns the Userdata field value if set, zero value otherwise.
func (o *Userdata) GetUserdata() string {
	if o == nil || IsNil(o.Userdata) {
		var ret string
		return ret
	}
	return *o.Userdata
}

// GetUserdataOk returns a tuple with the Userdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userdata) GetUserdataOk() (*string, bool) {
	if o == nil || IsNil(o.Userdata) {
		return nil, false
	}
	return o.Userdata, true
}

// HasUserdata returns a boolean if a field has been set.
func (o *Userdata) HasUserdata() bool {
	if o != nil && !IsNil(o.Userdata) {
		return true
	}

	return false
}

// SetUserdata gets a reference to the given string and assigns it to the Userdata field.
func (o *Userdata) SetUserdata(v string) {
	o.Userdata = &v
}

func (o Userdata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Userdata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Userdata) {
		toSerialize["userdata"] = o.Userdata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Userdata) UnmarshalJSON(data []byte) (err error) {
	varUserdata := _Userdata{}

	err = json.Unmarshal(data, &varUserdata)

	if err != nil {
		return err
	}

	*o = Userdata(varUserdata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userdata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserdata struct {
	value *Userdata
	isSet bool
}

func (v NullableUserdata) Get() *Userdata {
	return v.value
}

func (v *NullableUserdata) Set(val *Userdata) {
	v.value = val
	v.isSet = true
}

func (v NullableUserdata) IsSet() bool {
	return v.isSet
}

func (v *NullableUserdata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserdata(val *Userdata) *NullableUserdata {
	return &NullableUserdata{value: val, isSet: true}
}

func (v NullableUserdata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserdata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
