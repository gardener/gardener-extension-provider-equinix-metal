/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"time"
)

// checks if the BgpDynamicNeighbor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpDynamicNeighbor{}

// BgpDynamicNeighbor struct for BgpDynamicNeighbor
type BgpDynamicNeighbor struct {
	// The unique identifier for the resource
	Id *string `json:"id,omitempty"`
	// The ASN of the dynamic BGP neighbor
	BgpNeighborAsn *int64 `json:"bgp_neighbor_asn,omitempty"`
	// Network range of the dynamic BGP neighbor in CIDR format
	BgpNeighborRange     *string                  `json:"bgp_neighbor_range,omitempty"`
	MetalGateway         *VrfMetalGateway         `json:"metal_gateway,omitempty"`
	State                *BgpDynamicNeighborState `json:"state,omitempty"`
	Href                 *string                  `json:"href,omitempty"`
	CreatedAt            *time.Time               `json:"created_at,omitempty"`
	CreatedBy            *UserLimited             `json:"created_by,omitempty"`
	UpdatedAt            *time.Time               `json:"updated_at,omitempty"`
	Tags                 []string                 `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpDynamicNeighbor BgpDynamicNeighbor

// NewBgpDynamicNeighbor instantiates a new BgpDynamicNeighbor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpDynamicNeighbor() *BgpDynamicNeighbor {
	this := BgpDynamicNeighbor{}
	return &this
}

// NewBgpDynamicNeighborWithDefaults instantiates a new BgpDynamicNeighbor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpDynamicNeighborWithDefaults() *BgpDynamicNeighbor {
	this := BgpDynamicNeighbor{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BgpDynamicNeighbor) SetId(v string) {
	o.Id = &v
}

// GetBgpNeighborAsn returns the BgpNeighborAsn field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetBgpNeighborAsn() int64 {
	if o == nil || IsNil(o.BgpNeighborAsn) {
		var ret int64
		return ret
	}
	return *o.BgpNeighborAsn
}

// GetBgpNeighborAsnOk returns a tuple with the BgpNeighborAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetBgpNeighborAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.BgpNeighborAsn) {
		return nil, false
	}
	return o.BgpNeighborAsn, true
}

// HasBgpNeighborAsn returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasBgpNeighborAsn() bool {
	if o != nil && !IsNil(o.BgpNeighborAsn) {
		return true
	}

	return false
}

// SetBgpNeighborAsn gets a reference to the given int64 and assigns it to the BgpNeighborAsn field.
func (o *BgpDynamicNeighbor) SetBgpNeighborAsn(v int64) {
	o.BgpNeighborAsn = &v
}

// GetBgpNeighborRange returns the BgpNeighborRange field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetBgpNeighborRange() string {
	if o == nil || IsNil(o.BgpNeighborRange) {
		var ret string
		return ret
	}
	return *o.BgpNeighborRange
}

// GetBgpNeighborRangeOk returns a tuple with the BgpNeighborRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetBgpNeighborRangeOk() (*string, bool) {
	if o == nil || IsNil(o.BgpNeighborRange) {
		return nil, false
	}
	return o.BgpNeighborRange, true
}

// HasBgpNeighborRange returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasBgpNeighborRange() bool {
	if o != nil && !IsNil(o.BgpNeighborRange) {
		return true
	}

	return false
}

// SetBgpNeighborRange gets a reference to the given string and assigns it to the BgpNeighborRange field.
func (o *BgpDynamicNeighbor) SetBgpNeighborRange(v string) {
	o.BgpNeighborRange = &v
}

// GetMetalGateway returns the MetalGateway field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetMetalGateway() VrfMetalGateway {
	if o == nil || IsNil(o.MetalGateway) {
		var ret VrfMetalGateway
		return ret
	}
	return *o.MetalGateway
}

// GetMetalGatewayOk returns a tuple with the MetalGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetMetalGatewayOk() (*VrfMetalGateway, bool) {
	if o == nil || IsNil(o.MetalGateway) {
		return nil, false
	}
	return o.MetalGateway, true
}

// HasMetalGateway returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasMetalGateway() bool {
	if o != nil && !IsNil(o.MetalGateway) {
		return true
	}

	return false
}

// SetMetalGateway gets a reference to the given VrfMetalGateway and assigns it to the MetalGateway field.
func (o *BgpDynamicNeighbor) SetMetalGateway(v VrfMetalGateway) {
	o.MetalGateway = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetState() BgpDynamicNeighborState {
	if o == nil || IsNil(o.State) {
		var ret BgpDynamicNeighborState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetStateOk() (*BgpDynamicNeighborState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given BgpDynamicNeighborState and assigns it to the State field.
func (o *BgpDynamicNeighbor) SetState(v BgpDynamicNeighborState) {
	o.State = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *BgpDynamicNeighbor) SetHref(v string) {
	o.Href = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *BgpDynamicNeighbor) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetCreatedBy() UserLimited {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserLimited
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetCreatedByOk() (*UserLimited, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserLimited and assigns it to the CreatedBy field.
func (o *BgpDynamicNeighbor) SetCreatedBy(v UserLimited) {
	o.CreatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *BgpDynamicNeighbor) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *BgpDynamicNeighbor) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpDynamicNeighbor) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *BgpDynamicNeighbor) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *BgpDynamicNeighbor) SetTags(v []string) {
	o.Tags = v
}

func (o BgpDynamicNeighbor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpDynamicNeighbor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.BgpNeighborAsn) {
		toSerialize["bgp_neighbor_asn"] = o.BgpNeighborAsn
	}
	if !IsNil(o.BgpNeighborRange) {
		toSerialize["bgp_neighbor_range"] = o.BgpNeighborRange
	}
	if !IsNil(o.MetalGateway) {
		toSerialize["metal_gateway"] = o.MetalGateway
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpDynamicNeighbor) UnmarshalJSON(data []byte) (err error) {
	varBgpDynamicNeighbor := _BgpDynamicNeighbor{}

	err = json.Unmarshal(data, &varBgpDynamicNeighbor)

	if err != nil {
		return err
	}

	*o = BgpDynamicNeighbor(varBgpDynamicNeighbor)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "bgp_neighbor_asn")
		delete(additionalProperties, "bgp_neighbor_range")
		delete(additionalProperties, "metal_gateway")
		delete(additionalProperties, "state")
		delete(additionalProperties, "href")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "created_by")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpDynamicNeighbor struct {
	value *BgpDynamicNeighbor
	isSet bool
}

func (v NullableBgpDynamicNeighbor) Get() *BgpDynamicNeighbor {
	return v.value
}

func (v *NullableBgpDynamicNeighbor) Set(val *BgpDynamicNeighbor) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpDynamicNeighbor) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpDynamicNeighbor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpDynamicNeighbor(val *BgpDynamicNeighbor) *NullableBgpDynamicNeighbor {
	return &NullableBgpDynamicNeighbor{value: val, isSet: true}
}

func (v NullableBgpDynamicNeighbor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpDynamicNeighbor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
