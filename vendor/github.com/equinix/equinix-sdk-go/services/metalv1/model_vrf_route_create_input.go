/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the VrfRouteCreateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfRouteCreateInput{}

// VrfRouteCreateInput struct for VrfRouteCreateInput
type VrfRouteCreateInput struct {
	// The IPv4 prefix for the route, in CIDR-style notation. For a static default route, this will always be \"0.0.0.0/0\"
	Prefix string `json:"prefix"`
	// The IPv4 address within the VRF of the host that will handle this route
	NextHop              string   `json:"next_hop"`
	Tags                 []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfRouteCreateInput VrfRouteCreateInput

// NewVrfRouteCreateInput instantiates a new VrfRouteCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfRouteCreateInput(prefix string, nextHop string) *VrfRouteCreateInput {
	this := VrfRouteCreateInput{}
	this.Prefix = prefix
	this.NextHop = nextHop
	return &this
}

// NewVrfRouteCreateInputWithDefaults instantiates a new VrfRouteCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfRouteCreateInputWithDefaults() *VrfRouteCreateInput {
	this := VrfRouteCreateInput{}
	return &this
}

// GetPrefix returns the Prefix field value
func (o *VrfRouteCreateInput) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *VrfRouteCreateInput) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *VrfRouteCreateInput) SetPrefix(v string) {
	o.Prefix = v
}

// GetNextHop returns the NextHop field value
func (o *VrfRouteCreateInput) GetNextHop() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value
// and a boolean to check if the value has been set.
func (o *VrfRouteCreateInput) GetNextHopOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextHop, true
}

// SetNextHop sets field value
func (o *VrfRouteCreateInput) SetNextHop(v string) {
	o.NextHop = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VrfRouteCreateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRouteCreateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VrfRouteCreateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VrfRouteCreateInput) SetTags(v []string) {
	o.Tags = v
}

func (o VrfRouteCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfRouteCreateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prefix"] = o.Prefix
	toSerialize["next_hop"] = o.NextHop
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfRouteCreateInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prefix",
		"next_hop",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVrfRouteCreateInput := _VrfRouteCreateInput{}

	err = json.Unmarshal(data, &varVrfRouteCreateInput)

	if err != nil {
		return err
	}

	*o = VrfRouteCreateInput(varVrfRouteCreateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "next_hop")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfRouteCreateInput struct {
	value *VrfRouteCreateInput
	isSet bool
}

func (v NullableVrfRouteCreateInput) Get() *VrfRouteCreateInput {
	return v.value
}

func (v *NullableVrfRouteCreateInput) Set(val *VrfRouteCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfRouteCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfRouteCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfRouteCreateInput(val *VrfRouteCreateInput) *NullableVrfRouteCreateInput {
	return &NullableVrfRouteCreateInput{value: val, isSet: true}
}

func (v NullableVrfRouteCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfRouteCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
