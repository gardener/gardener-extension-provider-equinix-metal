/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the DeviceUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceUsage{}

// DeviceUsage struct for DeviceUsage
type DeviceUsage struct {
	Quantity             *string `json:"quantity,omitempty"`
	Total                *string `json:"total,omitempty"`
	Unit                 *string `json:"unit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceUsage DeviceUsage

// NewDeviceUsage instantiates a new DeviceUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUsage() *DeviceUsage {
	this := DeviceUsage{}
	return &this
}

// NewDeviceUsageWithDefaults instantiates a new DeviceUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUsageWithDefaults() *DeviceUsage {
	this := DeviceUsage{}
	return &this
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *DeviceUsage) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUsage) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *DeviceUsage) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *DeviceUsage) SetQuantity(v string) {
	o.Quantity = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DeviceUsage) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUsage) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DeviceUsage) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *DeviceUsage) SetTotal(v string) {
	o.Total = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *DeviceUsage) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUsage) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *DeviceUsage) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *DeviceUsage) SetUnit(v string) {
	o.Unit = &v
}

func (o DeviceUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceUsage) UnmarshalJSON(data []byte) (err error) {
	varDeviceUsage := _DeviceUsage{}

	err = json.Unmarshal(data, &varDeviceUsage)

	if err != nil {
		return err
	}

	*o = DeviceUsage(varDeviceUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "total")
		delete(additionalProperties, "unit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceUsage struct {
	value *DeviceUsage
	isSet bool
}

func (v NullableDeviceUsage) Get() *DeviceUsage {
	return v.value
}

func (v *NullableDeviceUsage) Set(val *DeviceUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUsage(val *DeviceUsage) *NullableDeviceUsage {
	return &NullableDeviceUsage{value: val, isSet: true}
}

func (v NullableDeviceUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
