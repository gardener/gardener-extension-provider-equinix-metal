/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// CreateMetalGatewayRequest - struct for CreateMetalGatewayRequest
type CreateMetalGatewayRequest struct {
	MetalGatewayCreateInput    *MetalGatewayCreateInput
	VrfMetalGatewayCreateInput *VrfMetalGatewayCreateInput
}

// MetalGatewayCreateInputAsCreateMetalGatewayRequest is a convenience function that returns MetalGatewayCreateInput wrapped in CreateMetalGatewayRequest
func MetalGatewayCreateInputAsCreateMetalGatewayRequest(v *MetalGatewayCreateInput) CreateMetalGatewayRequest {
	return CreateMetalGatewayRequest{
		MetalGatewayCreateInput: v,
	}
}

// VrfMetalGatewayCreateInputAsCreateMetalGatewayRequest is a convenience function that returns VrfMetalGatewayCreateInput wrapped in CreateMetalGatewayRequest
func VrfMetalGatewayCreateInputAsCreateMetalGatewayRequest(v *VrfMetalGatewayCreateInput) CreateMetalGatewayRequest {
	return CreateMetalGatewayRequest{
		VrfMetalGatewayCreateInput: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateMetalGatewayRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MetalGatewayCreateInput
	err = newStrictDecoder(data).Decode(&dst.MetalGatewayCreateInput)
	if err == nil {
		jsonMetalGatewayCreateInput, _ := json.Marshal(dst.MetalGatewayCreateInput)
		if string(jsonMetalGatewayCreateInput) == "{}" { // empty struct
			dst.MetalGatewayCreateInput = nil
		} else {
			match++
		}
	} else {
		dst.MetalGatewayCreateInput = nil
	}

	// try to unmarshal data into VrfMetalGatewayCreateInput
	err = newStrictDecoder(data).Decode(&dst.VrfMetalGatewayCreateInput)
	if err == nil {
		jsonVrfMetalGatewayCreateInput, _ := json.Marshal(dst.VrfMetalGatewayCreateInput)
		if string(jsonVrfMetalGatewayCreateInput) == "{}" { // empty struct
			dst.VrfMetalGatewayCreateInput = nil
		} else {
			match++
		}
	} else {
		dst.VrfMetalGatewayCreateInput = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MetalGatewayCreateInput = nil
		dst.VrfMetalGatewayCreateInput = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateMetalGatewayRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateMetalGatewayRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateMetalGatewayRequest) MarshalJSON() ([]byte, error) {
	if src.MetalGatewayCreateInput != nil {
		return json.Marshal(&src.MetalGatewayCreateInput)
	}

	if src.VrfMetalGatewayCreateInput != nil {
		return json.Marshal(&src.VrfMetalGatewayCreateInput)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateMetalGatewayRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MetalGatewayCreateInput != nil {
		return obj.MetalGatewayCreateInput
	}

	if obj.VrfMetalGatewayCreateInput != nil {
		return obj.VrfMetalGatewayCreateInput
	}

	// all schemas are nil
	return nil
}

type NullableCreateMetalGatewayRequest struct {
	value *CreateMetalGatewayRequest
	isSet bool
}

func (v NullableCreateMetalGatewayRequest) Get() *CreateMetalGatewayRequest {
	return v.value
}

func (v *NullableCreateMetalGatewayRequest) Set(val *CreateMetalGatewayRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMetalGatewayRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMetalGatewayRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMetalGatewayRequest(val *CreateMetalGatewayRequest) *NullableCreateMetalGatewayRequest {
	return &NullableCreateMetalGatewayRequest{value: val, isSet: true}
}

func (v NullableCreateMetalGatewayRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMetalGatewayRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
