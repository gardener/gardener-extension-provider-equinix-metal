/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the MetroList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetroList{}

// MetroList struct for MetroList
type MetroList struct {
	Metros               []Metro `json:"metros,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetroList MetroList

// NewMetroList instantiates a new MetroList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetroList() *MetroList {
	this := MetroList{}
	return &this
}

// NewMetroListWithDefaults instantiates a new MetroList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroListWithDefaults() *MetroList {
	this := MetroList{}
	return &this
}

// GetMetros returns the Metros field value if set, zero value otherwise.
func (o *MetroList) GetMetros() []Metro {
	if o == nil || IsNil(o.Metros) {
		var ret []Metro
		return ret
	}
	return o.Metros
}

// GetMetrosOk returns a tuple with the Metros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroList) GetMetrosOk() ([]Metro, bool) {
	if o == nil || IsNil(o.Metros) {
		return nil, false
	}
	return o.Metros, true
}

// HasMetros returns a boolean if a field has been set.
func (o *MetroList) HasMetros() bool {
	if o != nil && !IsNil(o.Metros) {
		return true
	}

	return false
}

// SetMetros gets a reference to the given []Metro and assigns it to the Metros field.
func (o *MetroList) SetMetros(v []Metro) {
	o.Metros = v
}

func (o MetroList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetroList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metros) {
		toSerialize["metros"] = o.Metros
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetroList) UnmarshalJSON(data []byte) (err error) {
	varMetroList := _MetroList{}

	err = json.Unmarshal(data, &varMetroList)

	if err != nil {
		return err
	}

	*o = MetroList(varMetroList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metros")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetroList struct {
	value *MetroList
	isSet bool
}

func (v NullableMetroList) Get() *MetroList {
	return v.value
}

func (v *NullableMetroList) Set(val *MetroList) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroList) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroList(val *MetroList) *NullableMetroList {
	return &NullableMetroList{value: val, isSet: true}
}

func (v NullableMetroList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
