/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// BgpDynamicNeighborState the model 'BgpDynamicNeighborState'
type BgpDynamicNeighborState string

// List of BgpDynamicNeighbor_state
const (
	BGPDYNAMICNEIGHBORSTATE_ACTIVE   BgpDynamicNeighborState = "active"
	BGPDYNAMICNEIGHBORSTATE_DELETING BgpDynamicNeighborState = "deleting"
	BGPDYNAMICNEIGHBORSTATE_PENDING  BgpDynamicNeighborState = "pending"
	BGPDYNAMICNEIGHBORSTATE_READY    BgpDynamicNeighborState = "ready"
)

// All allowed values of BgpDynamicNeighborState enum
var AllowedBgpDynamicNeighborStateEnumValues = []BgpDynamicNeighborState{
	"active",
	"deleting",
	"pending",
	"ready",
}

func (v *BgpDynamicNeighborState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BgpDynamicNeighborState(value)
	for _, existing := range AllowedBgpDynamicNeighborStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BgpDynamicNeighborState", value)
}

// NewBgpDynamicNeighborStateFromValue returns a pointer to a valid BgpDynamicNeighborState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBgpDynamicNeighborStateFromValue(v string) (*BgpDynamicNeighborState, error) {
	ev := BgpDynamicNeighborState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BgpDynamicNeighborState: valid values are %v", v, AllowedBgpDynamicNeighborStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BgpDynamicNeighborState) IsValid() bool {
	for _, existing := range AllowedBgpDynamicNeighborStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BgpDynamicNeighbor_state value
func (v BgpDynamicNeighborState) Ptr() *BgpDynamicNeighborState {
	return &v
}

type NullableBgpDynamicNeighborState struct {
	value *BgpDynamicNeighborState
	isSet bool
}

func (v NullableBgpDynamicNeighborState) Get() *BgpDynamicNeighborState {
	return v.value
}

func (v *NullableBgpDynamicNeighborState) Set(val *BgpDynamicNeighborState) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpDynamicNeighborState) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpDynamicNeighborState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpDynamicNeighborState(val *BgpDynamicNeighborState) *NullableBgpDynamicNeighborState {
	return &NullableBgpDynamicNeighborState{value: val, isSet: true}
}

func (v NullableBgpDynamicNeighborState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpDynamicNeighborState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
