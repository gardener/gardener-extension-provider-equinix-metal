/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the OperatingSystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperatingSystem{}

// OperatingSystem struct for OperatingSystem
type OperatingSystem struct {
	// The date on which the current OS image was build and released
	BuildDate *string `json:"build_date,omitempty"`
	// The date when the OS is deprecated
	DeprecationDate *string `json:"deprecation_date,omitempty"`
	Distro          *string `json:"distro,omitempty"`
	DistroLabel     *string `json:"distro_label,omitempty"`
	// The OS no longer receives any updates and may be disabled at any time
	EndOfLifeDate *string `json:"end_of_life_date,omitempty"`
	// When the OS is nearing end of life, typically 30 days before end of life
	EndOfServiceDate *string `json:"end_of_service_date,omitempty"`
	Id               *string `json:"id,omitempty"`
	// Licenced OS is priced according to pricing property
	Licensed *bool `json:"licensed,omitempty"`
	// Where in the support lifecycle the OS is
	LifecycleState *string `json:"lifecycle_state,omitempty"`
	Name           *string `json:"name,omitempty"`
	// Servers can be already preinstalled with OS in order to shorten provision time.
	Preinstallable *bool `json:"preinstallable,omitempty"`
	// This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)
	Pricing         map[string]interface{} `json:"pricing,omitempty"`
	ProvisionableOn []string               `json:"provisionable_on,omitempty"`
	// The date when the OS was released
	ReleaseDate *string `json:"release_date,omitempty"`
	// The current release notes for this OS image, typically in Markdown format
	ReleaseNotes *string `json:"release_notes,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Version      *string `json:"version,omitempty"`
	// Default operating system for the distro.
	DefaultOperatingSystem *bool `json:"default_operating_system,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _OperatingSystem OperatingSystem

// NewOperatingSystem instantiates a new OperatingSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatingSystem() *OperatingSystem {
	this := OperatingSystem{}
	return &this
}

// NewOperatingSystemWithDefaults instantiates a new OperatingSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatingSystemWithDefaults() *OperatingSystem {
	this := OperatingSystem{}
	return &this
}

// GetBuildDate returns the BuildDate field value if set, zero value otherwise.
func (o *OperatingSystem) GetBuildDate() string {
	if o == nil || IsNil(o.BuildDate) {
		var ret string
		return ret
	}
	return *o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetBuildDateOk() (*string, bool) {
	if o == nil || IsNil(o.BuildDate) {
		return nil, false
	}
	return o.BuildDate, true
}

// HasBuildDate returns a boolean if a field has been set.
func (o *OperatingSystem) HasBuildDate() bool {
	if o != nil && !IsNil(o.BuildDate) {
		return true
	}

	return false
}

// SetBuildDate gets a reference to the given string and assigns it to the BuildDate field.
func (o *OperatingSystem) SetBuildDate(v string) {
	o.BuildDate = &v
}

// GetDeprecationDate returns the DeprecationDate field value if set, zero value otherwise.
func (o *OperatingSystem) GetDeprecationDate() string {
	if o == nil || IsNil(o.DeprecationDate) {
		var ret string
		return ret
	}
	return *o.DeprecationDate
}

// GetDeprecationDateOk returns a tuple with the DeprecationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetDeprecationDateOk() (*string, bool) {
	if o == nil || IsNil(o.DeprecationDate) {
		return nil, false
	}
	return o.DeprecationDate, true
}

// HasDeprecationDate returns a boolean if a field has been set.
func (o *OperatingSystem) HasDeprecationDate() bool {
	if o != nil && !IsNil(o.DeprecationDate) {
		return true
	}

	return false
}

// SetDeprecationDate gets a reference to the given string and assigns it to the DeprecationDate field.
func (o *OperatingSystem) SetDeprecationDate(v string) {
	o.DeprecationDate = &v
}

// GetDistro returns the Distro field value if set, zero value otherwise.
func (o *OperatingSystem) GetDistro() string {
	if o == nil || IsNil(o.Distro) {
		var ret string
		return ret
	}
	return *o.Distro
}

// GetDistroOk returns a tuple with the Distro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetDistroOk() (*string, bool) {
	if o == nil || IsNil(o.Distro) {
		return nil, false
	}
	return o.Distro, true
}

// HasDistro returns a boolean if a field has been set.
func (o *OperatingSystem) HasDistro() bool {
	if o != nil && !IsNil(o.Distro) {
		return true
	}

	return false
}

// SetDistro gets a reference to the given string and assigns it to the Distro field.
func (o *OperatingSystem) SetDistro(v string) {
	o.Distro = &v
}

// GetDistroLabel returns the DistroLabel field value if set, zero value otherwise.
func (o *OperatingSystem) GetDistroLabel() string {
	if o == nil || IsNil(o.DistroLabel) {
		var ret string
		return ret
	}
	return *o.DistroLabel
}

// GetDistroLabelOk returns a tuple with the DistroLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetDistroLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DistroLabel) {
		return nil, false
	}
	return o.DistroLabel, true
}

// HasDistroLabel returns a boolean if a field has been set.
func (o *OperatingSystem) HasDistroLabel() bool {
	if o != nil && !IsNil(o.DistroLabel) {
		return true
	}

	return false
}

// SetDistroLabel gets a reference to the given string and assigns it to the DistroLabel field.
func (o *OperatingSystem) SetDistroLabel(v string) {
	o.DistroLabel = &v
}

// GetEndOfLifeDate returns the EndOfLifeDate field value if set, zero value otherwise.
func (o *OperatingSystem) GetEndOfLifeDate() string {
	if o == nil || IsNil(o.EndOfLifeDate) {
		var ret string
		return ret
	}
	return *o.EndOfLifeDate
}

// GetEndOfLifeDateOk returns a tuple with the EndOfLifeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetEndOfLifeDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndOfLifeDate) {
		return nil, false
	}
	return o.EndOfLifeDate, true
}

// HasEndOfLifeDate returns a boolean if a field has been set.
func (o *OperatingSystem) HasEndOfLifeDate() bool {
	if o != nil && !IsNil(o.EndOfLifeDate) {
		return true
	}

	return false
}

// SetEndOfLifeDate gets a reference to the given string and assigns it to the EndOfLifeDate field.
func (o *OperatingSystem) SetEndOfLifeDate(v string) {
	o.EndOfLifeDate = &v
}

// GetEndOfServiceDate returns the EndOfServiceDate field value if set, zero value otherwise.
func (o *OperatingSystem) GetEndOfServiceDate() string {
	if o == nil || IsNil(o.EndOfServiceDate) {
		var ret string
		return ret
	}
	return *o.EndOfServiceDate
}

// GetEndOfServiceDateOk returns a tuple with the EndOfServiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetEndOfServiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndOfServiceDate) {
		return nil, false
	}
	return o.EndOfServiceDate, true
}

// HasEndOfServiceDate returns a boolean if a field has been set.
func (o *OperatingSystem) HasEndOfServiceDate() bool {
	if o != nil && !IsNil(o.EndOfServiceDate) {
		return true
	}

	return false
}

// SetEndOfServiceDate gets a reference to the given string and assigns it to the EndOfServiceDate field.
func (o *OperatingSystem) SetEndOfServiceDate(v string) {
	o.EndOfServiceDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OperatingSystem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OperatingSystem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OperatingSystem) SetId(v string) {
	o.Id = &v
}

// GetLicensed returns the Licensed field value if set, zero value otherwise.
func (o *OperatingSystem) GetLicensed() bool {
	if o == nil || IsNil(o.Licensed) {
		var ret bool
		return ret
	}
	return *o.Licensed
}

// GetLicensedOk returns a tuple with the Licensed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetLicensedOk() (*bool, bool) {
	if o == nil || IsNil(o.Licensed) {
		return nil, false
	}
	return o.Licensed, true
}

// HasLicensed returns a boolean if a field has been set.
func (o *OperatingSystem) HasLicensed() bool {
	if o != nil && !IsNil(o.Licensed) {
		return true
	}

	return false
}

// SetLicensed gets a reference to the given bool and assigns it to the Licensed field.
func (o *OperatingSystem) SetLicensed(v bool) {
	o.Licensed = &v
}

// GetLifecycleState returns the LifecycleState field value if set, zero value otherwise.
func (o *OperatingSystem) GetLifecycleState() string {
	if o == nil || IsNil(o.LifecycleState) {
		var ret string
		return ret
	}
	return *o.LifecycleState
}

// GetLifecycleStateOk returns a tuple with the LifecycleState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetLifecycleStateOk() (*string, bool) {
	if o == nil || IsNil(o.LifecycleState) {
		return nil, false
	}
	return o.LifecycleState, true
}

// HasLifecycleState returns a boolean if a field has been set.
func (o *OperatingSystem) HasLifecycleState() bool {
	if o != nil && !IsNil(o.LifecycleState) {
		return true
	}

	return false
}

// SetLifecycleState gets a reference to the given string and assigns it to the LifecycleState field.
func (o *OperatingSystem) SetLifecycleState(v string) {
	o.LifecycleState = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OperatingSystem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OperatingSystem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OperatingSystem) SetName(v string) {
	o.Name = &v
}

// GetPreinstallable returns the Preinstallable field value if set, zero value otherwise.
func (o *OperatingSystem) GetPreinstallable() bool {
	if o == nil || IsNil(o.Preinstallable) {
		var ret bool
		return ret
	}
	return *o.Preinstallable
}

// GetPreinstallableOk returns a tuple with the Preinstallable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetPreinstallableOk() (*bool, bool) {
	if o == nil || IsNil(o.Preinstallable) {
		return nil, false
	}
	return o.Preinstallable, true
}

// HasPreinstallable returns a boolean if a field has been set.
func (o *OperatingSystem) HasPreinstallable() bool {
	if o != nil && !IsNil(o.Preinstallable) {
		return true
	}

	return false
}

// SetPreinstallable gets a reference to the given bool and assigns it to the Preinstallable field.
func (o *OperatingSystem) SetPreinstallable(v bool) {
	o.Preinstallable = &v
}

// GetPricing returns the Pricing field value if set, zero value otherwise.
func (o *OperatingSystem) GetPricing() map[string]interface{} {
	if o == nil || IsNil(o.Pricing) {
		var ret map[string]interface{}
		return ret
	}
	return o.Pricing
}

// GetPricingOk returns a tuple with the Pricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetPricingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Pricing) {
		return map[string]interface{}{}, false
	}
	return o.Pricing, true
}

// HasPricing returns a boolean if a field has been set.
func (o *OperatingSystem) HasPricing() bool {
	if o != nil && !IsNil(o.Pricing) {
		return true
	}

	return false
}

// SetPricing gets a reference to the given map[string]interface{} and assigns it to the Pricing field.
func (o *OperatingSystem) SetPricing(v map[string]interface{}) {
	o.Pricing = v
}

// GetProvisionableOn returns the ProvisionableOn field value if set, zero value otherwise.
func (o *OperatingSystem) GetProvisionableOn() []string {
	if o == nil || IsNil(o.ProvisionableOn) {
		var ret []string
		return ret
	}
	return o.ProvisionableOn
}

// GetProvisionableOnOk returns a tuple with the ProvisionableOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetProvisionableOnOk() ([]string, bool) {
	if o == nil || IsNil(o.ProvisionableOn) {
		return nil, false
	}
	return o.ProvisionableOn, true
}

// HasProvisionableOn returns a boolean if a field has been set.
func (o *OperatingSystem) HasProvisionableOn() bool {
	if o != nil && !IsNil(o.ProvisionableOn) {
		return true
	}

	return false
}

// SetProvisionableOn gets a reference to the given []string and assigns it to the ProvisionableOn field.
func (o *OperatingSystem) SetProvisionableOn(v []string) {
	o.ProvisionableOn = v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *OperatingSystem) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *OperatingSystem) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *OperatingSystem) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise.
func (o *OperatingSystem) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetReleaseNotesOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseNotes) {
		return nil, false
	}
	return o.ReleaseNotes, true
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *OperatingSystem) HasReleaseNotes() bool {
	if o != nil && !IsNil(o.ReleaseNotes) {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given string and assigns it to the ReleaseNotes field.
func (o *OperatingSystem) SetReleaseNotes(v string) {
	o.ReleaseNotes = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *OperatingSystem) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *OperatingSystem) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *OperatingSystem) SetSlug(v string) {
	o.Slug = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *OperatingSystem) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *OperatingSystem) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *OperatingSystem) SetVersion(v string) {
	o.Version = &v
}

// GetDefaultOperatingSystem returns the DefaultOperatingSystem field value if set, zero value otherwise.
func (o *OperatingSystem) GetDefaultOperatingSystem() bool {
	if o == nil || IsNil(o.DefaultOperatingSystem) {
		var ret bool
		return ret
	}
	return *o.DefaultOperatingSystem
}

// GetDefaultOperatingSystemOk returns a tuple with the DefaultOperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystem) GetDefaultOperatingSystemOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultOperatingSystem) {
		return nil, false
	}
	return o.DefaultOperatingSystem, true
}

// HasDefaultOperatingSystem returns a boolean if a field has been set.
func (o *OperatingSystem) HasDefaultOperatingSystem() bool {
	if o != nil && !IsNil(o.DefaultOperatingSystem) {
		return true
	}

	return false
}

// SetDefaultOperatingSystem gets a reference to the given bool and assigns it to the DefaultOperatingSystem field.
func (o *OperatingSystem) SetDefaultOperatingSystem(v bool) {
	o.DefaultOperatingSystem = &v
}

func (o OperatingSystem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperatingSystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildDate) {
		toSerialize["build_date"] = o.BuildDate
	}
	if !IsNil(o.DeprecationDate) {
		toSerialize["deprecation_date"] = o.DeprecationDate
	}
	if !IsNil(o.Distro) {
		toSerialize["distro"] = o.Distro
	}
	if !IsNil(o.DistroLabel) {
		toSerialize["distro_label"] = o.DistroLabel
	}
	if !IsNil(o.EndOfLifeDate) {
		toSerialize["end_of_life_date"] = o.EndOfLifeDate
	}
	if !IsNil(o.EndOfServiceDate) {
		toSerialize["end_of_service_date"] = o.EndOfServiceDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Licensed) {
		toSerialize["licensed"] = o.Licensed
	}
	if !IsNil(o.LifecycleState) {
		toSerialize["lifecycle_state"] = o.LifecycleState
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Preinstallable) {
		toSerialize["preinstallable"] = o.Preinstallable
	}
	if !IsNil(o.Pricing) {
		toSerialize["pricing"] = o.Pricing
	}
	if !IsNil(o.ProvisionableOn) {
		toSerialize["provisionable_on"] = o.ProvisionableOn
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if !IsNil(o.ReleaseNotes) {
		toSerialize["release_notes"] = o.ReleaseNotes
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.DefaultOperatingSystem) {
		toSerialize["default_operating_system"] = o.DefaultOperatingSystem
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OperatingSystem) UnmarshalJSON(data []byte) (err error) {
	varOperatingSystem := _OperatingSystem{}

	err = json.Unmarshal(data, &varOperatingSystem)

	if err != nil {
		return err
	}

	*o = OperatingSystem(varOperatingSystem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "build_date")
		delete(additionalProperties, "deprecation_date")
		delete(additionalProperties, "distro")
		delete(additionalProperties, "distro_label")
		delete(additionalProperties, "end_of_life_date")
		delete(additionalProperties, "end_of_service_date")
		delete(additionalProperties, "id")
		delete(additionalProperties, "licensed")
		delete(additionalProperties, "lifecycle_state")
		delete(additionalProperties, "name")
		delete(additionalProperties, "preinstallable")
		delete(additionalProperties, "pricing")
		delete(additionalProperties, "provisionable_on")
		delete(additionalProperties, "release_date")
		delete(additionalProperties, "release_notes")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "version")
		delete(additionalProperties, "default_operating_system")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOperatingSystem struct {
	value *OperatingSystem
	isSet bool
}

func (v NullableOperatingSystem) Get() *OperatingSystem {
	return v.value
}

func (v *NullableOperatingSystem) Set(val *OperatingSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatingSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatingSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatingSystem(val *OperatingSystem) *NullableOperatingSystem {
	return &NullableOperatingSystem{value: val, isSet: true}
}

func (v NullableOperatingSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatingSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
