/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// SharedPortVCVlanCreateInputType the model 'SharedPortVCVlanCreateInputType'
type SharedPortVCVlanCreateInputType string

// List of SharedPortVCVlanCreateInput_type
const (
	SHAREDPORTVCVLANCREATEINPUTTYPE_SHARED_PORT_VLAN SharedPortVCVlanCreateInputType = "shared_port_vlan"
)

// All allowed values of SharedPortVCVlanCreateInputType enum
var AllowedSharedPortVCVlanCreateInputTypeEnumValues = []SharedPortVCVlanCreateInputType{
	"shared_port_vlan",
}

func (v *SharedPortVCVlanCreateInputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SharedPortVCVlanCreateInputType(value)
	for _, existing := range AllowedSharedPortVCVlanCreateInputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SharedPortVCVlanCreateInputType", value)
}

// NewSharedPortVCVlanCreateInputTypeFromValue returns a pointer to a valid SharedPortVCVlanCreateInputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSharedPortVCVlanCreateInputTypeFromValue(v string) (*SharedPortVCVlanCreateInputType, error) {
	ev := SharedPortVCVlanCreateInputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SharedPortVCVlanCreateInputType: valid values are %v", v, AllowedSharedPortVCVlanCreateInputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SharedPortVCVlanCreateInputType) IsValid() bool {
	for _, existing := range AllowedSharedPortVCVlanCreateInputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SharedPortVCVlanCreateInput_type value
func (v SharedPortVCVlanCreateInputType) Ptr() *SharedPortVCVlanCreateInputType {
	return &v
}

type NullableSharedPortVCVlanCreateInputType struct {
	value *SharedPortVCVlanCreateInputType
	isSet bool
}

func (v NullableSharedPortVCVlanCreateInputType) Get() *SharedPortVCVlanCreateInputType {
	return v.value
}

func (v *NullableSharedPortVCVlanCreateInputType) Set(val *SharedPortVCVlanCreateInputType) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedPortVCVlanCreateInputType) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedPortVCVlanCreateInputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedPortVCVlanCreateInputType(val *SharedPortVCVlanCreateInputType) *NullableSharedPortVCVlanCreateInputType {
	return &NullableSharedPortVCVlanCreateInputType{value: val, isSet: true}
}

func (v NullableSharedPortVCVlanCreateInputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedPortVCVlanCreateInputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
