/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VrfLearnedRoutesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfLearnedRoutesList{}

// VrfLearnedRoutesList struct for VrfLearnedRoutesList
type VrfLearnedRoutesList struct {
	LearnedRoutes        []VrfLearnedRoutes `json:"learned_routes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfLearnedRoutesList VrfLearnedRoutesList

// NewVrfLearnedRoutesList instantiates a new VrfLearnedRoutesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfLearnedRoutesList() *VrfLearnedRoutesList {
	this := VrfLearnedRoutesList{}
	return &this
}

// NewVrfLearnedRoutesListWithDefaults instantiates a new VrfLearnedRoutesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfLearnedRoutesListWithDefaults() *VrfLearnedRoutesList {
	this := VrfLearnedRoutesList{}
	return &this
}

// GetLearnedRoutes returns the LearnedRoutes field value if set, zero value otherwise.
func (o *VrfLearnedRoutesList) GetLearnedRoutes() []VrfLearnedRoutes {
	if o == nil || IsNil(o.LearnedRoutes) {
		var ret []VrfLearnedRoutes
		return ret
	}
	return o.LearnedRoutes
}

// GetLearnedRoutesOk returns a tuple with the LearnedRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfLearnedRoutesList) GetLearnedRoutesOk() ([]VrfLearnedRoutes, bool) {
	if o == nil || IsNil(o.LearnedRoutes) {
		return nil, false
	}
	return o.LearnedRoutes, true
}

// HasLearnedRoutes returns a boolean if a field has been set.
func (o *VrfLearnedRoutesList) HasLearnedRoutes() bool {
	if o != nil && !IsNil(o.LearnedRoutes) {
		return true
	}

	return false
}

// SetLearnedRoutes gets a reference to the given []VrfLearnedRoutes and assigns it to the LearnedRoutes field.
func (o *VrfLearnedRoutesList) SetLearnedRoutes(v []VrfLearnedRoutes) {
	o.LearnedRoutes = v
}

func (o VrfLearnedRoutesList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfLearnedRoutesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LearnedRoutes) {
		toSerialize["learned_routes"] = o.LearnedRoutes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfLearnedRoutesList) UnmarshalJSON(data []byte) (err error) {
	varVrfLearnedRoutesList := _VrfLearnedRoutesList{}

	err = json.Unmarshal(data, &varVrfLearnedRoutesList)

	if err != nil {
		return err
	}

	*o = VrfLearnedRoutesList(varVrfLearnedRoutesList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "learned_routes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfLearnedRoutesList struct {
	value *VrfLearnedRoutesList
	isSet bool
}

func (v NullableVrfLearnedRoutesList) Get() *VrfLearnedRoutesList {
	return v.value
}

func (v *NullableVrfLearnedRoutesList) Set(val *VrfLearnedRoutesList) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfLearnedRoutesList) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfLearnedRoutesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfLearnedRoutesList(val *VrfLearnedRoutesList) *NullableVrfLearnedRoutesList {
	return &NullableVrfLearnedRoutesList{value: val, isSet: true}
}

func (v NullableVrfLearnedRoutesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfLearnedRoutesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
