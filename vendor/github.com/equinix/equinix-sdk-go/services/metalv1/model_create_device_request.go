/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// CreateDeviceRequest - struct for CreateDeviceRequest
type CreateDeviceRequest struct {
	DeviceCreateInFacilityInput *DeviceCreateInFacilityInput
	DeviceCreateInMetroInput    *DeviceCreateInMetroInput
}

// DeviceCreateInFacilityInputAsCreateDeviceRequest is a convenience function that returns DeviceCreateInFacilityInput wrapped in CreateDeviceRequest
func DeviceCreateInFacilityInputAsCreateDeviceRequest(v *DeviceCreateInFacilityInput) CreateDeviceRequest {
	return CreateDeviceRequest{
		DeviceCreateInFacilityInput: v,
	}
}

// DeviceCreateInMetroInputAsCreateDeviceRequest is a convenience function that returns DeviceCreateInMetroInput wrapped in CreateDeviceRequest
func DeviceCreateInMetroInputAsCreateDeviceRequest(v *DeviceCreateInMetroInput) CreateDeviceRequest {
	return CreateDeviceRequest{
		DeviceCreateInMetroInput: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDeviceRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeviceCreateInFacilityInput
	err = newStrictDecoder(data).Decode(&dst.DeviceCreateInFacilityInput)
	if err == nil {
		jsonDeviceCreateInFacilityInput, _ := json.Marshal(dst.DeviceCreateInFacilityInput)
		if string(jsonDeviceCreateInFacilityInput) == "{}" { // empty struct
			dst.DeviceCreateInFacilityInput = nil
		} else {
			match++
		}
	} else {
		dst.DeviceCreateInFacilityInput = nil
	}

	// try to unmarshal data into DeviceCreateInMetroInput
	err = newStrictDecoder(data).Decode(&dst.DeviceCreateInMetroInput)
	if err == nil {
		jsonDeviceCreateInMetroInput, _ := json.Marshal(dst.DeviceCreateInMetroInput)
		if string(jsonDeviceCreateInMetroInput) == "{}" { // empty struct
			dst.DeviceCreateInMetroInput = nil
		} else {
			match++
		}
	} else {
		dst.DeviceCreateInMetroInput = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeviceCreateInFacilityInput = nil
		dst.DeviceCreateInMetroInput = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDeviceRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDeviceRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDeviceRequest) MarshalJSON() ([]byte, error) {
	if src.DeviceCreateInFacilityInput != nil {
		return json.Marshal(&src.DeviceCreateInFacilityInput)
	}

	if src.DeviceCreateInMetroInput != nil {
		return json.Marshal(&src.DeviceCreateInMetroInput)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDeviceRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DeviceCreateInFacilityInput != nil {
		return obj.DeviceCreateInFacilityInput
	}

	if obj.DeviceCreateInMetroInput != nil {
		return obj.DeviceCreateInMetroInput
	}

	// all schemas are nil
	return nil
}

type NullableCreateDeviceRequest struct {
	value *CreateDeviceRequest
	isSet bool
}

func (v NullableCreateDeviceRequest) Get() *CreateDeviceRequest {
	return v.value
}

func (v *NullableCreateDeviceRequest) Set(val *CreateDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDeviceRequest(val *CreateDeviceRequest) *NullableCreateDeviceRequest {
	return &NullableCreateDeviceRequest{value: val, isSet: true}
}

func (v NullableCreateDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
