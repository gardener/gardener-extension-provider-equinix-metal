/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VrfBGPNeighbors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfBGPNeighbors{}

// VrfBGPNeighbors struct for VrfBGPNeighbors
type VrfBGPNeighbors struct {
	PeerIp *string `json:"peer_ip,omitempty"`
	// The ASN of the peer that advertised the prefix.
	PeerAs *int64 `json:"peer_as,omitempty"`
	// The current status of the connection to the BGP peer. State is either up or down.
	State                *string `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfBGPNeighbors VrfBGPNeighbors

// NewVrfBGPNeighbors instantiates a new VrfBGPNeighbors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfBGPNeighbors() *VrfBGPNeighbors {
	this := VrfBGPNeighbors{}
	return &this
}

// NewVrfBGPNeighborsWithDefaults instantiates a new VrfBGPNeighbors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfBGPNeighborsWithDefaults() *VrfBGPNeighbors {
	this := VrfBGPNeighbors{}
	return &this
}

// GetPeerIp returns the PeerIp field value if set, zero value otherwise.
func (o *VrfBGPNeighbors) GetPeerIp() string {
	if o == nil || IsNil(o.PeerIp) {
		var ret string
		return ret
	}
	return *o.PeerIp
}

// GetPeerIpOk returns a tuple with the PeerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfBGPNeighbors) GetPeerIpOk() (*string, bool) {
	if o == nil || IsNil(o.PeerIp) {
		return nil, false
	}
	return o.PeerIp, true
}

// HasPeerIp returns a boolean if a field has been set.
func (o *VrfBGPNeighbors) HasPeerIp() bool {
	if o != nil && !IsNil(o.PeerIp) {
		return true
	}

	return false
}

// SetPeerIp gets a reference to the given string and assigns it to the PeerIp field.
func (o *VrfBGPNeighbors) SetPeerIp(v string) {
	o.PeerIp = &v
}

// GetPeerAs returns the PeerAs field value if set, zero value otherwise.
func (o *VrfBGPNeighbors) GetPeerAs() int64 {
	if o == nil || IsNil(o.PeerAs) {
		var ret int64
		return ret
	}
	return *o.PeerAs
}

// GetPeerAsOk returns a tuple with the PeerAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfBGPNeighbors) GetPeerAsOk() (*int64, bool) {
	if o == nil || IsNil(o.PeerAs) {
		return nil, false
	}
	return o.PeerAs, true
}

// HasPeerAs returns a boolean if a field has been set.
func (o *VrfBGPNeighbors) HasPeerAs() bool {
	if o != nil && !IsNil(o.PeerAs) {
		return true
	}

	return false
}

// SetPeerAs gets a reference to the given int64 and assigns it to the PeerAs field.
func (o *VrfBGPNeighbors) SetPeerAs(v int64) {
	o.PeerAs = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *VrfBGPNeighbors) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfBGPNeighbors) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *VrfBGPNeighbors) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *VrfBGPNeighbors) SetState(v string) {
	o.State = &v
}

func (o VrfBGPNeighbors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfBGPNeighbors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PeerIp) {
		toSerialize["peer_ip"] = o.PeerIp
	}
	if !IsNil(o.PeerAs) {
		toSerialize["peer_as"] = o.PeerAs
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfBGPNeighbors) UnmarshalJSON(data []byte) (err error) {
	varVrfBGPNeighbors := _VrfBGPNeighbors{}

	err = json.Unmarshal(data, &varVrfBGPNeighbors)

	if err != nil {
		return err
	}

	*o = VrfBGPNeighbors(varVrfBGPNeighbors)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "peer_ip")
		delete(additionalProperties, "peer_as")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfBGPNeighbors struct {
	value *VrfBGPNeighbors
	isSet bool
}

func (v NullableVrfBGPNeighbors) Get() *VrfBGPNeighbors {
	return v.value
}

func (v *NullableVrfBGPNeighbors) Set(val *VrfBGPNeighbors) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfBGPNeighbors) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfBGPNeighbors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfBGPNeighbors(val *VrfBGPNeighbors) *NullableVrfBGPNeighbors {
	return &NullableVrfBGPNeighbors{value: val, isSet: true}
}

func (v NullableVrfBGPNeighbors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfBGPNeighbors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
