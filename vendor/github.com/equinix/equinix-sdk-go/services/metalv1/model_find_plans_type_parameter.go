/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindPlansTypeParameter the model 'FindPlansTypeParameter'
type FindPlansTypeParameter string

// List of findPlans_type_parameter
const (
	FINDPLANSTYPEPARAMETER_STANDARD           FindPlansTypeParameter = "standard"
	FINDPLANSTYPEPARAMETER_WORKLOAD_OPTIMIZED FindPlansTypeParameter = "workload_optimized"
	FINDPLANSTYPEPARAMETER_CUSTOM             FindPlansTypeParameter = "custom"
)

// All allowed values of FindPlansTypeParameter enum
var AllowedFindPlansTypeParameterEnumValues = []FindPlansTypeParameter{
	"standard",
	"workload_optimized",
	"custom",
}

func (v *FindPlansTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindPlansTypeParameter(value)
	for _, existing := range AllowedFindPlansTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindPlansTypeParameter", value)
}

// NewFindPlansTypeParameterFromValue returns a pointer to a valid FindPlansTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindPlansTypeParameterFromValue(v string) (*FindPlansTypeParameter, error) {
	ev := FindPlansTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindPlansTypeParameter: valid values are %v", v, AllowedFindPlansTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindPlansTypeParameter) IsValid() bool {
	for _, existing := range AllowedFindPlansTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findPlans_type_parameter value
func (v FindPlansTypeParameter) Ptr() *FindPlansTypeParameter {
	return &v
}

type NullableFindPlansTypeParameter struct {
	value *FindPlansTypeParameter
	isSet bool
}

func (v NullableFindPlansTypeParameter) Get() *FindPlansTypeParameter {
	return v.value
}

func (v *NullableFindPlansTypeParameter) Set(val *FindPlansTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableFindPlansTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableFindPlansTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindPlansTypeParameter(val *FindPlansTypeParameter) *NullableFindPlansTypeParameter {
	return &NullableFindPlansTypeParameter{value: val, isSet: true}
}

func (v NullableFindPlansTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindPlansTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
