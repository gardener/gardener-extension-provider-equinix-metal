/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// DeviceState The current state the instance is in.  * When an instance is initially created it will be in the `queued` state until it is picked up by the provisioner. * Once provisioning has begun on the instance it's state will move to `provisioning`. * When an instance is deleted, it will move to `deprovisioning` state until the deprovision is completed and the instance state moves to `deleted`. * If an instance fails to provision or deprovision it will move to `failed` state. * Once an instance has completed provisioning it will move to `active` state. * If an instance is currently powering off or powering on it will move to `powering_off` or `powering_on` states respectively.  * When the instance is powered off completely it will move to the `inactive` state. * When an instance is powered on completely it will move to the `active` state. * Using the reinstall action to install a new OS on the instance will cause the instance state to change to `reinstalling`. * When the reinstall action is complete the instance will move to `active` state.
type DeviceState string

// List of Device_state
const (
	DEVICESTATE_QUEUED         DeviceState = "queued"
	DEVICESTATE_PROVISIONING   DeviceState = "provisioning"
	DEVICESTATE_DEPROVISIONING DeviceState = "deprovisioning"
	DEVICESTATE_REINSTALLING   DeviceState = "reinstalling"
	DEVICESTATE_ACTIVE         DeviceState = "active"
	DEVICESTATE_INACTIVE       DeviceState = "inactive"
	DEVICESTATE_FAILED         DeviceState = "failed"
	DEVICESTATE_POWERING_ON    DeviceState = "powering_on"
	DEVICESTATE_POWERING_OFF   DeviceState = "powering_off"
	DEVICESTATE_DELETED        DeviceState = "deleted"
)

// All allowed values of DeviceState enum
var AllowedDeviceStateEnumValues = []DeviceState{
	"queued",
	"provisioning",
	"deprovisioning",
	"reinstalling",
	"active",
	"inactive",
	"failed",
	"powering_on",
	"powering_off",
	"deleted",
}

func (v *DeviceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceState(value)
	for _, existing := range AllowedDeviceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceState", value)
}

// NewDeviceStateFromValue returns a pointer to a valid DeviceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceStateFromValue(v string) (*DeviceState, error) {
	ev := DeviceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceState: valid values are %v", v, AllowedDeviceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceState) IsValid() bool {
	for _, existing := range AllowedDeviceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Device_state value
func (v DeviceState) Ptr() *DeviceState {
	return &v
}

type NullableDeviceState struct {
	value *DeviceState
	isSet bool
}

func (v NullableDeviceState) Get() *DeviceState {
	return v.value
}

func (v *NullableDeviceState) Set(val *DeviceState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceState(val *DeviceState) *NullableDeviceState {
	return &NullableDeviceState{value: val, isSet: true}
}

func (v NullableDeviceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
