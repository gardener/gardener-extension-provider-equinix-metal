/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// DeviceState The current state the instance is in.  * When an instance is initially created it will be in the `queued` state until it is picked up by the provisioner. * Once provisioning has begun on the instance it's state will move to `provisioning`. * When an instance is deleted, it will move to `deprovisioning` state until the deprovision is completed and the instance state moves to `deleted`. * If an instance fails to provision or deprovision it will move to `failed` state. * Once an instance has completed provisioning it will move to `active` state. * If an instance is currently powering off or powering on it will move to `powering_off` or `powering_on` states respectively.  * When the instance is powered off completely it will move to the `inactive` state. * When an instance is powered on completely it will move to the `active` state. * Using the reinstall action to install a new OS on the instance will cause the instance state to change to `reinstalling`. * When the reinstall action is complete the instance will move to `active` state.
type DeviceState string

// List of Device_state
const (
	DEVICESTATE_QUEUED         DeviceState = "queued"
	DEVICESTATE_PROVISIONING   DeviceState = "provisioning"
	DEVICESTATE_DEPROVISIONING DeviceState = "deprovisioning"
	DEVICESTATE_REINSTALLING   DeviceState = "reinstalling"
	DEVICESTATE_ACTIVE         DeviceState = "active"
	DEVICESTATE_INACTIVE       DeviceState = "inactive"
	DEVICESTATE_FAILED         DeviceState = "failed"
	DEVICESTATE_POWERING_ON    DeviceState = "powering_on"
	DEVICESTATE_POWERING_OFF   DeviceState = "powering_off"
	DEVICESTATE_DELETED        DeviceState = "deleted"
)

// All allowed values of DeviceState enum
var AllowedDeviceStateEnumValues = []DeviceState{
	"queued",
	"provisioning",
	"deprovisioning",
	"reinstalling",
	"active",
	"inactive",
	"failed",
	"powering_on",
	"powering_off",
	"deleted",
}

func (v *DeviceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceState(value)
	for _, existing := range AllowedDeviceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceState", value)
}

// NewDeviceStateFromValue returns a pointer to a valid DeviceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceStateFromValue(v string) (*DeviceState, error) {
	ev := DeviceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceState: valid values are %v", v, AllowedDeviceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceState) IsValid() bool {
	for _, existing := range AllowedDeviceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Device_state value
func (v DeviceState) Ptr() *DeviceState {
	return &v
}

type NullableDeviceState struct {
	value *DeviceState
	isSet bool
}

func (v NullableDeviceState) Get() *DeviceState {
	return v.value
}

func (v *NullableDeviceState) Set(val *DeviceState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceState(val *DeviceState) *NullableDeviceState {
	return &NullableDeviceState{value: val, isSet: true}
}

func (v NullableDeviceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
