/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// RequestIPReservation201Response - struct for RequestIPReservation201Response
type RequestIPReservation201Response struct {
	IPReservation    *IPReservation
	VrfIpReservation *VrfIpReservation
}

// IPReservationAsRequestIPReservation201Response is a convenience function that returns IPReservation wrapped in RequestIPReservation201Response
func IPReservationAsRequestIPReservation201Response(v *IPReservation) RequestIPReservation201Response {
	return RequestIPReservation201Response{
		IPReservation: v,
	}
}

// VrfIpReservationAsRequestIPReservation201Response is a convenience function that returns VrfIpReservation wrapped in RequestIPReservation201Response
func VrfIpReservationAsRequestIPReservation201Response(v *VrfIpReservation) RequestIPReservation201Response {
	return RequestIPReservation201Response{
		VrfIpReservation: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RequestIPReservation201Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IPReservation
	err = newStrictDecoder(data).Decode(&dst.IPReservation)
	if err == nil {
		jsonIPReservation, _ := json.Marshal(dst.IPReservation)
		if string(jsonIPReservation) == "{}" { // empty struct
			dst.IPReservation = nil
		} else {
			match++
		}
	} else {
		dst.IPReservation = nil
	}

	// try to unmarshal data into VrfIpReservation
	err = newStrictDecoder(data).Decode(&dst.VrfIpReservation)
	if err == nil {
		jsonVrfIpReservation, _ := json.Marshal(dst.VrfIpReservation)
		if string(jsonVrfIpReservation) == "{}" { // empty struct
			dst.VrfIpReservation = nil
		} else {
			match++
		}
	} else {
		dst.VrfIpReservation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IPReservation = nil
		dst.VrfIpReservation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RequestIPReservation201Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RequestIPReservation201Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RequestIPReservation201Response) MarshalJSON() ([]byte, error) {
	if src.IPReservation != nil {
		return json.Marshal(&src.IPReservation)
	}

	if src.VrfIpReservation != nil {
		return json.Marshal(&src.VrfIpReservation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RequestIPReservation201Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IPReservation != nil {
		return obj.IPReservation
	}

	if obj.VrfIpReservation != nil {
		return obj.VrfIpReservation
	}

	// all schemas are nil
	return nil
}

type NullableRequestIPReservation201Response struct {
	value *RequestIPReservation201Response
	isSet bool
}

func (v NullableRequestIPReservation201Response) Get() *RequestIPReservation201Response {
	return v.value
}

func (v *NullableRequestIPReservation201Response) Set(val *RequestIPReservation201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestIPReservation201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestIPReservation201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestIPReservation201Response(val *RequestIPReservation201Response) *NullableRequestIPReservation201Response {
	return &NullableRequestIPReservation201Response{value: val, isSet: true}
}

func (v NullableRequestIPReservation201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestIPReservation201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
