/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the UserLimited type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLimited{}

// UserLimited struct for UserLimited
type UserLimited struct {
	// Avatar thumbnail URL of the User
	AvatarThumbUrl *string `json:"avatar_thumb_url,omitempty"`
	// Avatar URL of the User
	AvatarUrl *string `json:"avatar_url,omitempty"`
	// Full name of the User
	FullName *string `json:"full_name,omitempty"`
	// API URL uniquely representing the User
	Href *string `json:"href,omitempty"`
	// ID of the User
	Id                   string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _UserLimited UserLimited

// NewUserLimited instantiates a new UserLimited object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLimited(id string) *UserLimited {
	this := UserLimited{}
	this.Id = id
	return &this
}

// NewUserLimitedWithDefaults instantiates a new UserLimited object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLimitedWithDefaults() *UserLimited {
	this := UserLimited{}
	return &this
}

// GetAvatarThumbUrl returns the AvatarThumbUrl field value if set, zero value otherwise.
func (o *UserLimited) GetAvatarThumbUrl() string {
	if o == nil || IsNil(o.AvatarThumbUrl) {
		var ret string
		return ret
	}
	return *o.AvatarThumbUrl
}

// GetAvatarThumbUrlOk returns a tuple with the AvatarThumbUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimited) GetAvatarThumbUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarThumbUrl) {
		return nil, false
	}
	return o.AvatarThumbUrl, true
}

// HasAvatarThumbUrl returns a boolean if a field has been set.
func (o *UserLimited) HasAvatarThumbUrl() bool {
	if o != nil && !IsNil(o.AvatarThumbUrl) {
		return true
	}

	return false
}

// SetAvatarThumbUrl gets a reference to the given string and assigns it to the AvatarThumbUrl field.
func (o *UserLimited) SetAvatarThumbUrl(v string) {
	o.AvatarThumbUrl = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *UserLimited) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimited) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *UserLimited) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *UserLimited) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *UserLimited) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimited) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *UserLimited) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *UserLimited) SetFullName(v string) {
	o.FullName = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *UserLimited) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimited) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *UserLimited) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *UserLimited) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value
func (o *UserLimited) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserLimited) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserLimited) SetId(v string) {
	o.Id = v
}

func (o UserLimited) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLimited) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvatarThumbUrl) {
		toSerialize["avatar_thumb_url"] = o.AvatarThumbUrl
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserLimited) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserLimited := _UserLimited{}

	err = json.Unmarshal(data, &varUserLimited)

	if err != nil {
		return err
	}

	*o = UserLimited(varUserLimited)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "avatar_thumb_url")
		delete(additionalProperties, "avatar_url")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "href")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserLimited struct {
	value *UserLimited
	isSet bool
}

func (v NullableUserLimited) Get() *UserLimited {
	return v.value
}

func (v *NullableUserLimited) Set(val *UserLimited) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLimited) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLimited) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLimited(val *UserLimited) *NullableUserLimited {
	return &NullableUserLimited{value: val, isSet: true}
}

func (v NullableUserLimited) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLimited) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
