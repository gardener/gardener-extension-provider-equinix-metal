/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the LicenseList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseList{}

// LicenseList struct for LicenseList
type LicenseList struct {
	Licenses             []License `json:"licenses,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LicenseList LicenseList

// NewLicenseList instantiates a new LicenseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseList() *LicenseList {
	this := LicenseList{}
	return &this
}

// NewLicenseListWithDefaults instantiates a new LicenseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseListWithDefaults() *LicenseList {
	this := LicenseList{}
	return &this
}

// GetLicenses returns the Licenses field value if set, zero value otherwise.
func (o *LicenseList) GetLicenses() []License {
	if o == nil || IsNil(o.Licenses) {
		var ret []License
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseList) GetLicensesOk() ([]License, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *LicenseList) HasLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []License and assigns it to the Licenses field.
func (o *LicenseList) SetLicenses(v []License) {
	o.Licenses = v
}

func (o LicenseList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Licenses) {
		toSerialize["licenses"] = o.Licenses
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseList) UnmarshalJSON(data []byte) (err error) {
	varLicenseList := _LicenseList{}

	err = json.Unmarshal(data, &varLicenseList)

	if err != nil {
		return err
	}

	*o = LicenseList(varLicenseList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "licenses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseList struct {
	value *LicenseList
	isSet bool
}

func (v NullableLicenseList) Get() *LicenseList {
	return v.value
}

func (v *NullableLicenseList) Set(val *LicenseList) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseList) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseList(val *LicenseList) *NullableLicenseList {
	return &NullableLicenseList{value: val, isSet: true}
}

func (v NullableLicenseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
