/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PlanList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanList{}

// PlanList struct for PlanList
type PlanList struct {
	Plans                []Plan `json:"plans,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlanList PlanList

// NewPlanList instantiates a new PlanList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanList() *PlanList {
	this := PlanList{}
	return &this
}

// NewPlanListWithDefaults instantiates a new PlanList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanListWithDefaults() *PlanList {
	this := PlanList{}
	return &this
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *PlanList) GetPlans() []Plan {
	if o == nil || IsNil(o.Plans) {
		var ret []Plan
		return ret
	}
	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanList) GetPlansOk() ([]Plan, bool) {
	if o == nil || IsNil(o.Plans) {
		return nil, false
	}
	return o.Plans, true
}

// HasPlans returns a boolean if a field has been set.
func (o *PlanList) HasPlans() bool {
	if o != nil && !IsNil(o.Plans) {
		return true
	}

	return false
}

// SetPlans gets a reference to the given []Plan and assigns it to the Plans field.
func (o *PlanList) SetPlans(v []Plan) {
	o.Plans = v
}

func (o PlanList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Plans) {
		toSerialize["plans"] = o.Plans
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanList) UnmarshalJSON(data []byte) (err error) {
	varPlanList := _PlanList{}

	err = json.Unmarshal(data, &varPlanList)

	if err != nil {
		return err
	}

	*o = PlanList(varPlanList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "plans")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanList struct {
	value *PlanList
	isSet bool
}

func (v NullablePlanList) Get() *PlanList {
	return v.value
}

func (v *NullablePlanList) Set(val *PlanList) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanList) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanList(val *PlanList) *NullablePlanList {
	return &NullablePlanList{value: val, isSet: true}
}

func (v NullablePlanList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
