/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindProjectHardwareReservationsStateParameter the model 'FindProjectHardwareReservationsStateParameter'
type FindProjectHardwareReservationsStateParameter string

// List of findProjectHardwareReservations_state_parameter
const (
	FINDPROJECTHARDWARERESERVATIONSSTATEPARAMETER_ACTIVE          FindProjectHardwareReservationsStateParameter = "active"
	FINDPROJECTHARDWARERESERVATIONSSTATEPARAMETER_SPARE           FindProjectHardwareReservationsStateParameter = "spare"
	FINDPROJECTHARDWARERESERVATIONSSTATEPARAMETER_NEED_OF_SERVICE FindProjectHardwareReservationsStateParameter = "need_of_service"
)

// All allowed values of FindProjectHardwareReservationsStateParameter enum
var AllowedFindProjectHardwareReservationsStateParameterEnumValues = []FindProjectHardwareReservationsStateParameter{
	"active",
	"spare",
	"need_of_service",
}

func (v *FindProjectHardwareReservationsStateParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindProjectHardwareReservationsStateParameter(value)
	for _, existing := range AllowedFindProjectHardwareReservationsStateParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindProjectHardwareReservationsStateParameter", value)
}

// NewFindProjectHardwareReservationsStateParameterFromValue returns a pointer to a valid FindProjectHardwareReservationsStateParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindProjectHardwareReservationsStateParameterFromValue(v string) (*FindProjectHardwareReservationsStateParameter, error) {
	ev := FindProjectHardwareReservationsStateParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindProjectHardwareReservationsStateParameter: valid values are %v", v, AllowedFindProjectHardwareReservationsStateParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindProjectHardwareReservationsStateParameter) IsValid() bool {
	for _, existing := range AllowedFindProjectHardwareReservationsStateParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findProjectHardwareReservations_state_parameter value
func (v FindProjectHardwareReservationsStateParameter) Ptr() *FindProjectHardwareReservationsStateParameter {
	return &v
}

type NullableFindProjectHardwareReservationsStateParameter struct {
	value *FindProjectHardwareReservationsStateParameter
	isSet bool
}

func (v NullableFindProjectHardwareReservationsStateParameter) Get() *FindProjectHardwareReservationsStateParameter {
	return v.value
}

func (v *NullableFindProjectHardwareReservationsStateParameter) Set(val *FindProjectHardwareReservationsStateParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableFindProjectHardwareReservationsStateParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableFindProjectHardwareReservationsStateParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindProjectHardwareReservationsStateParameter(val *FindProjectHardwareReservationsStateParameter) *NullableFindProjectHardwareReservationsStateParameter {
	return &NullableFindProjectHardwareReservationsStateParameter{value: val, isSet: true}
}

func (v NullableFindProjectHardwareReservationsStateParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindProjectHardwareReservationsStateParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
