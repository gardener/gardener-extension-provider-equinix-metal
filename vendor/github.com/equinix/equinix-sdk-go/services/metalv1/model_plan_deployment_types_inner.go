/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// PlanDeploymentTypesInner the model 'PlanDeploymentTypesInner'
type PlanDeploymentTypesInner string

// List of Plan_deployment_types_inner
const (
	PLANDEPLOYMENTTYPESINNER_ON_DEMAND   PlanDeploymentTypesInner = "on_demand"
	PLANDEPLOYMENTTYPESINNER_SPOT_MARKET PlanDeploymentTypesInner = "spot_market"
)

// All allowed values of PlanDeploymentTypesInner enum
var AllowedPlanDeploymentTypesInnerEnumValues = []PlanDeploymentTypesInner{
	"on_demand",
	"spot_market",
}

func (v *PlanDeploymentTypesInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlanDeploymentTypesInner(value)
	for _, existing := range AllowedPlanDeploymentTypesInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlanDeploymentTypesInner", value)
}

// NewPlanDeploymentTypesInnerFromValue returns a pointer to a valid PlanDeploymentTypesInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlanDeploymentTypesInnerFromValue(v string) (*PlanDeploymentTypesInner, error) {
	ev := PlanDeploymentTypesInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlanDeploymentTypesInner: valid values are %v", v, AllowedPlanDeploymentTypesInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlanDeploymentTypesInner) IsValid() bool {
	for _, existing := range AllowedPlanDeploymentTypesInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Plan_deployment_types_inner value
func (v PlanDeploymentTypesInner) Ptr() *PlanDeploymentTypesInner {
	return &v
}

type NullablePlanDeploymentTypesInner struct {
	value *PlanDeploymentTypesInner
	isSet bool
}

func (v NullablePlanDeploymentTypesInner) Get() *PlanDeploymentTypesInner {
	return v.value
}

func (v *NullablePlanDeploymentTypesInner) Set(val *PlanDeploymentTypesInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDeploymentTypesInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDeploymentTypesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDeploymentTypesInner(val *PlanDeploymentTypesInner) *NullablePlanDeploymentTypesInner {
	return &NullablePlanDeploymentTypesInner{value: val, isSet: true}
}

func (v NullablePlanDeploymentTypesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDeploymentTypesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
