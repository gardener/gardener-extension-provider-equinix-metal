/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the IPAvailabilitiesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPAvailabilitiesList{}

// IPAvailabilitiesList struct for IPAvailabilitiesList
type IPAvailabilitiesList struct {
	Available            []string `json:"available,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IPAvailabilitiesList IPAvailabilitiesList

// NewIPAvailabilitiesList instantiates a new IPAvailabilitiesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPAvailabilitiesList() *IPAvailabilitiesList {
	this := IPAvailabilitiesList{}
	return &this
}

// NewIPAvailabilitiesListWithDefaults instantiates a new IPAvailabilitiesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPAvailabilitiesListWithDefaults() *IPAvailabilitiesList {
	this := IPAvailabilitiesList{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *IPAvailabilitiesList) GetAvailable() []string {
	if o == nil || IsNil(o.Available) {
		var ret []string
		return ret
	}
	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAvailabilitiesList) GetAvailableOk() ([]string, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *IPAvailabilitiesList) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given []string and assigns it to the Available field.
func (o *IPAvailabilitiesList) SetAvailable(v []string) {
	o.Available = v
}

func (o IPAvailabilitiesList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPAvailabilitiesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IPAvailabilitiesList) UnmarshalJSON(data []byte) (err error) {
	varIPAvailabilitiesList := _IPAvailabilitiesList{}

	err = json.Unmarshal(data, &varIPAvailabilitiesList)

	if err != nil {
		return err
	}

	*o = IPAvailabilitiesList(varIPAvailabilitiesList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "available")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIPAvailabilitiesList struct {
	value *IPAvailabilitiesList
	isSet bool
}

func (v NullableIPAvailabilitiesList) Get() *IPAvailabilitiesList {
	return v.value
}

func (v *NullableIPAvailabilitiesList) Set(val *IPAvailabilitiesList) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAvailabilitiesList) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAvailabilitiesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAvailabilitiesList(val *IPAvailabilitiesList) *NullableIPAvailabilitiesList {
	return &NullableIPAvailabilitiesList{value: val, isSet: true}
}

func (v NullableIPAvailabilitiesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAvailabilitiesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
