/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the FacilityInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FacilityInput{}

// FacilityInput struct for FacilityInput
type FacilityInput struct {
	// The datacenter where the device should be created.  Either metro or facility must be provided.  The API will accept either a single facility `{ \"facility\": \"f1\" }`, or it can be instructed to create the device in the best available datacenter `{ \"facility\": \"any\" }`.  Additionally it is possible to set a prioritized location selection. For example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` can be used to prioritize `f3` and then `f2` before accepting `any` facility. If none of the facilities provided have availability for the requested device the request will fail.
	// Deprecated
	Facility             []string `json:"facility"`
	AdditionalProperties map[string]interface{}
}

type _FacilityInput FacilityInput

// NewFacilityInput instantiates a new FacilityInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacilityInput(facility []string) *FacilityInput {
	this := FacilityInput{}
	this.Facility = facility
	return &this
}

// NewFacilityInputWithDefaults instantiates a new FacilityInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacilityInputWithDefaults() *FacilityInput {
	this := FacilityInput{}
	return &this
}

// GetFacility returns the Facility field value
// Deprecated
func (o *FacilityInput) GetFacility() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *FacilityInput) GetFacilityOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Facility, true
}

// SetFacility sets field value
// Deprecated
func (o *FacilityInput) SetFacility(v []string) {
	o.Facility = v
}

func (o FacilityInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FacilityInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["facility"] = o.Facility

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FacilityInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"facility",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFacilityInput := _FacilityInput{}

	err = json.Unmarshal(data, &varFacilityInput)

	if err != nil {
		return err
	}

	*o = FacilityInput(varFacilityInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "facility")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFacilityInput struct {
	value *FacilityInput
	isSet bool
}

func (v NullableFacilityInput) Get() *FacilityInput {
	return v.value
}

func (v *NullableFacilityInput) Set(val *FacilityInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFacilityInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFacilityInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacilityInput(val *FacilityInput) *NullableFacilityInput {
	return &NullableFacilityInput{value: val, isSet: true}
}

func (v NullableFacilityInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacilityInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
