/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// VrfRouteStatus The status of the route. Potential values are \"pending\", \"active\", \"deleting\", and \"error\", representing various lifecycle states of the route and whether or not it has been successfully configured on the network
type VrfRouteStatus string

// List of VrfRoute_status
const (
	VRFROUTESTATUS_PENDING  VrfRouteStatus = "pending"
	VRFROUTESTATUS_ACTIVE   VrfRouteStatus = "active"
	VRFROUTESTATUS_DELETING VrfRouteStatus = "deleting"
	VRFROUTESTATUS_ERROR    VrfRouteStatus = "error"
)

// All allowed values of VrfRouteStatus enum
var AllowedVrfRouteStatusEnumValues = []VrfRouteStatus{
	"pending",
	"active",
	"deleting",
	"error",
}

func (v *VrfRouteStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VrfRouteStatus(value)
	for _, existing := range AllowedVrfRouteStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VrfRouteStatus", value)
}

// NewVrfRouteStatusFromValue returns a pointer to a valid VrfRouteStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVrfRouteStatusFromValue(v string) (*VrfRouteStatus, error) {
	ev := VrfRouteStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VrfRouteStatus: valid values are %v", v, AllowedVrfRouteStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VrfRouteStatus) IsValid() bool {
	for _, existing := range AllowedVrfRouteStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VrfRoute_status value
func (v VrfRouteStatus) Ptr() *VrfRouteStatus {
	return &v
}

type NullableVrfRouteStatus struct {
	value *VrfRouteStatus
	isSet bool
}

func (v NullableVrfRouteStatus) Get() *VrfRouteStatus {
	return v.value
}

func (v *NullableVrfRouteStatus) Set(val *VrfRouteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfRouteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfRouteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfRouteStatus(val *VrfRouteStatus) *NullableVrfRouteStatus {
	return &NullableVrfRouteStatus{value: val, isSet: true}
}

func (v NullableVrfRouteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfRouteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
