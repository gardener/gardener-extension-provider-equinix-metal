/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the AttributeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeData{}

// AttributeData struct for AttributeData
type AttributeData struct {
	// Boolean flag to know if the firmware set is the latest for the model and vendor
	Latest *bool `json:"latest,omitempty"`
	// Model on which this firmware set can be applied
	Model *string `json:"model,omitempty"`
	// Vendor on which this firmware set can be applied
	Vendor *string `json:"vendor,omitempty"`
	// Plan where the firmware set can be applied
	Plan                 *string `json:"plan,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AttributeData AttributeData

// NewAttributeData instantiates a new AttributeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeData() *AttributeData {
	this := AttributeData{}
	return &this
}

// NewAttributeDataWithDefaults instantiates a new AttributeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeDataWithDefaults() *AttributeData {
	this := AttributeData{}
	return &this
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *AttributeData) GetLatest() bool {
	if o == nil || IsNil(o.Latest) {
		var ret bool
		return ret
	}
	return *o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeData) GetLatestOk() (*bool, bool) {
	if o == nil || IsNil(o.Latest) {
		return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *AttributeData) HasLatest() bool {
	if o != nil && !IsNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given bool and assigns it to the Latest field.
func (o *AttributeData) SetLatest(v bool) {
	o.Latest = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *AttributeData) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeData) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *AttributeData) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *AttributeData) SetModel(v string) {
	o.Model = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *AttributeData) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeData) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *AttributeData) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *AttributeData) SetVendor(v string) {
	o.Vendor = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *AttributeData) GetPlan() string {
	if o == nil || IsNil(o.Plan) {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeData) GetPlanOk() (*string, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *AttributeData) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *AttributeData) SetPlan(v string) {
	o.Plan = &v
}

func (o AttributeData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AttributeData) UnmarshalJSON(data []byte) (err error) {
	varAttributeData := _AttributeData{}

	err = json.Unmarshal(data, &varAttributeData)

	if err != nil {
		return err
	}

	*o = AttributeData(varAttributeData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "latest")
		delete(additionalProperties, "model")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "plan")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributeData struct {
	value *AttributeData
	isSet bool
}

func (v NullableAttributeData) Get() *AttributeData {
	return v.value
}

func (v *NullableAttributeData) Set(val *AttributeData) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeData) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeData(val *AttributeData) *NullableAttributeData {
	return &NullableAttributeData{value: val, isSet: true}
}

func (v NullableAttributeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
