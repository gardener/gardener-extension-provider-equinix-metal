/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindFacilitiesIncludeParameterInner the model 'FindFacilitiesIncludeParameterInner'
type FindFacilitiesIncludeParameterInner string

// List of findFacilities_include_parameter_inner
const (
	FINDFACILITIESINCLUDEPARAMETERINNER_ADDRESS FindFacilitiesIncludeParameterInner = "address"
	FINDFACILITIESINCLUDEPARAMETERINNER_LABELS  FindFacilitiesIncludeParameterInner = "labels"
)

// All allowed values of FindFacilitiesIncludeParameterInner enum
var AllowedFindFacilitiesIncludeParameterInnerEnumValues = []FindFacilitiesIncludeParameterInner{
	"address",
	"labels",
}

func (v *FindFacilitiesIncludeParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindFacilitiesIncludeParameterInner(value)
	for _, existing := range AllowedFindFacilitiesIncludeParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindFacilitiesIncludeParameterInner", value)
}

// NewFindFacilitiesIncludeParameterInnerFromValue returns a pointer to a valid FindFacilitiesIncludeParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindFacilitiesIncludeParameterInnerFromValue(v string) (*FindFacilitiesIncludeParameterInner, error) {
	ev := FindFacilitiesIncludeParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindFacilitiesIncludeParameterInner: valid values are %v", v, AllowedFindFacilitiesIncludeParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindFacilitiesIncludeParameterInner) IsValid() bool {
	for _, existing := range AllowedFindFacilitiesIncludeParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findFacilities_include_parameter_inner value
func (v FindFacilitiesIncludeParameterInner) Ptr() *FindFacilitiesIncludeParameterInner {
	return &v
}

type NullableFindFacilitiesIncludeParameterInner struct {
	value *FindFacilitiesIncludeParameterInner
	isSet bool
}

func (v NullableFindFacilitiesIncludeParameterInner) Get() *FindFacilitiesIncludeParameterInner {
	return v.value
}

func (v *NullableFindFacilitiesIncludeParameterInner) Set(val *FindFacilitiesIncludeParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFindFacilitiesIncludeParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFindFacilitiesIncludeParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindFacilitiesIncludeParameterInner(val *FindFacilitiesIncludeParameterInner) *NullableFindFacilitiesIncludeParameterInner {
	return &NullableFindFacilitiesIncludeParameterInner{value: val, isSet: true}
}

func (v NullableFindFacilitiesIncludeParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindFacilitiesIncludeParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
