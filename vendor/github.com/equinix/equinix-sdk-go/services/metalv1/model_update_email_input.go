/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the UpdateEmailInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEmailInput{}

// UpdateEmailInput struct for UpdateEmailInput
type UpdateEmailInput struct {
	Default              *bool `json:"default,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateEmailInput UpdateEmailInput

// NewUpdateEmailInput instantiates a new UpdateEmailInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEmailInput() *UpdateEmailInput {
	this := UpdateEmailInput{}
	return &this
}

// NewUpdateEmailInputWithDefaults instantiates a new UpdateEmailInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEmailInputWithDefaults() *UpdateEmailInput {
	this := UpdateEmailInput{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *UpdateEmailInput) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEmailInput) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *UpdateEmailInput) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *UpdateEmailInput) SetDefault(v bool) {
	o.Default = &v
}

func (o UpdateEmailInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEmailInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateEmailInput) UnmarshalJSON(data []byte) (err error) {
	varUpdateEmailInput := _UpdateEmailInput{}

	err = json.Unmarshal(data, &varUpdateEmailInput)

	if err != nil {
		return err
	}

	*o = UpdateEmailInput(varUpdateEmailInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateEmailInput struct {
	value *UpdateEmailInput
	isSet bool
}

func (v NullableUpdateEmailInput) Get() *UpdateEmailInput {
	return v.value
}

func (v *NullableUpdateEmailInput) Set(val *UpdateEmailInput) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEmailInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEmailInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEmailInput(val *UpdateEmailInput) *NullableUpdateEmailInput {
	return &NullableUpdateEmailInput{value: val, isSet: true}
}

func (v NullableUpdateEmailInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEmailInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
