/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the GlobalBgpRangeList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalBgpRangeList{}

// GlobalBgpRangeList struct for GlobalBgpRangeList
type GlobalBgpRangeList struct {
	GlobalBgpRanges      []GlobalBgpRange `json:"global_bgp_ranges,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GlobalBgpRangeList GlobalBgpRangeList

// NewGlobalBgpRangeList instantiates a new GlobalBgpRangeList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalBgpRangeList() *GlobalBgpRangeList {
	this := GlobalBgpRangeList{}
	return &this
}

// NewGlobalBgpRangeListWithDefaults instantiates a new GlobalBgpRangeList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalBgpRangeListWithDefaults() *GlobalBgpRangeList {
	this := GlobalBgpRangeList{}
	return &this
}

// GetGlobalBgpRanges returns the GlobalBgpRanges field value if set, zero value otherwise.
func (o *GlobalBgpRangeList) GetGlobalBgpRanges() []GlobalBgpRange {
	if o == nil || IsNil(o.GlobalBgpRanges) {
		var ret []GlobalBgpRange
		return ret
	}
	return o.GlobalBgpRanges
}

// GetGlobalBgpRangesOk returns a tuple with the GlobalBgpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalBgpRangeList) GetGlobalBgpRangesOk() ([]GlobalBgpRange, bool) {
	if o == nil || IsNil(o.GlobalBgpRanges) {
		return nil, false
	}
	return o.GlobalBgpRanges, true
}

// HasGlobalBgpRanges returns a boolean if a field has been set.
func (o *GlobalBgpRangeList) HasGlobalBgpRanges() bool {
	if o != nil && !IsNil(o.GlobalBgpRanges) {
		return true
	}

	return false
}

// SetGlobalBgpRanges gets a reference to the given []GlobalBgpRange and assigns it to the GlobalBgpRanges field.
func (o *GlobalBgpRangeList) SetGlobalBgpRanges(v []GlobalBgpRange) {
	o.GlobalBgpRanges = v
}

func (o GlobalBgpRangeList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalBgpRangeList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GlobalBgpRanges) {
		toSerialize["global_bgp_ranges"] = o.GlobalBgpRanges
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GlobalBgpRangeList) UnmarshalJSON(data []byte) (err error) {
	varGlobalBgpRangeList := _GlobalBgpRangeList{}

	err = json.Unmarshal(data, &varGlobalBgpRangeList)

	if err != nil {
		return err
	}

	*o = GlobalBgpRangeList(varGlobalBgpRangeList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "global_bgp_ranges")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGlobalBgpRangeList struct {
	value *GlobalBgpRangeList
	isSet bool
}

func (v NullableGlobalBgpRangeList) Get() *GlobalBgpRangeList {
	return v.value
}

func (v *NullableGlobalBgpRangeList) Set(val *GlobalBgpRangeList) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalBgpRangeList) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalBgpRangeList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalBgpRangeList(val *GlobalBgpRangeList) *NullableGlobalBgpRangeList {
	return &NullableGlobalBgpRangeList{value: val, isSet: true}
}

func (v NullableGlobalBgpRangeList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalBgpRangeList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
