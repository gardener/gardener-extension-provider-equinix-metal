/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the SupportRequestInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportRequestInput{}

// SupportRequestInput struct for SupportRequestInput
type SupportRequestInput struct {
	DeviceId             *string                      `json:"device_id,omitempty"`
	Message              string                       `json:"message"`
	Priority             *SupportRequestInputPriority `json:"priority,omitempty"`
	ProjectId            *string                      `json:"project_id,omitempty"`
	Subject              string                       `json:"subject"`
	AdditionalProperties map[string]interface{}
}

type _SupportRequestInput SupportRequestInput

// NewSupportRequestInput instantiates a new SupportRequestInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportRequestInput(message string, subject string) *SupportRequestInput {
	this := SupportRequestInput{}
	this.Message = message
	this.Subject = subject
	return &this
}

// NewSupportRequestInputWithDefaults instantiates a new SupportRequestInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportRequestInputWithDefaults() *SupportRequestInput {
	this := SupportRequestInput{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *SupportRequestInput) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportRequestInput) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *SupportRequestInput) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *SupportRequestInput) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetMessage returns the Message field value
func (o *SupportRequestInput) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SupportRequestInput) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SupportRequestInput) SetMessage(v string) {
	o.Message = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *SupportRequestInput) GetPriority() SupportRequestInputPriority {
	if o == nil || IsNil(o.Priority) {
		var ret SupportRequestInputPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportRequestInput) GetPriorityOk() (*SupportRequestInputPriority, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *SupportRequestInput) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given SupportRequestInputPriority and assigns it to the Priority field.
func (o *SupportRequestInput) SetPriority(v SupportRequestInputPriority) {
	o.Priority = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *SupportRequestInput) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportRequestInput) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *SupportRequestInput) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *SupportRequestInput) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetSubject returns the Subject field value
func (o *SupportRequestInput) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *SupportRequestInput) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *SupportRequestInput) SetSubject(v string) {
	o.Subject = v
}

func (o SupportRequestInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportRequestInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	toSerialize["message"] = o.Message
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	toSerialize["subject"] = o.Subject

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SupportRequestInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupportRequestInput := _SupportRequestInput{}

	err = json.Unmarshal(data, &varSupportRequestInput)

	if err != nil {
		return err
	}

	*o = SupportRequestInput(varSupportRequestInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_id")
		delete(additionalProperties, "message")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "subject")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSupportRequestInput struct {
	value *SupportRequestInput
	isSet bool
}

func (v NullableSupportRequestInput) Get() *SupportRequestInput {
	return v.value
}

func (v *NullableSupportRequestInput) Set(val *SupportRequestInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportRequestInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportRequestInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportRequestInput(val *SupportRequestInput) *NullableSupportRequestInput {
	return &NullableSupportRequestInput{value: val, isSet: true}
}

func (v NullableSupportRequestInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportRequestInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
