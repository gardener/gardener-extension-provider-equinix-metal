/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// PortNetworkType Composite network type of the bond
type PortNetworkType string

// List of Port_network_type
const (
	PORTNETWORKTYPE_LAYER2_BONDED     PortNetworkType = "layer2-bonded"
	PORTNETWORKTYPE_LAYER2_INDIVIDUAL PortNetworkType = "layer2-individual"
	PORTNETWORKTYPE_LAYER3            PortNetworkType = "layer3"
	PORTNETWORKTYPE_HYBRID            PortNetworkType = "hybrid"
	PORTNETWORKTYPE_HYBRID_BONDED     PortNetworkType = "hybrid-bonded"
)

// All allowed values of PortNetworkType enum
var AllowedPortNetworkTypeEnumValues = []PortNetworkType{
	"layer2-bonded",
	"layer2-individual",
	"layer3",
	"hybrid",
	"hybrid-bonded",
}

func (v *PortNetworkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortNetworkType(value)
	for _, existing := range AllowedPortNetworkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortNetworkType", value)
}

// NewPortNetworkTypeFromValue returns a pointer to a valid PortNetworkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortNetworkTypeFromValue(v string) (*PortNetworkType, error) {
	ev := PortNetworkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortNetworkType: valid values are %v", v, AllowedPortNetworkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortNetworkType) IsValid() bool {
	for _, existing := range AllowedPortNetworkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Port_network_type value
func (v PortNetworkType) Ptr() *PortNetworkType {
	return &v
}

type NullablePortNetworkType struct {
	value *PortNetworkType
	isSet bool
}

func (v NullablePortNetworkType) Get() *PortNetworkType {
	return v.value
}

func (v *NullablePortNetworkType) Set(val *PortNetworkType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortNetworkType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortNetworkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortNetworkType(val *PortNetworkType) *NullablePortNetworkType {
	return &NullablePortNetworkType{value: val, isSet: true}
}

func (v NullablePortNetworkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortNetworkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
