/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectCreateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCreateInput{}

// ProjectCreateInput struct for ProjectCreateInput
type ProjectCreateInput struct {
	Customdata map[string]interface{} `json:"customdata,omitempty"`
	// The name of the project. Cannot contain characters encoded in greater than 3 bytes such as emojis.
	Name                 string                          `json:"name"`
	PaymentMethodId      *string                         `json:"payment_method_id,omitempty"`
	Type                 *ProjectCreateFromRootInputType `json:"type,omitempty"`
	Tags                 []string                        `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProjectCreateInput ProjectCreateInput

// NewProjectCreateInput instantiates a new ProjectCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCreateInput(name string) *ProjectCreateInput {
	this := ProjectCreateInput{}
	this.Name = name
	return &this
}

// NewProjectCreateInputWithDefaults instantiates a new ProjectCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCreateInputWithDefaults() *ProjectCreateInput {
	this := ProjectCreateInput{}
	return &this
}

// GetCustomdata returns the Customdata field value if set, zero value otherwise.
func (o *ProjectCreateInput) GetCustomdata() map[string]interface{} {
	if o == nil || IsNil(o.Customdata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Customdata
}

// GetCustomdataOk returns a tuple with the Customdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreateInput) GetCustomdataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Customdata) {
		return map[string]interface{}{}, false
	}
	return o.Customdata, true
}

// HasCustomdata returns a boolean if a field has been set.
func (o *ProjectCreateInput) HasCustomdata() bool {
	if o != nil && !IsNil(o.Customdata) {
		return true
	}

	return false
}

// SetCustomdata gets a reference to the given map[string]interface{} and assigns it to the Customdata field.
func (o *ProjectCreateInput) SetCustomdata(v map[string]interface{}) {
	o.Customdata = v
}

// GetName returns the Name field value
func (o *ProjectCreateInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectCreateInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectCreateInput) SetName(v string) {
	o.Name = v
}

// GetPaymentMethodId returns the PaymentMethodId field value if set, zero value otherwise.
func (o *ProjectCreateInput) GetPaymentMethodId() string {
	if o == nil || IsNil(o.PaymentMethodId) {
		var ret string
		return ret
	}
	return *o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreateInput) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodId) {
		return nil, false
	}
	return o.PaymentMethodId, true
}

// HasPaymentMethodId returns a boolean if a field has been set.
func (o *ProjectCreateInput) HasPaymentMethodId() bool {
	if o != nil && !IsNil(o.PaymentMethodId) {
		return true
	}

	return false
}

// SetPaymentMethodId gets a reference to the given string and assigns it to the PaymentMethodId field.
func (o *ProjectCreateInput) SetPaymentMethodId(v string) {
	o.PaymentMethodId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProjectCreateInput) GetType() ProjectCreateFromRootInputType {
	if o == nil || IsNil(o.Type) {
		var ret ProjectCreateFromRootInputType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreateInput) GetTypeOk() (*ProjectCreateFromRootInputType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProjectCreateInput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProjectCreateFromRootInputType and assigns it to the Type field.
func (o *ProjectCreateInput) SetType(v ProjectCreateFromRootInputType) {
	o.Type = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProjectCreateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProjectCreateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ProjectCreateInput) SetTags(v []string) {
	o.Tags = v
}

func (o ProjectCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCreateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Customdata) {
		toSerialize["customdata"] = o.Customdata
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.PaymentMethodId) {
		toSerialize["payment_method_id"] = o.PaymentMethodId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectCreateInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectCreateInput := _ProjectCreateInput{}

	err = json.Unmarshal(data, &varProjectCreateInput)

	if err != nil {
		return err
	}

	*o = ProjectCreateInput(varProjectCreateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customdata")
		delete(additionalProperties, "name")
		delete(additionalProperties, "payment_method_id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectCreateInput struct {
	value *ProjectCreateInput
	isSet bool
}

func (v NullableProjectCreateInput) Get() *ProjectCreateInput {
	return v.value
}

func (v *NullableProjectCreateInput) Set(val *ProjectCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCreateInput(val *ProjectCreateInput) *NullableProjectCreateInput {
	return &NullableProjectCreateInput{value: val, isSet: true}
}

func (v NullableProjectCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
