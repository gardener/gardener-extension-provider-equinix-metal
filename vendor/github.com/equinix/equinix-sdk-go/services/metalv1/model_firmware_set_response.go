/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the FirmwareSetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirmwareSetResponse{}

// FirmwareSetResponse Represents single Firmware set response
type FirmwareSetResponse struct {
	Record               *FirmwareSet `json:"record,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirmwareSetResponse FirmwareSetResponse

// NewFirmwareSetResponse instantiates a new FirmwareSetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareSetResponse() *FirmwareSetResponse {
	this := FirmwareSetResponse{}
	return &this
}

// NewFirmwareSetResponseWithDefaults instantiates a new FirmwareSetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareSetResponseWithDefaults() *FirmwareSetResponse {
	this := FirmwareSetResponse{}
	return &this
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *FirmwareSetResponse) GetRecord() FirmwareSet {
	if o == nil || IsNil(o.Record) {
		var ret FirmwareSet
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareSetResponse) GetRecordOk() (*FirmwareSet, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *FirmwareSetResponse) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given FirmwareSet and assigns it to the Record field.
func (o *FirmwareSetResponse) SetRecord(v FirmwareSet) {
	o.Record = &v
}

func (o FirmwareSetResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirmwareSetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirmwareSetResponse) UnmarshalJSON(data []byte) (err error) {
	varFirmwareSetResponse := _FirmwareSetResponse{}

	err = json.Unmarshal(data, &varFirmwareSetResponse)

	if err != nil {
		return err
	}

	*o = FirmwareSetResponse(varFirmwareSetResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "record")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareSetResponse struct {
	value *FirmwareSetResponse
	isSet bool
}

func (v NullableFirmwareSetResponse) Get() *FirmwareSetResponse {
	return v.value
}

func (v *NullableFirmwareSetResponse) Set(val *FirmwareSetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareSetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareSetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareSetResponse(val *FirmwareSetResponse) *NullableFirmwareSetResponse {
	return &NullableFirmwareSetResponse{value: val, isSet: true}
}

func (v NullableFirmwareSetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareSetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
