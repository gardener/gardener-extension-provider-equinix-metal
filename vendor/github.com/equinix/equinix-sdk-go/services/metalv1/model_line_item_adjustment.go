/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the LineItemAdjustment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineItemAdjustment{}

// LineItemAdjustment struct for LineItemAdjustment
type LineItemAdjustment struct {
	Amount               *float32 `json:"amount,omitempty"`
	Description          *string  `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LineItemAdjustment LineItemAdjustment

// NewLineItemAdjustment instantiates a new LineItemAdjustment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineItemAdjustment() *LineItemAdjustment {
	this := LineItemAdjustment{}
	return &this
}

// NewLineItemAdjustmentWithDefaults instantiates a new LineItemAdjustment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineItemAdjustmentWithDefaults() *LineItemAdjustment {
	this := LineItemAdjustment{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *LineItemAdjustment) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemAdjustment) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *LineItemAdjustment) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *LineItemAdjustment) SetAmount(v float32) {
	o.Amount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LineItemAdjustment) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemAdjustment) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LineItemAdjustment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LineItemAdjustment) SetDescription(v string) {
	o.Description = &v
}

func (o LineItemAdjustment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineItemAdjustment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LineItemAdjustment) UnmarshalJSON(data []byte) (err error) {
	varLineItemAdjustment := _LineItemAdjustment{}

	err = json.Unmarshal(data, &varLineItemAdjustment)

	if err != nil {
		return err
	}

	*o = LineItemAdjustment(varLineItemAdjustment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLineItemAdjustment struct {
	value *LineItemAdjustment
	isSet bool
}

func (v NullableLineItemAdjustment) Get() *LineItemAdjustment {
	return v.value
}

func (v *NullableLineItemAdjustment) Set(val *LineItemAdjustment) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItemAdjustment) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItemAdjustment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItemAdjustment(val *LineItemAdjustment) *NullableLineItemAdjustment {
	return &NullableLineItemAdjustment{value: val, isSet: true}
}

func (v NullableLineItemAdjustment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItemAdjustment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
