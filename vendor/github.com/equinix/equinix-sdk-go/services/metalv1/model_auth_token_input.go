/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the AuthTokenInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthTokenInput{}

// AuthTokenInput struct for AuthTokenInput
type AuthTokenInput struct {
	Description          *string `json:"description,omitempty"`
	ReadOnly             *bool   `json:"read_only,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthTokenInput AuthTokenInput

// NewAuthTokenInput instantiates a new AuthTokenInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthTokenInput() *AuthTokenInput {
	this := AuthTokenInput{}
	return &this
}

// NewAuthTokenInputWithDefaults instantiates a new AuthTokenInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthTokenInputWithDefaults() *AuthTokenInput {
	this := AuthTokenInput{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuthTokenInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuthTokenInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuthTokenInput) SetDescription(v string) {
	o.Description = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *AuthTokenInput) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenInput) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *AuthTokenInput) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *AuthTokenInput) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o AuthTokenInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthTokenInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["read_only"] = o.ReadOnly
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthTokenInput) UnmarshalJSON(data []byte) (err error) {
	varAuthTokenInput := _AuthTokenInput{}

	err = json.Unmarshal(data, &varAuthTokenInput)

	if err != nil {
		return err
	}

	*o = AuthTokenInput(varAuthTokenInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "read_only")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthTokenInput struct {
	value *AuthTokenInput
	isSet bool
}

func (v NullableAuthTokenInput) Get() *AuthTokenInput {
	return v.value
}

func (v *NullableAuthTokenInput) Set(val *AuthTokenInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthTokenInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthTokenInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthTokenInput(val *AuthTokenInput) *NullableAuthTokenInput {
	return &NullableAuthTokenInput{value: val, isSet: true}
}

func (v NullableAuthTokenInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthTokenInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
