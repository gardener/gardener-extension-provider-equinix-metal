/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindOrganizationDevicesCategoriesParameterInner the model 'FindOrganizationDevicesCategoriesParameterInner'
type FindOrganizationDevicesCategoriesParameterInner string

// List of findOrganizationDevices_categories_parameter_inner
const (
	FINDORGANIZATIONDEVICESCATEGORIESPARAMETERINNER_COMPUTE     FindOrganizationDevicesCategoriesParameterInner = "compute"
	FINDORGANIZATIONDEVICESCATEGORIESPARAMETERINNER_STORAGE     FindOrganizationDevicesCategoriesParameterInner = "storage"
	FINDORGANIZATIONDEVICESCATEGORIESPARAMETERINNER_VMCE        FindOrganizationDevicesCategoriesParameterInner = "vmce"
	FINDORGANIZATIONDEVICESCATEGORIESPARAMETERINNER_LEGACY_GEN  FindOrganizationDevicesCategoriesParameterInner = "legacy_gen"
	FINDORGANIZATIONDEVICESCATEGORIESPARAMETERINNER_CURRENT_GEN FindOrganizationDevicesCategoriesParameterInner = "current_gen"
)

// All allowed values of FindOrganizationDevicesCategoriesParameterInner enum
var AllowedFindOrganizationDevicesCategoriesParameterInnerEnumValues = []FindOrganizationDevicesCategoriesParameterInner{
	"compute",
	"storage",
	"vmce",
	"legacy_gen",
	"current_gen",
}

func (v *FindOrganizationDevicesCategoriesParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindOrganizationDevicesCategoriesParameterInner(value)
	for _, existing := range AllowedFindOrganizationDevicesCategoriesParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindOrganizationDevicesCategoriesParameterInner", value)
}

// NewFindOrganizationDevicesCategoriesParameterInnerFromValue returns a pointer to a valid FindOrganizationDevicesCategoriesParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindOrganizationDevicesCategoriesParameterInnerFromValue(v string) (*FindOrganizationDevicesCategoriesParameterInner, error) {
	ev := FindOrganizationDevicesCategoriesParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindOrganizationDevicesCategoriesParameterInner: valid values are %v", v, AllowedFindOrganizationDevicesCategoriesParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindOrganizationDevicesCategoriesParameterInner) IsValid() bool {
	for _, existing := range AllowedFindOrganizationDevicesCategoriesParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findOrganizationDevices_categories_parameter_inner value
func (v FindOrganizationDevicesCategoriesParameterInner) Ptr() *FindOrganizationDevicesCategoriesParameterInner {
	return &v
}

type NullableFindOrganizationDevicesCategoriesParameterInner struct {
	value *FindOrganizationDevicesCategoriesParameterInner
	isSet bool
}

func (v NullableFindOrganizationDevicesCategoriesParameterInner) Get() *FindOrganizationDevicesCategoriesParameterInner {
	return v.value
}

func (v *NullableFindOrganizationDevicesCategoriesParameterInner) Set(val *FindOrganizationDevicesCategoriesParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFindOrganizationDevicesCategoriesParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFindOrganizationDevicesCategoriesParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindOrganizationDevicesCategoriesParameterInner(val *FindOrganizationDevicesCategoriesParameterInner) *NullableFindOrganizationDevicesCategoriesParameterInner {
	return &NullableFindOrganizationDevicesCategoriesParameterInner{value: val, isSet: true}
}

func (v NullableFindOrganizationDevicesCategoriesParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindOrganizationDevicesCategoriesParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
