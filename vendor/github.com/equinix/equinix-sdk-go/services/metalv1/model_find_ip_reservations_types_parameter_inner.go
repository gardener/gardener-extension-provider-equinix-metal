/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindIPReservationsTypesParameterInner the model 'FindIPReservationsTypesParameterInner'
type FindIPReservationsTypesParameterInner string

// List of findIPReservations_types_parameter_inner
const (
	FINDIPRESERVATIONSTYPESPARAMETERINNER_GLOBAL_IPV4  FindIPReservationsTypesParameterInner = "global_ipv4"
	FINDIPRESERVATIONSTYPESPARAMETERINNER_PRIVATE_IPV4 FindIPReservationsTypesParameterInner = "private_ipv4"
	FINDIPRESERVATIONSTYPESPARAMETERINNER_PUBLIC_IPV4  FindIPReservationsTypesParameterInner = "public_ipv4"
	FINDIPRESERVATIONSTYPESPARAMETERINNER_PUBLIC_IPV6  FindIPReservationsTypesParameterInner = "public_ipv6"
	FINDIPRESERVATIONSTYPESPARAMETERINNER_VRF          FindIPReservationsTypesParameterInner = "vrf"
)

// All allowed values of FindIPReservationsTypesParameterInner enum
var AllowedFindIPReservationsTypesParameterInnerEnumValues = []FindIPReservationsTypesParameterInner{
	"global_ipv4",
	"private_ipv4",
	"public_ipv4",
	"public_ipv6",
	"vrf",
}

func (v *FindIPReservationsTypesParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindIPReservationsTypesParameterInner(value)
	for _, existing := range AllowedFindIPReservationsTypesParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindIPReservationsTypesParameterInner", value)
}

// NewFindIPReservationsTypesParameterInnerFromValue returns a pointer to a valid FindIPReservationsTypesParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindIPReservationsTypesParameterInnerFromValue(v string) (*FindIPReservationsTypesParameterInner, error) {
	ev := FindIPReservationsTypesParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindIPReservationsTypesParameterInner: valid values are %v", v, AllowedFindIPReservationsTypesParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindIPReservationsTypesParameterInner) IsValid() bool {
	for _, existing := range AllowedFindIPReservationsTypesParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findIPReservations_types_parameter_inner value
func (v FindIPReservationsTypesParameterInner) Ptr() *FindIPReservationsTypesParameterInner {
	return &v
}

type NullableFindIPReservationsTypesParameterInner struct {
	value *FindIPReservationsTypesParameterInner
	isSet bool
}

func (v NullableFindIPReservationsTypesParameterInner) Get() *FindIPReservationsTypesParameterInner {
	return v.value
}

func (v *NullableFindIPReservationsTypesParameterInner) Set(val *FindIPReservationsTypesParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFindIPReservationsTypesParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFindIPReservationsTypesParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindIPReservationsTypesParameterInner(val *FindIPReservationsTypesParameterInner) *NullableFindIPReservationsTypesParameterInner {
	return &NullableFindIPReservationsTypesParameterInner{value: val, isSet: true}
}

func (v NullableFindIPReservationsTypesParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindIPReservationsTypesParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
