/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PortData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortData{}

// PortData struct for PortData
type PortData struct {
	// MAC address is set for NetworkPort ports
	Mac *string `json:"mac,omitempty"`
	// Bonded is true for NetworkPort ports in a bond and NetworkBondPort ports that are active
	Bonded               *bool `json:"bonded,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortData PortData

// NewPortData instantiates a new PortData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortData() *PortData {
	this := PortData{}
	return &this
}

// NewPortDataWithDefaults instantiates a new PortData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortDataWithDefaults() *PortData {
	this := PortData{}
	return &this
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *PortData) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortData) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *PortData) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *PortData) SetMac(v string) {
	o.Mac = &v
}

// GetBonded returns the Bonded field value if set, zero value otherwise.
func (o *PortData) GetBonded() bool {
	if o == nil || IsNil(o.Bonded) {
		var ret bool
		return ret
	}
	return *o.Bonded
}

// GetBondedOk returns a tuple with the Bonded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortData) GetBondedOk() (*bool, bool) {
	if o == nil || IsNil(o.Bonded) {
		return nil, false
	}
	return o.Bonded, true
}

// HasBonded returns a boolean if a field has been set.
func (o *PortData) HasBonded() bool {
	if o != nil && !IsNil(o.Bonded) {
		return true
	}

	return false
}

// SetBonded gets a reference to the given bool and assigns it to the Bonded field.
func (o *PortData) SetBonded(v bool) {
	o.Bonded = &v
}

func (o PortData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Bonded) {
		toSerialize["bonded"] = o.Bonded
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortData) UnmarshalJSON(data []byte) (err error) {
	varPortData := _PortData{}

	err = json.Unmarshal(data, &varPortData)

	if err != nil {
		return err
	}

	*o = PortData(varPortData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mac")
		delete(additionalProperties, "bonded")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortData struct {
	value *PortData
	isSet bool
}

func (v NullablePortData) Get() *PortData {
	return v.value
}

func (v *NullablePortData) Set(val *PortData) {
	v.value = val
	v.isSet = true
}

func (v NullablePortData) IsSet() bool {
	return v.isSet
}

func (v *NullablePortData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortData(val *PortData) *NullablePortData {
	return &NullablePortData{value: val, isSet: true}
}

func (v NullablePortData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
