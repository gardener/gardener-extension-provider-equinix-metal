/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the CapacityList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapacityList{}

// CapacityList struct for CapacityList
type CapacityList struct {
	Capacity             *map[string]map[string]CapacityLevelPerBaremetal `json:"capacity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapacityList CapacityList

// NewCapacityList instantiates a new CapacityList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapacityList() *CapacityList {
	this := CapacityList{}
	return &this
}

// NewCapacityListWithDefaults instantiates a new CapacityList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityListWithDefaults() *CapacityList {
	this := CapacityList{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *CapacityList) GetCapacity() map[string]map[string]CapacityLevelPerBaremetal {
	if o == nil || IsNil(o.Capacity) {
		var ret map[string]map[string]CapacityLevelPerBaremetal
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityList) GetCapacityOk() (*map[string]map[string]CapacityLevelPerBaremetal, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *CapacityList) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given map[string]map[string]CapacityLevelPerBaremetal and assigns it to the Capacity field.
func (o *CapacityList) SetCapacity(v map[string]map[string]CapacityLevelPerBaremetal) {
	o.Capacity = &v
}

func (o CapacityList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapacityList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CapacityList) UnmarshalJSON(data []byte) (err error) {
	varCapacityList := _CapacityList{}

	err = json.Unmarshal(data, &varCapacityList)

	if err != nil {
		return err
	}

	*o = CapacityList(varCapacityList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "capacity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapacityList struct {
	value *CapacityList
	isSet bool
}

func (v NullableCapacityList) Get() *CapacityList {
	return v.value
}

func (v *NullableCapacityList) Set(val *CapacityList) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacityList) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacityList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacityList(val *CapacityList) *NullableCapacityList {
	return &NullableCapacityList{value: val, isSet: true}
}

func (v NullableCapacityList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacityList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
