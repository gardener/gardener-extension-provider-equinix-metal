/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// VirtualCircuitCreateInput - struct for VirtualCircuitCreateInput
type VirtualCircuitCreateInput struct {
	VlanVirtualCircuitCreateInput *VlanVirtualCircuitCreateInput
	VrfVirtualCircuitCreateInput  *VrfVirtualCircuitCreateInput
}

// VlanVirtualCircuitCreateInputAsVirtualCircuitCreateInput is a convenience function that returns VlanVirtualCircuitCreateInput wrapped in VirtualCircuitCreateInput
func VlanVirtualCircuitCreateInputAsVirtualCircuitCreateInput(v *VlanVirtualCircuitCreateInput) VirtualCircuitCreateInput {
	return VirtualCircuitCreateInput{
		VlanVirtualCircuitCreateInput: v,
	}
}

// VrfVirtualCircuitCreateInputAsVirtualCircuitCreateInput is a convenience function that returns VrfVirtualCircuitCreateInput wrapped in VirtualCircuitCreateInput
func VrfVirtualCircuitCreateInputAsVirtualCircuitCreateInput(v *VrfVirtualCircuitCreateInput) VirtualCircuitCreateInput {
	return VirtualCircuitCreateInput{
		VrfVirtualCircuitCreateInput: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *VirtualCircuitCreateInput) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VlanVirtualCircuitCreateInput
	err = newStrictDecoder(data).Decode(&dst.VlanVirtualCircuitCreateInput)
	if err == nil {
		jsonVlanVirtualCircuitCreateInput, _ := json.Marshal(dst.VlanVirtualCircuitCreateInput)
		if string(jsonVlanVirtualCircuitCreateInput) == "{}" { // empty struct
			dst.VlanVirtualCircuitCreateInput = nil
		} else {
			match++
		}
	} else {
		dst.VlanVirtualCircuitCreateInput = nil
	}

	// try to unmarshal data into VrfVirtualCircuitCreateInput
	err = newStrictDecoder(data).Decode(&dst.VrfVirtualCircuitCreateInput)
	if err == nil {
		jsonVrfVirtualCircuitCreateInput, _ := json.Marshal(dst.VrfVirtualCircuitCreateInput)
		if string(jsonVrfVirtualCircuitCreateInput) == "{}" { // empty struct
			dst.VrfVirtualCircuitCreateInput = nil
		} else {
			match++
		}
	} else {
		dst.VrfVirtualCircuitCreateInput = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VlanVirtualCircuitCreateInput = nil
		dst.VrfVirtualCircuitCreateInput = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VirtualCircuitCreateInput)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VirtualCircuitCreateInput)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VirtualCircuitCreateInput) MarshalJSON() ([]byte, error) {
	if src.VlanVirtualCircuitCreateInput != nil {
		return json.Marshal(&src.VlanVirtualCircuitCreateInput)
	}

	if src.VrfVirtualCircuitCreateInput != nil {
		return json.Marshal(&src.VrfVirtualCircuitCreateInput)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VirtualCircuitCreateInput) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.VlanVirtualCircuitCreateInput != nil {
		return obj.VlanVirtualCircuitCreateInput
	}

	if obj.VrfVirtualCircuitCreateInput != nil {
		return obj.VrfVirtualCircuitCreateInput
	}

	// all schemas are nil
	return nil
}

type NullableVirtualCircuitCreateInput struct {
	value *VirtualCircuitCreateInput
	isSet bool
}

func (v NullableVirtualCircuitCreateInput) Get() *VirtualCircuitCreateInput {
	return v.value
}

func (v *NullableVirtualCircuitCreateInput) Set(val *VirtualCircuitCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCircuitCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCircuitCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCircuitCreateInput(val *VirtualCircuitCreateInput) *NullableVirtualCircuitCreateInput {
	return &NullableVirtualCircuitCreateInput{value: val, isSet: true}
}

func (v NullableVirtualCircuitCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCircuitCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
