/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the MetadataNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataNetwork{}

// MetadataNetwork struct for MetadataNetwork
type MetadataNetwork struct {
	Addresses            []string                 `json:"addresses,omitempty"`
	Interfaces           []map[string]interface{} `json:"interfaces,omitempty"`
	Network              *MetadataNetworkNetwork  `json:"network,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetadataNetwork MetadataNetwork

// NewMetadataNetwork instantiates a new MetadataNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataNetwork() *MetadataNetwork {
	this := MetadataNetwork{}
	return &this
}

// NewMetadataNetworkWithDefaults instantiates a new MetadataNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataNetworkWithDefaults() *MetadataNetwork {
	this := MetadataNetwork{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *MetadataNetwork) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataNetwork) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *MetadataNetwork) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *MetadataNetwork) SetAddresses(v []string) {
	o.Addresses = v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *MetadataNetwork) GetInterfaces() []map[string]interface{} {
	if o == nil || IsNil(o.Interfaces) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataNetwork) GetInterfacesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *MetadataNetwork) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []map[string]interface{} and assigns it to the Interfaces field.
func (o *MetadataNetwork) SetInterfaces(v []map[string]interface{}) {
	o.Interfaces = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *MetadataNetwork) GetNetwork() MetadataNetworkNetwork {
	if o == nil || IsNil(o.Network) {
		var ret MetadataNetworkNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataNetwork) GetNetworkOk() (*MetadataNetworkNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *MetadataNetwork) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given MetadataNetworkNetwork and assigns it to the Network field.
func (o *MetadataNetwork) SetNetwork(v MetadataNetworkNetwork) {
	o.Network = &v
}

func (o MetadataNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetadataNetwork) UnmarshalJSON(data []byte) (err error) {
	varMetadataNetwork := _MetadataNetwork{}

	err = json.Unmarshal(data, &varMetadataNetwork)

	if err != nil {
		return err
	}

	*o = MetadataNetwork(varMetadataNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "addresses")
		delete(additionalProperties, "interfaces")
		delete(additionalProperties, "network")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetadataNetwork struct {
	value *MetadataNetwork
	isSet bool
}

func (v NullableMetadataNetwork) Get() *MetadataNetwork {
	return v.value
}

func (v *NullableMetadataNetwork) Set(val *MetadataNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataNetwork(val *MetadataNetwork) *NullableMetadataNetwork {
	return &NullableMetadataNetwork{value: val, isSet: true}
}

func (v NullableMetadataNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
