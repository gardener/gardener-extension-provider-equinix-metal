/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// BgpConfigStatus Status of the BGP Config. Status \"requested\" is valid only with the \"global\" deployment_type.
type BgpConfigStatus string

// List of BgpConfig_status
const (
	BGPCONFIGSTATUS_REQUESTED BgpConfigStatus = "requested"
	BGPCONFIGSTATUS_ENABLED   BgpConfigStatus = "enabled"
	BGPCONFIGSTATUS_DISABLED  BgpConfigStatus = "disabled"
)

// All allowed values of BgpConfigStatus enum
var AllowedBgpConfigStatusEnumValues = []BgpConfigStatus{
	"requested",
	"enabled",
	"disabled",
}

func (v *BgpConfigStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BgpConfigStatus(value)
	for _, existing := range AllowedBgpConfigStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BgpConfigStatus", value)
}

// NewBgpConfigStatusFromValue returns a pointer to a valid BgpConfigStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBgpConfigStatusFromValue(v string) (*BgpConfigStatus, error) {
	ev := BgpConfigStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BgpConfigStatus: valid values are %v", v, AllowedBgpConfigStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BgpConfigStatus) IsValid() bool {
	for _, existing := range AllowedBgpConfigStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BgpConfig_status value
func (v BgpConfigStatus) Ptr() *BgpConfigStatus {
	return &v
}

type NullableBgpConfigStatus struct {
	value *BgpConfigStatus
	isSet bool
}

func (v NullableBgpConfigStatus) Get() *BgpConfigStatus {
	return v.value
}

func (v *NullableBgpConfigStatus) Set(val *BgpConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpConfigStatus(val *BgpConfigStatus) *NullableBgpConfigStatus {
	return &NullableBgpConfigStatus{value: val, isSet: true}
}

func (v NullableBgpConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
