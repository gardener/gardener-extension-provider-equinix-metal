/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// DeviceCreateInputBillingCycle The billing cycle of the device.
type DeviceCreateInputBillingCycle string

// List of DeviceCreateInput_billing_cycle
const (
	DEVICECREATEINPUTBILLINGCYCLE_HOURLY  DeviceCreateInputBillingCycle = "hourly"
	DEVICECREATEINPUTBILLINGCYCLE_DAILY   DeviceCreateInputBillingCycle = "daily"
	DEVICECREATEINPUTBILLINGCYCLE_MONTHLY DeviceCreateInputBillingCycle = "monthly"
	DEVICECREATEINPUTBILLINGCYCLE_YEARLY  DeviceCreateInputBillingCycle = "yearly"
)

// All allowed values of DeviceCreateInputBillingCycle enum
var AllowedDeviceCreateInputBillingCycleEnumValues = []DeviceCreateInputBillingCycle{
	"hourly",
	"daily",
	"monthly",
	"yearly",
}

func (v *DeviceCreateInputBillingCycle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceCreateInputBillingCycle(value)
	for _, existing := range AllowedDeviceCreateInputBillingCycleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceCreateInputBillingCycle", value)
}

// NewDeviceCreateInputBillingCycleFromValue returns a pointer to a valid DeviceCreateInputBillingCycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceCreateInputBillingCycleFromValue(v string) (*DeviceCreateInputBillingCycle, error) {
	ev := DeviceCreateInputBillingCycle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceCreateInputBillingCycle: valid values are %v", v, AllowedDeviceCreateInputBillingCycleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceCreateInputBillingCycle) IsValid() bool {
	for _, existing := range AllowedDeviceCreateInputBillingCycleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceCreateInput_billing_cycle value
func (v DeviceCreateInputBillingCycle) Ptr() *DeviceCreateInputBillingCycle {
	return &v
}

type NullableDeviceCreateInputBillingCycle struct {
	value *DeviceCreateInputBillingCycle
	isSet bool
}

func (v NullableDeviceCreateInputBillingCycle) Get() *DeviceCreateInputBillingCycle {
	return v.value
}

func (v *NullableDeviceCreateInputBillingCycle) Set(val *DeviceCreateInputBillingCycle) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCreateInputBillingCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCreateInputBillingCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCreateInputBillingCycle(val *DeviceCreateInputBillingCycle) *NullableDeviceCreateInputBillingCycle {
	return &NullableDeviceCreateInputBillingCycle{value: val, isSet: true}
}

func (v NullableDeviceCreateInputBillingCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCreateInputBillingCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
