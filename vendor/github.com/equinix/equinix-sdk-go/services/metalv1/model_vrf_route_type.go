/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// VrfRouteType VRF route type, like 'bgp', 'connected', and 'static'. Currently, only static routes are supported
type VrfRouteType string

// List of VrfRoute_type
const (
	VRFROUTETYPE_STATIC VrfRouteType = "static"
)

// All allowed values of VrfRouteType enum
var AllowedVrfRouteTypeEnumValues = []VrfRouteType{
	"static",
}

func (v *VrfRouteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VrfRouteType(value)
	for _, existing := range AllowedVrfRouteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VrfRouteType", value)
}

// NewVrfRouteTypeFromValue returns a pointer to a valid VrfRouteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVrfRouteTypeFromValue(v string) (*VrfRouteType, error) {
	ev := VrfRouteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VrfRouteType: valid values are %v", v, AllowedVrfRouteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VrfRouteType) IsValid() bool {
	for _, existing := range AllowedVrfRouteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VrfRoute_type value
func (v VrfRouteType) Ptr() *VrfRouteType {
	return &v
}

type NullableVrfRouteType struct {
	value *VrfRouteType
	isSet bool
}

func (v NullableVrfRouteType) Get() *VrfRouteType {
	return v.value
}

func (v *NullableVrfRouteType) Set(val *VrfRouteType) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfRouteType) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfRouteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfRouteType(val *VrfRouteType) *NullableVrfRouteType {
	return &NullableVrfRouteType{value: val, isSet: true}
}

func (v NullableVrfRouteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfRouteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
