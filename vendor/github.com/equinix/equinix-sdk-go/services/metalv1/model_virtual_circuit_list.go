/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VirtualCircuitList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualCircuitList{}

// VirtualCircuitList struct for VirtualCircuitList
type VirtualCircuitList struct {
	VirtualCircuits      []VirtualCircuit `json:"virtual_circuits,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualCircuitList VirtualCircuitList

// NewVirtualCircuitList instantiates a new VirtualCircuitList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualCircuitList() *VirtualCircuitList {
	this := VirtualCircuitList{}
	return &this
}

// NewVirtualCircuitListWithDefaults instantiates a new VirtualCircuitList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualCircuitListWithDefaults() *VirtualCircuitList {
	this := VirtualCircuitList{}
	return &this
}

// GetVirtualCircuits returns the VirtualCircuits field value if set, zero value otherwise.
func (o *VirtualCircuitList) GetVirtualCircuits() []VirtualCircuit {
	if o == nil || IsNil(o.VirtualCircuits) {
		var ret []VirtualCircuit
		return ret
	}
	return o.VirtualCircuits
}

// GetVirtualCircuitsOk returns a tuple with the VirtualCircuits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCircuitList) GetVirtualCircuitsOk() ([]VirtualCircuit, bool) {
	if o == nil || IsNil(o.VirtualCircuits) {
		return nil, false
	}
	return o.VirtualCircuits, true
}

// HasVirtualCircuits returns a boolean if a field has been set.
func (o *VirtualCircuitList) HasVirtualCircuits() bool {
	if o != nil && !IsNil(o.VirtualCircuits) {
		return true
	}

	return false
}

// SetVirtualCircuits gets a reference to the given []VirtualCircuit and assigns it to the VirtualCircuits field.
func (o *VirtualCircuitList) SetVirtualCircuits(v []VirtualCircuit) {
	o.VirtualCircuits = v
}

func (o VirtualCircuitList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualCircuitList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VirtualCircuits) {
		toSerialize["virtual_circuits"] = o.VirtualCircuits
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualCircuitList) UnmarshalJSON(data []byte) (err error) {
	varVirtualCircuitList := _VirtualCircuitList{}

	err = json.Unmarshal(data, &varVirtualCircuitList)

	if err != nil {
		return err
	}

	*o = VirtualCircuitList(varVirtualCircuitList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "virtual_circuits")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualCircuitList struct {
	value *VirtualCircuitList
	isSet bool
}

func (v NullableVirtualCircuitList) Get() *VirtualCircuitList {
	return v.value
}

func (v *NullableVirtualCircuitList) Set(val *VirtualCircuitList) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCircuitList) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCircuitList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCircuitList(val *VirtualCircuitList) *NullableVirtualCircuitList {
	return &NullableVirtualCircuitList{value: val, isSet: true}
}

func (v NullableVirtualCircuitList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCircuitList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
