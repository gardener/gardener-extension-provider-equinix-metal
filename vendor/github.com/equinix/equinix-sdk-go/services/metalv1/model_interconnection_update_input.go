/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the InterconnectionUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterconnectionUpdateInput{}

// InterconnectionUpdateInput struct for InterconnectionUpdateInput
type InterconnectionUpdateInput struct {
	ContactEmail         *string              `json:"contact_email,omitempty"`
	Description          *string              `json:"description,omitempty"`
	Mode                 *InterconnectionMode `json:"mode,omitempty"`
	Name                 *string              `json:"name,omitempty"`
	Tags                 []string             `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InterconnectionUpdateInput InterconnectionUpdateInput

// NewInterconnectionUpdateInput instantiates a new InterconnectionUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterconnectionUpdateInput() *InterconnectionUpdateInput {
	this := InterconnectionUpdateInput{}
	return &this
}

// NewInterconnectionUpdateInputWithDefaults instantiates a new InterconnectionUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterconnectionUpdateInputWithDefaults() *InterconnectionUpdateInput {
	this := InterconnectionUpdateInput{}
	return &this
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *InterconnectionUpdateInput) GetContactEmail() string {
	if o == nil || IsNil(o.ContactEmail) {
		var ret string
		return ret
	}
	return *o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionUpdateInput) GetContactEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmail) {
		return nil, false
	}
	return o.ContactEmail, true
}

// HasContactEmail returns a boolean if a field has been set.
func (o *InterconnectionUpdateInput) HasContactEmail() bool {
	if o != nil && !IsNil(o.ContactEmail) {
		return true
	}

	return false
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *InterconnectionUpdateInput) SetContactEmail(v string) {
	o.ContactEmail = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InterconnectionUpdateInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionUpdateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InterconnectionUpdateInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InterconnectionUpdateInput) SetDescription(v string) {
	o.Description = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *InterconnectionUpdateInput) GetMode() InterconnectionMode {
	if o == nil || IsNil(o.Mode) {
		var ret InterconnectionMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionUpdateInput) GetModeOk() (*InterconnectionMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *InterconnectionUpdateInput) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given InterconnectionMode and assigns it to the Mode field.
func (o *InterconnectionUpdateInput) SetMode(v InterconnectionMode) {
	o.Mode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InterconnectionUpdateInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionUpdateInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InterconnectionUpdateInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InterconnectionUpdateInput) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InterconnectionUpdateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionUpdateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InterconnectionUpdateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *InterconnectionUpdateInput) SetTags(v []string) {
	o.Tags = v
}

func (o InterconnectionUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterconnectionUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactEmail) {
		toSerialize["contact_email"] = o.ContactEmail
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InterconnectionUpdateInput) UnmarshalJSON(data []byte) (err error) {
	varInterconnectionUpdateInput := _InterconnectionUpdateInput{}

	err = json.Unmarshal(data, &varInterconnectionUpdateInput)

	if err != nil {
		return err
	}

	*o = InterconnectionUpdateInput(varInterconnectionUpdateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contact_email")
		delete(additionalProperties, "description")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "name")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInterconnectionUpdateInput struct {
	value *InterconnectionUpdateInput
	isSet bool
}

func (v NullableInterconnectionUpdateInput) Get() *InterconnectionUpdateInput {
	return v.value
}

func (v *NullableInterconnectionUpdateInput) Set(val *InterconnectionUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionUpdateInput(val *InterconnectionUpdateInput) *NullableInterconnectionUpdateInput {
	return &NullableInterconnectionUpdateInput{value: val, isSet: true}
}

func (v NullableInterconnectionUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
