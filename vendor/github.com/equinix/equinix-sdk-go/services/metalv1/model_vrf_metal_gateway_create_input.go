/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the VrfMetalGatewayCreateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfMetalGatewayCreateInput{}

// VrfMetalGatewayCreateInput struct for VrfMetalGatewayCreateInput
type VrfMetalGatewayCreateInput struct {
	// The UUID an a VRF IP Reservation that belongs to the same project as the one in which the Metal Gateway is to be created. Additionally, the VRF IP Reservation and the Virtual Network must reside in the same Metro.
	IpReservationId string `json:"ip_reservation_id"`
	// The UUID of a Metro Virtual Network that belongs to the same project as the one in which the Metal Gateway is to be created. Additionally, the Virtual Network and the VRF IP Reservation must reside in the same metro. In the case of the IP reservation being an IPv6 based VRF IP Reservation, the Virtual Network must not already have an associated IPv6 based VRF IP Reservation. There can be exactly one IPv6 based VRF IP Reservation associated to a Virtual Network.
	VirtualNetworkId     string `json:"virtual_network_id"`
	AdditionalProperties map[string]interface{}
}

type _VrfMetalGatewayCreateInput VrfMetalGatewayCreateInput

// NewVrfMetalGatewayCreateInput instantiates a new VrfMetalGatewayCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfMetalGatewayCreateInput(ipReservationId string, virtualNetworkId string) *VrfMetalGatewayCreateInput {
	this := VrfMetalGatewayCreateInput{}
	this.IpReservationId = ipReservationId
	this.VirtualNetworkId = virtualNetworkId
	return &this
}

// NewVrfMetalGatewayCreateInputWithDefaults instantiates a new VrfMetalGatewayCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfMetalGatewayCreateInputWithDefaults() *VrfMetalGatewayCreateInput {
	this := VrfMetalGatewayCreateInput{}
	return &this
}

// GetIpReservationId returns the IpReservationId field value
func (o *VrfMetalGatewayCreateInput) GetIpReservationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpReservationId
}

// GetIpReservationIdOk returns a tuple with the IpReservationId field value
// and a boolean to check if the value has been set.
func (o *VrfMetalGatewayCreateInput) GetIpReservationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpReservationId, true
}

// SetIpReservationId sets field value
func (o *VrfMetalGatewayCreateInput) SetIpReservationId(v string) {
	o.IpReservationId = v
}

// GetVirtualNetworkId returns the VirtualNetworkId field value
func (o *VrfMetalGatewayCreateInput) GetVirtualNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VirtualNetworkId
}

// GetVirtualNetworkIdOk returns a tuple with the VirtualNetworkId field value
// and a boolean to check if the value has been set.
func (o *VrfMetalGatewayCreateInput) GetVirtualNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualNetworkId, true
}

// SetVirtualNetworkId sets field value
func (o *VrfMetalGatewayCreateInput) SetVirtualNetworkId(v string) {
	o.VirtualNetworkId = v
}

func (o VrfMetalGatewayCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfMetalGatewayCreateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip_reservation_id"] = o.IpReservationId
	toSerialize["virtual_network_id"] = o.VirtualNetworkId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfMetalGatewayCreateInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip_reservation_id",
		"virtual_network_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVrfMetalGatewayCreateInput := _VrfMetalGatewayCreateInput{}

	err = json.Unmarshal(data, &varVrfMetalGatewayCreateInput)

	if err != nil {
		return err
	}

	*o = VrfMetalGatewayCreateInput(varVrfMetalGatewayCreateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip_reservation_id")
		delete(additionalProperties, "virtual_network_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfMetalGatewayCreateInput struct {
	value *VrfMetalGatewayCreateInput
	isSet bool
}

func (v NullableVrfMetalGatewayCreateInput) Get() *VrfMetalGatewayCreateInput {
	return v.value
}

func (v *NullableVrfMetalGatewayCreateInput) Set(val *VrfMetalGatewayCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfMetalGatewayCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfMetalGatewayCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfMetalGatewayCreateInput(val *VrfMetalGatewayCreateInput) *NullableVrfMetalGatewayCreateInput {
	return &NullableVrfMetalGatewayCreateInput{value: val, isSet: true}
}

func (v NullableVrfMetalGatewayCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfMetalGatewayCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
