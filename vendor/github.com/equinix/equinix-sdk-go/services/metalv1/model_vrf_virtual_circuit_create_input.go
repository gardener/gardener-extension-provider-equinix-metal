/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the VrfVirtualCircuitCreateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfVirtualCircuitCreateInput{}

// VrfVirtualCircuitCreateInput struct for VrfVirtualCircuitCreateInput
type VrfVirtualCircuitCreateInput struct {
	// An IPv4 address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.
	CustomerIp  *string `json:"customer_ip,omitempty"`
	Description *string `json:"description,omitempty"`
	// The plaintext BGP peering password shared by neighbors as an MD5 checksum: * must be 10-20 characters long * may not include punctuation * must be a combination of numbers and letters * must contain at least one lowercase, uppercase, and digit character
	Md5 NullableString `json:"md5,omitempty"`
	// An IPv4 address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.
	MetalIp *string `json:"metal_ip,omitempty"`
	Name    *string `json:"name,omitempty"`
	NniVlan int32   `json:"nni_vlan"`
	// The peer ASN that will be used with the VRF on the Virtual Circuit.
	PeerAsn   int64  `json:"peer_asn"`
	ProjectId string `json:"project_id"`
	// speed can be passed as integer number representing bps speed or string (e.g. '52m' or '100g' or '4 gbps')
	Speed *string `json:"speed,omitempty"`
	// The /30 or /31 IPv4 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP. The subnet specified must be contained within an already-defined IP Range for the VRF.
	Subnet string   `json:"subnet"`
	Tags   []string `json:"tags,omitempty"`
	// The UUID of the VRF that will be associated with the Virtual Circuit.
	Vrf string `json:"vrf"`
	// The /126 or /127 IPv6 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IPv6 and Customer IPv6 must be IPs from this subnet. For /126 subnets, the network and broadcast IPs cannot be used as the Metal IPv6 or Customer IPv6. The subnet specified must be contained within an already-defined IP Range for the VRF.
	SubnetIpv6 *string `json:"subnet_ipv6,omitempty"`
	// An IPv6 address from the subnet IPv6 that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet IPv6 as the Metal IPv6. By default, the last usable IP address in the subnet IPv6 will be used.
	CustomerIpv6 *string `json:"customer_ipv6,omitempty"`
	// An IPv6 address from the subnet IPv6 that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IPv6 address in the subnet IPv6 as the Customer IP. By default, the first usable IPv6 address in the subnet IPv6 will be used.
	MetalIpv6            *string `json:"metal_ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfVirtualCircuitCreateInput VrfVirtualCircuitCreateInput

// NewVrfVirtualCircuitCreateInput instantiates a new VrfVirtualCircuitCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfVirtualCircuitCreateInput(nniVlan int32, peerAsn int64, projectId string, subnet string, vrf string) *VrfVirtualCircuitCreateInput {
	this := VrfVirtualCircuitCreateInput{}
	this.NniVlan = nniVlan
	this.PeerAsn = peerAsn
	this.ProjectId = projectId
	this.Subnet = subnet
	this.Vrf = vrf
	return &this
}

// NewVrfVirtualCircuitCreateInputWithDefaults instantiates a new VrfVirtualCircuitCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfVirtualCircuitCreateInputWithDefaults() *VrfVirtualCircuitCreateInput {
	this := VrfVirtualCircuitCreateInput{}
	return &this
}

// GetCustomerIp returns the CustomerIp field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetCustomerIp() string {
	if o == nil || IsNil(o.CustomerIp) {
		var ret string
		return ret
	}
	return *o.CustomerIp
}

// GetCustomerIpOk returns a tuple with the CustomerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetCustomerIpOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerIp) {
		return nil, false
	}
	return o.CustomerIp, true
}

// HasCustomerIp returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasCustomerIp() bool {
	if o != nil && !IsNil(o.CustomerIp) {
		return true
	}

	return false
}

// SetCustomerIp gets a reference to the given string and assigns it to the CustomerIp field.
func (o *VrfVirtualCircuitCreateInput) SetCustomerIp(v string) {
	o.CustomerIp = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VrfVirtualCircuitCreateInput) SetDescription(v string) {
	o.Description = &v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VrfVirtualCircuitCreateInput) GetMd5() string {
	if o == nil || IsNil(o.Md5.Get()) {
		var ret string
		return ret
	}
	return *o.Md5.Get()
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VrfVirtualCircuitCreateInput) GetMd5Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Md5.Get(), o.Md5.IsSet()
}

// HasMd5 returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasMd5() bool {
	if o != nil && o.Md5.IsSet() {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given NullableString and assigns it to the Md5 field.
func (o *VrfVirtualCircuitCreateInput) SetMd5(v string) {
	o.Md5.Set(&v)
}

// SetMd5Nil sets the value for Md5 to be an explicit nil
func (o *VrfVirtualCircuitCreateInput) SetMd5Nil() {
	o.Md5.Set(nil)
}

// UnsetMd5 ensures that no value is present for Md5, not even an explicit nil
func (o *VrfVirtualCircuitCreateInput) UnsetMd5() {
	o.Md5.Unset()
}

// GetMetalIp returns the MetalIp field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetMetalIp() string {
	if o == nil || IsNil(o.MetalIp) {
		var ret string
		return ret
	}
	return *o.MetalIp
}

// GetMetalIpOk returns a tuple with the MetalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetMetalIpOk() (*string, bool) {
	if o == nil || IsNil(o.MetalIp) {
		return nil, false
	}
	return o.MetalIp, true
}

// HasMetalIp returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasMetalIp() bool {
	if o != nil && !IsNil(o.MetalIp) {
		return true
	}

	return false
}

// SetMetalIp gets a reference to the given string and assigns it to the MetalIp field.
func (o *VrfVirtualCircuitCreateInput) SetMetalIp(v string) {
	o.MetalIp = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VrfVirtualCircuitCreateInput) SetName(v string) {
	o.Name = &v
}

// GetNniVlan returns the NniVlan field value
func (o *VrfVirtualCircuitCreateInput) GetNniVlan() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NniVlan
}

// GetNniVlanOk returns a tuple with the NniVlan field value
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetNniVlanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NniVlan, true
}

// SetNniVlan sets field value
func (o *VrfVirtualCircuitCreateInput) SetNniVlan(v int32) {
	o.NniVlan = v
}

// GetPeerAsn returns the PeerAsn field value
func (o *VrfVirtualCircuitCreateInput) GetPeerAsn() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PeerAsn
}

// GetPeerAsnOk returns a tuple with the PeerAsn field value
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetPeerAsnOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerAsn, true
}

// SetPeerAsn sets field value
func (o *VrfVirtualCircuitCreateInput) SetPeerAsn(v int64) {
	o.PeerAsn = v
}

// GetProjectId returns the ProjectId field value
func (o *VrfVirtualCircuitCreateInput) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *VrfVirtualCircuitCreateInput) SetProjectId(v string) {
	o.ProjectId = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *VrfVirtualCircuitCreateInput) SetSpeed(v string) {
	o.Speed = &v
}

// GetSubnet returns the Subnet field value
func (o *VrfVirtualCircuitCreateInput) GetSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *VrfVirtualCircuitCreateInput) SetSubnet(v string) {
	o.Subnet = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VrfVirtualCircuitCreateInput) SetTags(v []string) {
	o.Tags = v
}

// GetVrf returns the Vrf field value
func (o *VrfVirtualCircuitCreateInput) GetVrf() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetVrfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vrf, true
}

// SetVrf sets field value
func (o *VrfVirtualCircuitCreateInput) SetVrf(v string) {
	o.Vrf = v
}

// GetSubnetIpv6 returns the SubnetIpv6 field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetSubnetIpv6() string {
	if o == nil || IsNil(o.SubnetIpv6) {
		var ret string
		return ret
	}
	return *o.SubnetIpv6
}

// GetSubnetIpv6Ok returns a tuple with the SubnetIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetSubnetIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.SubnetIpv6) {
		return nil, false
	}
	return o.SubnetIpv6, true
}

// HasSubnetIpv6 returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasSubnetIpv6() bool {
	if o != nil && !IsNil(o.SubnetIpv6) {
		return true
	}

	return false
}

// SetSubnetIpv6 gets a reference to the given string and assigns it to the SubnetIpv6 field.
func (o *VrfVirtualCircuitCreateInput) SetSubnetIpv6(v string) {
	o.SubnetIpv6 = &v
}

// GetCustomerIpv6 returns the CustomerIpv6 field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetCustomerIpv6() string {
	if o == nil || IsNil(o.CustomerIpv6) {
		var ret string
		return ret
	}
	return *o.CustomerIpv6
}

// GetCustomerIpv6Ok returns a tuple with the CustomerIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetCustomerIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.CustomerIpv6) {
		return nil, false
	}
	return o.CustomerIpv6, true
}

// HasCustomerIpv6 returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasCustomerIpv6() bool {
	if o != nil && !IsNil(o.CustomerIpv6) {
		return true
	}

	return false
}

// SetCustomerIpv6 gets a reference to the given string and assigns it to the CustomerIpv6 field.
func (o *VrfVirtualCircuitCreateInput) SetCustomerIpv6(v string) {
	o.CustomerIpv6 = &v
}

// GetMetalIpv6 returns the MetalIpv6 field value if set, zero value otherwise.
func (o *VrfVirtualCircuitCreateInput) GetMetalIpv6() string {
	if o == nil || IsNil(o.MetalIpv6) {
		var ret string
		return ret
	}
	return *o.MetalIpv6
}

// GetMetalIpv6Ok returns a tuple with the MetalIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitCreateInput) GetMetalIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.MetalIpv6) {
		return nil, false
	}
	return o.MetalIpv6, true
}

// HasMetalIpv6 returns a boolean if a field has been set.
func (o *VrfVirtualCircuitCreateInput) HasMetalIpv6() bool {
	if o != nil && !IsNil(o.MetalIpv6) {
		return true
	}

	return false
}

// SetMetalIpv6 gets a reference to the given string and assigns it to the MetalIpv6 field.
func (o *VrfVirtualCircuitCreateInput) SetMetalIpv6(v string) {
	o.MetalIpv6 = &v
}

func (o VrfVirtualCircuitCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfVirtualCircuitCreateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerIp) {
		toSerialize["customer_ip"] = o.CustomerIp
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Md5.IsSet() {
		toSerialize["md5"] = o.Md5.Get()
	}
	if !IsNil(o.MetalIp) {
		toSerialize["metal_ip"] = o.MetalIp
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["nni_vlan"] = o.NniVlan
	toSerialize["peer_asn"] = o.PeerAsn
	toSerialize["project_id"] = o.ProjectId
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	toSerialize["subnet"] = o.Subnet
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["vrf"] = o.Vrf
	if !IsNil(o.SubnetIpv6) {
		toSerialize["subnet_ipv6"] = o.SubnetIpv6
	}
	if !IsNil(o.CustomerIpv6) {
		toSerialize["customer_ipv6"] = o.CustomerIpv6
	}
	if !IsNil(o.MetalIpv6) {
		toSerialize["metal_ipv6"] = o.MetalIpv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfVirtualCircuitCreateInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nni_vlan",
		"peer_asn",
		"project_id",
		"subnet",
		"vrf",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVrfVirtualCircuitCreateInput := _VrfVirtualCircuitCreateInput{}

	err = json.Unmarshal(data, &varVrfVirtualCircuitCreateInput)

	if err != nil {
		return err
	}

	*o = VrfVirtualCircuitCreateInput(varVrfVirtualCircuitCreateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customer_ip")
		delete(additionalProperties, "description")
		delete(additionalProperties, "md5")
		delete(additionalProperties, "metal_ip")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nni_vlan")
		delete(additionalProperties, "peer_asn")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "vrf")
		delete(additionalProperties, "subnet_ipv6")
		delete(additionalProperties, "customer_ipv6")
		delete(additionalProperties, "metal_ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfVirtualCircuitCreateInput struct {
	value *VrfVirtualCircuitCreateInput
	isSet bool
}

func (v NullableVrfVirtualCircuitCreateInput) Get() *VrfVirtualCircuitCreateInput {
	return v.value
}

func (v *NullableVrfVirtualCircuitCreateInput) Set(val *VrfVirtualCircuitCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfVirtualCircuitCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfVirtualCircuitCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfVirtualCircuitCreateInput(val *VrfVirtualCircuitCreateInput) *NullableVrfVirtualCircuitCreateInput {
	return &NullableVrfVirtualCircuitCreateInput{value: val, isSet: true}
}

func (v NullableVrfVirtualCircuitCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfVirtualCircuitCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
