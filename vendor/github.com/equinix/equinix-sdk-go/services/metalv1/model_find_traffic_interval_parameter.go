/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindTrafficIntervalParameter the model 'FindTrafficIntervalParameter'
type FindTrafficIntervalParameter string

// List of findTraffic_interval_parameter
const (
	FINDTRAFFICINTERVALPARAMETER_MINUTE        FindTrafficIntervalParameter = "minute"
	FINDTRAFFICINTERVALPARAMETER_HOUR          FindTrafficIntervalParameter = "hour"
	FINDTRAFFICINTERVALPARAMETER_DAY           FindTrafficIntervalParameter = "day"
	FINDTRAFFICINTERVALPARAMETER_WEEK          FindTrafficIntervalParameter = "week"
	FINDTRAFFICINTERVALPARAMETER_MONTH         FindTrafficIntervalParameter = "month"
	FINDTRAFFICINTERVALPARAMETER_YEAR          FindTrafficIntervalParameter = "year"
	FINDTRAFFICINTERVALPARAMETER_HOUR_OF_DAY   FindTrafficIntervalParameter = "hour_of_day"
	FINDTRAFFICINTERVALPARAMETER_DAY_OF_WEEK   FindTrafficIntervalParameter = "day_of_week"
	FINDTRAFFICINTERVALPARAMETER_DAY_OF_MONTH  FindTrafficIntervalParameter = "day_of_month"
	FINDTRAFFICINTERVALPARAMETER_MONTH_OF_YEAR FindTrafficIntervalParameter = "month_of_year"
)

// All allowed values of FindTrafficIntervalParameter enum
var AllowedFindTrafficIntervalParameterEnumValues = []FindTrafficIntervalParameter{
	"minute",
	"hour",
	"day",
	"week",
	"month",
	"year",
	"hour_of_day",
	"day_of_week",
	"day_of_month",
	"month_of_year",
}

func (v *FindTrafficIntervalParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindTrafficIntervalParameter(value)
	for _, existing := range AllowedFindTrafficIntervalParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindTrafficIntervalParameter", value)
}

// NewFindTrafficIntervalParameterFromValue returns a pointer to a valid FindTrafficIntervalParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindTrafficIntervalParameterFromValue(v string) (*FindTrafficIntervalParameter, error) {
	ev := FindTrafficIntervalParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindTrafficIntervalParameter: valid values are %v", v, AllowedFindTrafficIntervalParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindTrafficIntervalParameter) IsValid() bool {
	for _, existing := range AllowedFindTrafficIntervalParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findTraffic_interval_parameter value
func (v FindTrafficIntervalParameter) Ptr() *FindTrafficIntervalParameter {
	return &v
}

type NullableFindTrafficIntervalParameter struct {
	value *FindTrafficIntervalParameter
	isSet bool
}

func (v NullableFindTrafficIntervalParameter) Get() *FindTrafficIntervalParameter {
	return v.value
}

func (v *NullableFindTrafficIntervalParameter) Set(val *FindTrafficIntervalParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableFindTrafficIntervalParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableFindTrafficIntervalParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindTrafficIntervalParameter(val *FindTrafficIntervalParameter) *NullableFindTrafficIntervalParameter {
	return &NullableFindTrafficIntervalParameter{value: val, isSet: true}
}

func (v NullableFindTrafficIntervalParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindTrafficIntervalParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
