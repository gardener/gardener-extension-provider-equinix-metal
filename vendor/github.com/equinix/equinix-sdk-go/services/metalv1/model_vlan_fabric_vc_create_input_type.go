/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// VlanFabricVcCreateInputType When requesting for a Fabric VC, the value of this field should be 'shared'.
type VlanFabricVcCreateInputType string

// List of VlanFabricVcCreateInput_type
const (
	VLANFABRICVCCREATEINPUTTYPE_SHARED VlanFabricVcCreateInputType = "shared"
)

// All allowed values of VlanFabricVcCreateInputType enum
var AllowedVlanFabricVcCreateInputTypeEnumValues = []VlanFabricVcCreateInputType{
	"shared",
}

func (v *VlanFabricVcCreateInputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VlanFabricVcCreateInputType(value)
	for _, existing := range AllowedVlanFabricVcCreateInputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VlanFabricVcCreateInputType", value)
}

// NewVlanFabricVcCreateInputTypeFromValue returns a pointer to a valid VlanFabricVcCreateInputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVlanFabricVcCreateInputTypeFromValue(v string) (*VlanFabricVcCreateInputType, error) {
	ev := VlanFabricVcCreateInputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VlanFabricVcCreateInputType: valid values are %v", v, AllowedVlanFabricVcCreateInputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VlanFabricVcCreateInputType) IsValid() bool {
	for _, existing := range AllowedVlanFabricVcCreateInputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VlanFabricVcCreateInput_type value
func (v VlanFabricVcCreateInputType) Ptr() *VlanFabricVcCreateInputType {
	return &v
}

type NullableVlanFabricVcCreateInputType struct {
	value *VlanFabricVcCreateInputType
	isSet bool
}

func (v NullableVlanFabricVcCreateInputType) Get() *VlanFabricVcCreateInputType {
	return v.value
}

func (v *NullableVlanFabricVcCreateInputType) Set(val *VlanFabricVcCreateInputType) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanFabricVcCreateInputType) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanFabricVcCreateInputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanFabricVcCreateInputType(val *VlanFabricVcCreateInputType) *NullableVlanFabricVcCreateInputType {
	return &NullableVlanFabricVcCreateInputType{value: val, isSet: true}
}

func (v NullableVlanFabricVcCreateInputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanFabricVcCreateInputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
