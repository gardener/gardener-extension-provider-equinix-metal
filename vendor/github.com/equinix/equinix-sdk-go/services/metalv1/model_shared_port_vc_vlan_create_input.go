/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the SharedPortVCVlanCreateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedPortVCVlanCreateInput{}

// SharedPortVCVlanCreateInput struct for SharedPortVCVlanCreateInput
type SharedPortVCVlanCreateInput struct {
	// The preferred email used for communication and notifications about the Equinix Fabric interconnection. Optional and defaults to the primary user email address when using a User API key or the organization owner email address when using a Project API key.
	ContactEmail *string `json:"contact_email,omitempty"`
	Description  *string `json:"description,omitempty"`
	Name         string  `json:"name"`
	Project      string  `json:"project"`
	// A Metro ID or code. When creating Fabric VCs (Metal Billed), this is where interconnection will be originating from, as we pre-authorize the use of one of our shared ports as the origin of the interconnection using A-Side service tokens. We only allow local connections for Fabric VCs (Metal Billed), so the destination location must be the same as the origin. For Fabric VCs (Fabric Billed), or shared connections, this will be the destination of the interconnection. We allow remote connections for Fabric VCs (Fabric Billed), so the origin of the interconnection can be a different metro set here.
	Metro string `json:"metro"`
	// A interconnection speed, in bps, mbps, or gbps. For Fabric VCs, this represents the maximum speed of the interconnection. For Fabric VCs (Metal Billed), this can only be one of the following: ''50mbps'', ''200mbps'', ''500mbps'', ''1gbps'', ''2gbps'', ''5gbps'' or ''10gbps'', and is required for creation. For Fabric VCs (Fabric Billed), this field will always default to ''10gbps'' even if it is not provided. For example, ''500000000'', ''50m'', or' ''500mbps'' will all work as valid inputs.
	Speed *string                         `json:"speed,omitempty"`
	Tags  []string                        `json:"tags,omitempty"`
	Type  SharedPortVCVlanCreateInputType `json:"type"`
	// A list of one or two metro-based VLANs that will be set on the virtual circuits of primary and/or secondary interconnections respectively when creating Fabric VCs. VLANs can also be set after the interconnection is created, but are required to fully activate the virtual circuits.
	Vlans                []int32 `json:"vlans"`
	AdditionalProperties map[string]interface{}
}

type _SharedPortVCVlanCreateInput SharedPortVCVlanCreateInput

// NewSharedPortVCVlanCreateInput instantiates a new SharedPortVCVlanCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedPortVCVlanCreateInput(name string, project string, metro string, type_ SharedPortVCVlanCreateInputType, vlans []int32) *SharedPortVCVlanCreateInput {
	this := SharedPortVCVlanCreateInput{}
	this.Name = name
	this.Project = project
	this.Metro = metro
	this.Type = type_
	this.Vlans = vlans
	return &this
}

// NewSharedPortVCVlanCreateInputWithDefaults instantiates a new SharedPortVCVlanCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedPortVCVlanCreateInputWithDefaults() *SharedPortVCVlanCreateInput {
	this := SharedPortVCVlanCreateInput{}
	return &this
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *SharedPortVCVlanCreateInput) GetContactEmail() string {
	if o == nil || IsNil(o.ContactEmail) {
		var ret string
		return ret
	}
	return *o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetContactEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmail) {
		return nil, false
	}
	return o.ContactEmail, true
}

// HasContactEmail returns a boolean if a field has been set.
func (o *SharedPortVCVlanCreateInput) HasContactEmail() bool {
	if o != nil && !IsNil(o.ContactEmail) {
		return true
	}

	return false
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *SharedPortVCVlanCreateInput) SetContactEmail(v string) {
	o.ContactEmail = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SharedPortVCVlanCreateInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SharedPortVCVlanCreateInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SharedPortVCVlanCreateInput) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *SharedPortVCVlanCreateInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SharedPortVCVlanCreateInput) SetName(v string) {
	o.Name = v
}

// GetProject returns the Project field value
func (o *SharedPortVCVlanCreateInput) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *SharedPortVCVlanCreateInput) SetProject(v string) {
	o.Project = v
}

// GetMetro returns the Metro field value
func (o *SharedPortVCVlanCreateInput) GetMetro() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metro
}

// GetMetroOk returns a tuple with the Metro field value
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetMetroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metro, true
}

// SetMetro sets field value
func (o *SharedPortVCVlanCreateInput) SetMetro(v string) {
	o.Metro = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *SharedPortVCVlanCreateInput) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *SharedPortVCVlanCreateInput) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *SharedPortVCVlanCreateInput) SetSpeed(v string) {
	o.Speed = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SharedPortVCVlanCreateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SharedPortVCVlanCreateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SharedPortVCVlanCreateInput) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *SharedPortVCVlanCreateInput) GetType() SharedPortVCVlanCreateInputType {
	if o == nil {
		var ret SharedPortVCVlanCreateInputType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetTypeOk() (*SharedPortVCVlanCreateInputType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SharedPortVCVlanCreateInput) SetType(v SharedPortVCVlanCreateInputType) {
	o.Type = v
}

// GetVlans returns the Vlans field value
func (o *SharedPortVCVlanCreateInput) GetVlans() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value
// and a boolean to check if the value has been set.
func (o *SharedPortVCVlanCreateInput) GetVlansOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vlans, true
}

// SetVlans sets field value
func (o *SharedPortVCVlanCreateInput) SetVlans(v []int32) {
	o.Vlans = v
}

func (o SharedPortVCVlanCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedPortVCVlanCreateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactEmail) {
		toSerialize["contact_email"] = o.ContactEmail
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["project"] = o.Project
	toSerialize["metro"] = o.Metro
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	toSerialize["vlans"] = o.Vlans

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SharedPortVCVlanCreateInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"project",
		"metro",
		"type",
		"vlans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedPortVCVlanCreateInput := _SharedPortVCVlanCreateInput{}

	err = json.Unmarshal(data, &varSharedPortVCVlanCreateInput)

	if err != nil {
		return err
	}

	*o = SharedPortVCVlanCreateInput(varSharedPortVCVlanCreateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contact_email")
		delete(additionalProperties, "description")
		delete(additionalProperties, "name")
		delete(additionalProperties, "project")
		delete(additionalProperties, "metro")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vlans")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSharedPortVCVlanCreateInput struct {
	value *SharedPortVCVlanCreateInput
	isSet bool
}

func (v NullableSharedPortVCVlanCreateInput) Get() *SharedPortVCVlanCreateInput {
	return v.value
}

func (v *NullableSharedPortVCVlanCreateInput) Set(val *SharedPortVCVlanCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedPortVCVlanCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedPortVCVlanCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedPortVCVlanCreateInput(val *SharedPortVCVlanCreateInput) *NullableSharedPortVCVlanCreateInput {
	return &NullableSharedPortVCVlanCreateInput{value: val, isSet: true}
}

func (v NullableSharedPortVCVlanCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedPortVCVlanCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
