/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the HardwareReservationList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HardwareReservationList{}

// HardwareReservationList struct for HardwareReservationList
type HardwareReservationList struct {
	HardwareReservations []HardwareReservation `json:"hardware_reservations,omitempty"`
	Meta                 *Meta                 `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HardwareReservationList HardwareReservationList

// NewHardwareReservationList instantiates a new HardwareReservationList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHardwareReservationList() *HardwareReservationList {
	this := HardwareReservationList{}
	return &this
}

// NewHardwareReservationListWithDefaults instantiates a new HardwareReservationList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHardwareReservationListWithDefaults() *HardwareReservationList {
	this := HardwareReservationList{}
	return &this
}

// GetHardwareReservations returns the HardwareReservations field value if set, zero value otherwise.
func (o *HardwareReservationList) GetHardwareReservations() []HardwareReservation {
	if o == nil || IsNil(o.HardwareReservations) {
		var ret []HardwareReservation
		return ret
	}
	return o.HardwareReservations
}

// GetHardwareReservationsOk returns a tuple with the HardwareReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareReservationList) GetHardwareReservationsOk() ([]HardwareReservation, bool) {
	if o == nil || IsNil(o.HardwareReservations) {
		return nil, false
	}
	return o.HardwareReservations, true
}

// HasHardwareReservations returns a boolean if a field has been set.
func (o *HardwareReservationList) HasHardwareReservations() bool {
	if o != nil && !IsNil(o.HardwareReservations) {
		return true
	}

	return false
}

// SetHardwareReservations gets a reference to the given []HardwareReservation and assigns it to the HardwareReservations field.
func (o *HardwareReservationList) SetHardwareReservations(v []HardwareReservation) {
	o.HardwareReservations = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *HardwareReservationList) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareReservationList) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *HardwareReservationList) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *HardwareReservationList) SetMeta(v Meta) {
	o.Meta = &v
}

func (o HardwareReservationList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HardwareReservationList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HardwareReservations) {
		toSerialize["hardware_reservations"] = o.HardwareReservations
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HardwareReservationList) UnmarshalJSON(data []byte) (err error) {
	varHardwareReservationList := _HardwareReservationList{}

	err = json.Unmarshal(data, &varHardwareReservationList)

	if err != nil {
		return err
	}

	*o = HardwareReservationList(varHardwareReservationList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hardware_reservations")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHardwareReservationList struct {
	value *HardwareReservationList
	isSet bool
}

func (v NullableHardwareReservationList) Get() *HardwareReservationList {
	return v.value
}

func (v *NullableHardwareReservationList) Set(val *HardwareReservationList) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareReservationList) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareReservationList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareReservationList(val *HardwareReservationList) *NullableHardwareReservationList {
	return &NullableHardwareReservationList{value: val, isSet: true}
}

func (v NullableHardwareReservationList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareReservationList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
