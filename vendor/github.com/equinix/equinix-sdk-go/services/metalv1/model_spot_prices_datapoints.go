/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the SpotPricesDatapoints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpotPricesDatapoints{}

// SpotPricesDatapoints struct for SpotPricesDatapoints
type SpotPricesDatapoints struct {
	Datapoints           [][]float32 `json:"datapoints,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpotPricesDatapoints SpotPricesDatapoints

// NewSpotPricesDatapoints instantiates a new SpotPricesDatapoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpotPricesDatapoints() *SpotPricesDatapoints {
	this := SpotPricesDatapoints{}
	return &this
}

// NewSpotPricesDatapointsWithDefaults instantiates a new SpotPricesDatapoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotPricesDatapointsWithDefaults() *SpotPricesDatapoints {
	this := SpotPricesDatapoints{}
	return &this
}

// GetDatapoints returns the Datapoints field value if set, zero value otherwise.
func (o *SpotPricesDatapoints) GetDatapoints() [][]float32 {
	if o == nil || IsNil(o.Datapoints) {
		var ret [][]float32
		return ret
	}
	return o.Datapoints
}

// GetDatapointsOk returns a tuple with the Datapoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotPricesDatapoints) GetDatapointsOk() ([][]float32, bool) {
	if o == nil || IsNil(o.Datapoints) {
		return nil, false
	}
	return o.Datapoints, true
}

// HasDatapoints returns a boolean if a field has been set.
func (o *SpotPricesDatapoints) HasDatapoints() bool {
	if o != nil && !IsNil(o.Datapoints) {
		return true
	}

	return false
}

// SetDatapoints gets a reference to the given [][]float32 and assigns it to the Datapoints field.
func (o *SpotPricesDatapoints) SetDatapoints(v [][]float32) {
	o.Datapoints = v
}

func (o SpotPricesDatapoints) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpotPricesDatapoints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datapoints) {
		toSerialize["datapoints"] = o.Datapoints
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpotPricesDatapoints) UnmarshalJSON(data []byte) (err error) {
	varSpotPricesDatapoints := _SpotPricesDatapoints{}

	err = json.Unmarshal(data, &varSpotPricesDatapoints)

	if err != nil {
		return err
	}

	*o = SpotPricesDatapoints(varSpotPricesDatapoints)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datapoints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpotPricesDatapoints struct {
	value *SpotPricesDatapoints
	isSet bool
}

func (v NullableSpotPricesDatapoints) Get() *SpotPricesDatapoints {
	return v.value
}

func (v *NullableSpotPricesDatapoints) Set(val *SpotPricesDatapoints) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotPricesDatapoints) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotPricesDatapoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotPricesDatapoints(val *SpotPricesDatapoints) *NullableSpotPricesDatapoints {
	return &NullableSpotPricesDatapoints{value: val, isSet: true}
}

func (v NullableSpotPricesDatapoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotPricesDatapoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
