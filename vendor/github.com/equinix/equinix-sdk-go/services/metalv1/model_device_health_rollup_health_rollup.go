/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// DeviceHealthRollupHealthRollup Health Status
type DeviceHealthRollupHealthRollup string

// List of DeviceHealthRollup_health_rollup
const (
	DEVICEHEALTHROLLUPHEALTHROLLUP_OK       DeviceHealthRollupHealthRollup = "ok"
	DEVICEHEALTHROLLUPHEALTHROLLUP_WARNING  DeviceHealthRollupHealthRollup = "warning"
	DEVICEHEALTHROLLUPHEALTHROLLUP_CRITICAL DeviceHealthRollupHealthRollup = "critical"
)

// All allowed values of DeviceHealthRollupHealthRollup enum
var AllowedDeviceHealthRollupHealthRollupEnumValues = []DeviceHealthRollupHealthRollup{
	"ok",
	"warning",
	"critical",
}

func (v *DeviceHealthRollupHealthRollup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceHealthRollupHealthRollup(value)
	for _, existing := range AllowedDeviceHealthRollupHealthRollupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceHealthRollupHealthRollup", value)
}

// NewDeviceHealthRollupHealthRollupFromValue returns a pointer to a valid DeviceHealthRollupHealthRollup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceHealthRollupHealthRollupFromValue(v string) (*DeviceHealthRollupHealthRollup, error) {
	ev := DeviceHealthRollupHealthRollup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceHealthRollupHealthRollup: valid values are %v", v, AllowedDeviceHealthRollupHealthRollupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceHealthRollupHealthRollup) IsValid() bool {
	for _, existing := range AllowedDeviceHealthRollupHealthRollupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceHealthRollup_health_rollup value
func (v DeviceHealthRollupHealthRollup) Ptr() *DeviceHealthRollupHealthRollup {
	return &v
}

type NullableDeviceHealthRollupHealthRollup struct {
	value *DeviceHealthRollupHealthRollup
	isSet bool
}

func (v NullableDeviceHealthRollupHealthRollup) Get() *DeviceHealthRollupHealthRollup {
	return v.value
}

func (v *NullableDeviceHealthRollupHealthRollup) Set(val *DeviceHealthRollupHealthRollup) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceHealthRollupHealthRollup) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceHealthRollupHealthRollup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceHealthRollupHealthRollup(val *DeviceHealthRollupHealthRollup) *NullableDeviceHealthRollupHealthRollup {
	return &NullableDeviceHealthRollupHealthRollup{value: val, isSet: true}
}

func (v NullableDeviceHealthRollupHealthRollup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceHealthRollupHealthRollup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
