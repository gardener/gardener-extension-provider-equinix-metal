/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PaymentMethodUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMethodUpdateInput{}

// PaymentMethodUpdateInput struct for PaymentMethodUpdateInput
type PaymentMethodUpdateInput struct {
	BillingAddress       map[string]interface{} `json:"billing_address,omitempty"`
	CardholderName       *string                `json:"cardholder_name,omitempty"`
	Default              *bool                  `json:"default,omitempty"`
	ExpirationMonth      *string                `json:"expiration_month,omitempty"`
	ExpirationYear       *int32                 `json:"expiration_year,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaymentMethodUpdateInput PaymentMethodUpdateInput

// NewPaymentMethodUpdateInput instantiates a new PaymentMethodUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodUpdateInput() *PaymentMethodUpdateInput {
	this := PaymentMethodUpdateInput{}
	return &this
}

// NewPaymentMethodUpdateInputWithDefaults instantiates a new PaymentMethodUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodUpdateInputWithDefaults() *PaymentMethodUpdateInput {
	this := PaymentMethodUpdateInput{}
	return &this
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *PaymentMethodUpdateInput) GetBillingAddress() map[string]interface{} {
	if o == nil || IsNil(o.BillingAddress) {
		var ret map[string]interface{}
		return ret
	}
	return o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUpdateInput) GetBillingAddressOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return map[string]interface{}{}, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *PaymentMethodUpdateInput) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given map[string]interface{} and assigns it to the BillingAddress field.
func (o *PaymentMethodUpdateInput) SetBillingAddress(v map[string]interface{}) {
	o.BillingAddress = v
}

// GetCardholderName returns the CardholderName field value if set, zero value otherwise.
func (o *PaymentMethodUpdateInput) GetCardholderName() string {
	if o == nil || IsNil(o.CardholderName) {
		var ret string
		return ret
	}
	return *o.CardholderName
}

// GetCardholderNameOk returns a tuple with the CardholderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUpdateInput) GetCardholderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CardholderName) {
		return nil, false
	}
	return o.CardholderName, true
}

// HasCardholderName returns a boolean if a field has been set.
func (o *PaymentMethodUpdateInput) HasCardholderName() bool {
	if o != nil && !IsNil(o.CardholderName) {
		return true
	}

	return false
}

// SetCardholderName gets a reference to the given string and assigns it to the CardholderName field.
func (o *PaymentMethodUpdateInput) SetCardholderName(v string) {
	o.CardholderName = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *PaymentMethodUpdateInput) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUpdateInput) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *PaymentMethodUpdateInput) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *PaymentMethodUpdateInput) SetDefault(v bool) {
	o.Default = &v
}

// GetExpirationMonth returns the ExpirationMonth field value if set, zero value otherwise.
func (o *PaymentMethodUpdateInput) GetExpirationMonth() string {
	if o == nil || IsNil(o.ExpirationMonth) {
		var ret string
		return ret
	}
	return *o.ExpirationMonth
}

// GetExpirationMonthOk returns a tuple with the ExpirationMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUpdateInput) GetExpirationMonthOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationMonth) {
		return nil, false
	}
	return o.ExpirationMonth, true
}

// HasExpirationMonth returns a boolean if a field has been set.
func (o *PaymentMethodUpdateInput) HasExpirationMonth() bool {
	if o != nil && !IsNil(o.ExpirationMonth) {
		return true
	}

	return false
}

// SetExpirationMonth gets a reference to the given string and assigns it to the ExpirationMonth field.
func (o *PaymentMethodUpdateInput) SetExpirationMonth(v string) {
	o.ExpirationMonth = &v
}

// GetExpirationYear returns the ExpirationYear field value if set, zero value otherwise.
func (o *PaymentMethodUpdateInput) GetExpirationYear() int32 {
	if o == nil || IsNil(o.ExpirationYear) {
		var ret int32
		return ret
	}
	return *o.ExpirationYear
}

// GetExpirationYearOk returns a tuple with the ExpirationYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUpdateInput) GetExpirationYearOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpirationYear) {
		return nil, false
	}
	return o.ExpirationYear, true
}

// HasExpirationYear returns a boolean if a field has been set.
func (o *PaymentMethodUpdateInput) HasExpirationYear() bool {
	if o != nil && !IsNil(o.ExpirationYear) {
		return true
	}

	return false
}

// SetExpirationYear gets a reference to the given int32 and assigns it to the ExpirationYear field.
func (o *PaymentMethodUpdateInput) SetExpirationYear(v int32) {
	o.ExpirationYear = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PaymentMethodUpdateInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUpdateInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PaymentMethodUpdateInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PaymentMethodUpdateInput) SetName(v string) {
	o.Name = &v
}

func (o PaymentMethodUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethodUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingAddress) {
		toSerialize["billing_address"] = o.BillingAddress
	}
	if !IsNil(o.CardholderName) {
		toSerialize["cardholder_name"] = o.CardholderName
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.ExpirationMonth) {
		toSerialize["expiration_month"] = o.ExpirationMonth
	}
	if !IsNil(o.ExpirationYear) {
		toSerialize["expiration_year"] = o.ExpirationYear
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentMethodUpdateInput) UnmarshalJSON(data []byte) (err error) {
	varPaymentMethodUpdateInput := _PaymentMethodUpdateInput{}

	err = json.Unmarshal(data, &varPaymentMethodUpdateInput)

	if err != nil {
		return err
	}

	*o = PaymentMethodUpdateInput(varPaymentMethodUpdateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "billing_address")
		delete(additionalProperties, "cardholder_name")
		delete(additionalProperties, "default")
		delete(additionalProperties, "expiration_month")
		delete(additionalProperties, "expiration_year")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaymentMethodUpdateInput struct {
	value *PaymentMethodUpdateInput
	isSet bool
}

func (v NullablePaymentMethodUpdateInput) Get() *PaymentMethodUpdateInput {
	return v.value
}

func (v *NullablePaymentMethodUpdateInput) Set(val *PaymentMethodUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodUpdateInput(val *PaymentMethodUpdateInput) *NullablePaymentMethodUpdateInput {
	return &NullablePaymentMethodUpdateInput{value: val, isSet: true}
}

func (v NullablePaymentMethodUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
