/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PortVlanAssignmentBatchVlanAssignmentsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortVlanAssignmentBatchVlanAssignmentsInner{}

// PortVlanAssignmentBatchVlanAssignmentsInner struct for PortVlanAssignmentBatchVlanAssignmentsInner
type PortVlanAssignmentBatchVlanAssignmentsInner struct {
	Id                   *string                                           `json:"id,omitempty"`
	Native               *bool                                             `json:"native,omitempty"`
	State                *PortVlanAssignmentBatchVlanAssignmentsInnerState `json:"state,omitempty"`
	Vlan                 *int32                                            `json:"vlan,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortVlanAssignmentBatchVlanAssignmentsInner PortVlanAssignmentBatchVlanAssignmentsInner

// NewPortVlanAssignmentBatchVlanAssignmentsInner instantiates a new PortVlanAssignmentBatchVlanAssignmentsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortVlanAssignmentBatchVlanAssignmentsInner() *PortVlanAssignmentBatchVlanAssignmentsInner {
	this := PortVlanAssignmentBatchVlanAssignmentsInner{}
	return &this
}

// NewPortVlanAssignmentBatchVlanAssignmentsInnerWithDefaults instantiates a new PortVlanAssignmentBatchVlanAssignmentsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortVlanAssignmentBatchVlanAssignmentsInnerWithDefaults() *PortVlanAssignmentBatchVlanAssignmentsInner {
	this := PortVlanAssignmentBatchVlanAssignmentsInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) SetId(v string) {
	o.Id = &v
}

// GetNative returns the Native field value if set, zero value otherwise.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetNative() bool {
	if o == nil || IsNil(o.Native) {
		var ret bool
		return ret
	}
	return *o.Native
}

// GetNativeOk returns a tuple with the Native field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetNativeOk() (*bool, bool) {
	if o == nil || IsNil(o.Native) {
		return nil, false
	}
	return o.Native, true
}

// HasNative returns a boolean if a field has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) HasNative() bool {
	if o != nil && !IsNil(o.Native) {
		return true
	}

	return false
}

// SetNative gets a reference to the given bool and assigns it to the Native field.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) SetNative(v bool) {
	o.Native = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetState() PortVlanAssignmentBatchVlanAssignmentsInnerState {
	if o == nil || IsNil(o.State) {
		var ret PortVlanAssignmentBatchVlanAssignmentsInnerState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetStateOk() (*PortVlanAssignmentBatchVlanAssignmentsInnerState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given PortVlanAssignmentBatchVlanAssignmentsInnerState and assigns it to the State field.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) SetState(v PortVlanAssignmentBatchVlanAssignmentsInnerState) {
	o.State = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetVlan() int32 {
	if o == nil || IsNil(o.Vlan) {
		var ret int32
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) GetVlanOk() (*int32, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given int32 and assigns it to the Vlan field.
func (o *PortVlanAssignmentBatchVlanAssignmentsInner) SetVlan(v int32) {
	o.Vlan = &v
}

func (o PortVlanAssignmentBatchVlanAssignmentsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortVlanAssignmentBatchVlanAssignmentsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Native) {
		toSerialize["native"] = o.Native
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortVlanAssignmentBatchVlanAssignmentsInner) UnmarshalJSON(data []byte) (err error) {
	varPortVlanAssignmentBatchVlanAssignmentsInner := _PortVlanAssignmentBatchVlanAssignmentsInner{}

	err = json.Unmarshal(data, &varPortVlanAssignmentBatchVlanAssignmentsInner)

	if err != nil {
		return err
	}

	*o = PortVlanAssignmentBatchVlanAssignmentsInner(varPortVlanAssignmentBatchVlanAssignmentsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "native")
		delete(additionalProperties, "state")
		delete(additionalProperties, "vlan")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortVlanAssignmentBatchVlanAssignmentsInner struct {
	value *PortVlanAssignmentBatchVlanAssignmentsInner
	isSet bool
}

func (v NullablePortVlanAssignmentBatchVlanAssignmentsInner) Get() *PortVlanAssignmentBatchVlanAssignmentsInner {
	return v.value
}

func (v *NullablePortVlanAssignmentBatchVlanAssignmentsInner) Set(val *PortVlanAssignmentBatchVlanAssignmentsInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePortVlanAssignmentBatchVlanAssignmentsInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePortVlanAssignmentBatchVlanAssignmentsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortVlanAssignmentBatchVlanAssignmentsInner(val *PortVlanAssignmentBatchVlanAssignmentsInner) *NullablePortVlanAssignmentBatchVlanAssignmentsInner {
	return &NullablePortVlanAssignmentBatchVlanAssignmentsInner{value: val, isSet: true}
}

func (v NullablePortVlanAssignmentBatchVlanAssignmentsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortVlanAssignmentBatchVlanAssignmentsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
