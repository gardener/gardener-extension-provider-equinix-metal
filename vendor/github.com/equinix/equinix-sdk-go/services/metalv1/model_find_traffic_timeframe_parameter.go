/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the FindTrafficTimeframeParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindTrafficTimeframeParameter{}

// FindTrafficTimeframeParameter struct for FindTrafficTimeframeParameter
type FindTrafficTimeframeParameter struct {
	EndedAt              time.Time `json:"ended_at"`
	StartedAt            time.Time `json:"started_at"`
	AdditionalProperties map[string]interface{}
}

type _FindTrafficTimeframeParameter FindTrafficTimeframeParameter

// NewFindTrafficTimeframeParameter instantiates a new FindTrafficTimeframeParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindTrafficTimeframeParameter(endedAt time.Time, startedAt time.Time) *FindTrafficTimeframeParameter {
	this := FindTrafficTimeframeParameter{}
	this.EndedAt = endedAt
	this.StartedAt = startedAt
	return &this
}

// NewFindTrafficTimeframeParameterWithDefaults instantiates a new FindTrafficTimeframeParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindTrafficTimeframeParameterWithDefaults() *FindTrafficTimeframeParameter {
	this := FindTrafficTimeframeParameter{}
	return &this
}

// GetEndedAt returns the EndedAt field value
func (o *FindTrafficTimeframeParameter) GetEndedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value
// and a boolean to check if the value has been set.
func (o *FindTrafficTimeframeParameter) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndedAt, true
}

// SetEndedAt sets field value
func (o *FindTrafficTimeframeParameter) SetEndedAt(v time.Time) {
	o.EndedAt = v
}

// GetStartedAt returns the StartedAt field value
func (o *FindTrafficTimeframeParameter) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *FindTrafficTimeframeParameter) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *FindTrafficTimeframeParameter) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

func (o FindTrafficTimeframeParameter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindTrafficTimeframeParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ended_at"] = o.EndedAt
	toSerialize["started_at"] = o.StartedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FindTrafficTimeframeParameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ended_at",
		"started_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFindTrafficTimeframeParameter := _FindTrafficTimeframeParameter{}

	err = json.Unmarshal(data, &varFindTrafficTimeframeParameter)

	if err != nil {
		return err
	}

	*o = FindTrafficTimeframeParameter(varFindTrafficTimeframeParameter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ended_at")
		delete(additionalProperties, "started_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFindTrafficTimeframeParameter struct {
	value *FindTrafficTimeframeParameter
	isSet bool
}

func (v NullableFindTrafficTimeframeParameter) Get() *FindTrafficTimeframeParameter {
	return v.value
}

func (v *NullableFindTrafficTimeframeParameter) Set(val *FindTrafficTimeframeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableFindTrafficTimeframeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableFindTrafficTimeframeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindTrafficTimeframeParameter(val *FindTrafficTimeframeParameter) *NullableFindTrafficTimeframeParameter {
	return &NullableFindTrafficTimeframeParameter{value: val, isSet: true}
}

func (v NullableFindTrafficTimeframeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindTrafficTimeframeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
