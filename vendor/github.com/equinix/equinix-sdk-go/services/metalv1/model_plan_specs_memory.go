/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PlanSpecsMemory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanSpecsMemory{}

// PlanSpecsMemory struct for PlanSpecsMemory
type PlanSpecsMemory struct {
	Total                *string `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlanSpecsMemory PlanSpecsMemory

// NewPlanSpecsMemory instantiates a new PlanSpecsMemory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSpecsMemory() *PlanSpecsMemory {
	this := PlanSpecsMemory{}
	return &this
}

// NewPlanSpecsMemoryWithDefaults instantiates a new PlanSpecsMemory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSpecsMemoryWithDefaults() *PlanSpecsMemory {
	this := PlanSpecsMemory{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *PlanSpecsMemory) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecsMemory) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *PlanSpecsMemory) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *PlanSpecsMemory) SetTotal(v string) {
	o.Total = &v
}

func (o PlanSpecsMemory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanSpecsMemory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanSpecsMemory) UnmarshalJSON(data []byte) (err error) {
	varPlanSpecsMemory := _PlanSpecsMemory{}

	err = json.Unmarshal(data, &varPlanSpecsMemory)

	if err != nil {
		return err
	}

	*o = PlanSpecsMemory(varPlanSpecsMemory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanSpecsMemory struct {
	value *PlanSpecsMemory
	isSet bool
}

func (v NullablePlanSpecsMemory) Get() *PlanSpecsMemory {
	return v.value
}

func (v *NullablePlanSpecsMemory) Set(val *PlanSpecsMemory) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSpecsMemory) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSpecsMemory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSpecsMemory(val *PlanSpecsMemory) *NullablePlanSpecsMemory {
	return &NullablePlanSpecsMemory{value: val, isSet: true}
}

func (v NullablePlanSpecsMemory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSpecsMemory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
