/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FabricServiceTokenServiceTokenType Either 'a_side' or 'z_side', depending on which type of Fabric VC was requested.
type FabricServiceTokenServiceTokenType string

// List of FabricServiceToken_service_token_type
const (
	FABRICSERVICETOKENSERVICETOKENTYPE_A_SIDE FabricServiceTokenServiceTokenType = "a_side"
	FABRICSERVICETOKENSERVICETOKENTYPE_Z_SIDE FabricServiceTokenServiceTokenType = "z_side"
)

// All allowed values of FabricServiceTokenServiceTokenType enum
var AllowedFabricServiceTokenServiceTokenTypeEnumValues = []FabricServiceTokenServiceTokenType{
	"a_side",
	"z_side",
}

func (v *FabricServiceTokenServiceTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricServiceTokenServiceTokenType(value)
	for _, existing := range AllowedFabricServiceTokenServiceTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricServiceTokenServiceTokenType", value)
}

// NewFabricServiceTokenServiceTokenTypeFromValue returns a pointer to a valid FabricServiceTokenServiceTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricServiceTokenServiceTokenTypeFromValue(v string) (*FabricServiceTokenServiceTokenType, error) {
	ev := FabricServiceTokenServiceTokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricServiceTokenServiceTokenType: valid values are %v", v, AllowedFabricServiceTokenServiceTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricServiceTokenServiceTokenType) IsValid() bool {
	for _, existing := range AllowedFabricServiceTokenServiceTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricServiceToken_service_token_type value
func (v FabricServiceTokenServiceTokenType) Ptr() *FabricServiceTokenServiceTokenType {
	return &v
}

type NullableFabricServiceTokenServiceTokenType struct {
	value *FabricServiceTokenServiceTokenType
	isSet bool
}

func (v NullableFabricServiceTokenServiceTokenType) Get() *FabricServiceTokenServiceTokenType {
	return v.value
}

func (v *NullableFabricServiceTokenServiceTokenType) Set(val *FabricServiceTokenServiceTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricServiceTokenServiceTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricServiceTokenServiceTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricServiceTokenServiceTokenType(val *FabricServiceTokenServiceTokenType) *NullableFabricServiceTokenServiceTokenType {
	return &NullableFabricServiceTokenServiceTokenType{value: val, isSet: true}
}

func (v NullableFabricServiceTokenServiceTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricServiceTokenServiceTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
