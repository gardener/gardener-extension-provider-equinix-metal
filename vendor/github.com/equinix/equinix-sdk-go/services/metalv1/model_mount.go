/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the Mount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mount{}

// Mount struct for Mount
type Mount struct {
	Device               *string  `json:"device,omitempty"`
	Format               *string  `json:"format,omitempty"`
	Point                *string  `json:"point,omitempty"`
	Options              []string `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Mount Mount

// NewMount instantiates a new Mount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMount() *Mount {
	this := Mount{}
	return &this
}

// NewMountWithDefaults instantiates a new Mount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountWithDefaults() *Mount {
	this := Mount{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Mount) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mount) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Mount) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *Mount) SetDevice(v string) {
	o.Device = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *Mount) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mount) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *Mount) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *Mount) SetFormat(v string) {
	o.Format = &v
}

// GetPoint returns the Point field value if set, zero value otherwise.
func (o *Mount) GetPoint() string {
	if o == nil || IsNil(o.Point) {
		var ret string
		return ret
	}
	return *o.Point
}

// GetPointOk returns a tuple with the Point field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mount) GetPointOk() (*string, bool) {
	if o == nil || IsNil(o.Point) {
		return nil, false
	}
	return o.Point, true
}

// HasPoint returns a boolean if a field has been set.
func (o *Mount) HasPoint() bool {
	if o != nil && !IsNil(o.Point) {
		return true
	}

	return false
}

// SetPoint gets a reference to the given string and assigns it to the Point field.
func (o *Mount) SetPoint(v string) {
	o.Point = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Mount) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mount) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Mount) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *Mount) SetOptions(v []string) {
	o.Options = v
}

func (o Mount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.Point) {
		toSerialize["point"] = o.Point
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Mount) UnmarshalJSON(data []byte) (err error) {
	varMount := _Mount{}

	err = json.Unmarshal(data, &varMount)

	if err != nil {
		return err
	}

	*o = Mount(varMount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "format")
		delete(additionalProperties, "point")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMount struct {
	value *Mount
	isSet bool
}

func (v NullableMount) Get() *Mount {
	return v.value
}

func (v *NullableMount) Set(val *Mount) {
	v.value = val
	v.isSet = true
}

func (v NullableMount) IsSet() bool {
	return v.isSet
}

func (v *NullableMount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMount(val *Mount) *NullableMount {
	return &NullableMount{value: val, isSet: true}
}

func (v NullableMount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
