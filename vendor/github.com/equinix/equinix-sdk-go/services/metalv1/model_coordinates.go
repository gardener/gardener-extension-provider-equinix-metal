/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the Coordinates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Coordinates{}

// Coordinates struct for Coordinates
type Coordinates struct {
	Latitude             *string `json:"latitude,omitempty"`
	Longitude            *string `json:"longitude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Coordinates Coordinates

// NewCoordinates instantiates a new Coordinates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoordinates() *Coordinates {
	this := Coordinates{}
	return &this
}

// NewCoordinatesWithDefaults instantiates a new Coordinates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoordinatesWithDefaults() *Coordinates {
	this := Coordinates{}
	return &this
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *Coordinates) GetLatitude() string {
	if o == nil || IsNil(o.Latitude) {
		var ret string
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coordinates) GetLatitudeOk() (*string, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *Coordinates) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given string and assigns it to the Latitude field.
func (o *Coordinates) SetLatitude(v string) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *Coordinates) GetLongitude() string {
	if o == nil || IsNil(o.Longitude) {
		var ret string
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coordinates) GetLongitudeOk() (*string, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *Coordinates) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given string and assigns it to the Longitude field.
func (o *Coordinates) SetLongitude(v string) {
	o.Longitude = &v
}

func (o Coordinates) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Coordinates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Coordinates) UnmarshalJSON(data []byte) (err error) {
	varCoordinates := _Coordinates{}

	err = json.Unmarshal(data, &varCoordinates)

	if err != nil {
		return err
	}

	*o = Coordinates(varCoordinates)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoordinates struct {
	value *Coordinates
	isSet bool
}

func (v NullableCoordinates) Get() *Coordinates {
	return v.value
}

func (v *NullableCoordinates) Set(val *Coordinates) {
	v.value = val
	v.isSet = true
}

func (v NullableCoordinates) IsSet() bool {
	return v.isSet
}

func (v *NullableCoordinates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoordinates(val *Coordinates) *NullableCoordinates {
	return &NullableCoordinates{value: val, isSet: true}
}

func (v NullableCoordinates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoordinates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
