/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PlanSpecs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanSpecs{}

// PlanSpecs struct for PlanSpecs
type PlanSpecs struct {
	Cpus                 []PlanSpecsCpusInner   `json:"cpus,omitempty"`
	Memory               *PlanSpecsMemory       `json:"memory,omitempty"`
	Drives               []PlanSpecsDrivesInner `json:"drives,omitempty"`
	Nics                 []PlanSpecsNicsInner   `json:"nics,omitempty"`
	Features             *PlanSpecsFeatures     `json:"features,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlanSpecs PlanSpecs

// NewPlanSpecs instantiates a new PlanSpecs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSpecs() *PlanSpecs {
	this := PlanSpecs{}
	return &this
}

// NewPlanSpecsWithDefaults instantiates a new PlanSpecs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSpecsWithDefaults() *PlanSpecs {
	this := PlanSpecs{}
	return &this
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *PlanSpecs) GetCpus() []PlanSpecsCpusInner {
	if o == nil || IsNil(o.Cpus) {
		var ret []PlanSpecsCpusInner
		return ret
	}
	return o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecs) GetCpusOk() ([]PlanSpecsCpusInner, bool) {
	if o == nil || IsNil(o.Cpus) {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *PlanSpecs) HasCpus() bool {
	if o != nil && !IsNil(o.Cpus) {
		return true
	}

	return false
}

// SetCpus gets a reference to the given []PlanSpecsCpusInner and assigns it to the Cpus field.
func (o *PlanSpecs) SetCpus(v []PlanSpecsCpusInner) {
	o.Cpus = v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *PlanSpecs) GetMemory() PlanSpecsMemory {
	if o == nil || IsNil(o.Memory) {
		var ret PlanSpecsMemory
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecs) GetMemoryOk() (*PlanSpecsMemory, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *PlanSpecs) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given PlanSpecsMemory and assigns it to the Memory field.
func (o *PlanSpecs) SetMemory(v PlanSpecsMemory) {
	o.Memory = &v
}

// GetDrives returns the Drives field value if set, zero value otherwise.
func (o *PlanSpecs) GetDrives() []PlanSpecsDrivesInner {
	if o == nil || IsNil(o.Drives) {
		var ret []PlanSpecsDrivesInner
		return ret
	}
	return o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecs) GetDrivesOk() ([]PlanSpecsDrivesInner, bool) {
	if o == nil || IsNil(o.Drives) {
		return nil, false
	}
	return o.Drives, true
}

// HasDrives returns a boolean if a field has been set.
func (o *PlanSpecs) HasDrives() bool {
	if o != nil && !IsNil(o.Drives) {
		return true
	}

	return false
}

// SetDrives gets a reference to the given []PlanSpecsDrivesInner and assigns it to the Drives field.
func (o *PlanSpecs) SetDrives(v []PlanSpecsDrivesInner) {
	o.Drives = v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *PlanSpecs) GetNics() []PlanSpecsNicsInner {
	if o == nil || IsNil(o.Nics) {
		var ret []PlanSpecsNicsInner
		return ret
	}
	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecs) GetNicsOk() ([]PlanSpecsNicsInner, bool) {
	if o == nil || IsNil(o.Nics) {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *PlanSpecs) HasNics() bool {
	if o != nil && !IsNil(o.Nics) {
		return true
	}

	return false
}

// SetNics gets a reference to the given []PlanSpecsNicsInner and assigns it to the Nics field.
func (o *PlanSpecs) SetNics(v []PlanSpecsNicsInner) {
	o.Nics = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *PlanSpecs) GetFeatures() PlanSpecsFeatures {
	if o == nil || IsNil(o.Features) {
		var ret PlanSpecsFeatures
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecs) GetFeaturesOk() (*PlanSpecsFeatures, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *PlanSpecs) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given PlanSpecsFeatures and assigns it to the Features field.
func (o *PlanSpecs) SetFeatures(v PlanSpecsFeatures) {
	o.Features = &v
}

func (o PlanSpecs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanSpecs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpus) {
		toSerialize["cpus"] = o.Cpus
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Drives) {
		toSerialize["drives"] = o.Drives
	}
	if !IsNil(o.Nics) {
		toSerialize["nics"] = o.Nics
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanSpecs) UnmarshalJSON(data []byte) (err error) {
	varPlanSpecs := _PlanSpecs{}

	err = json.Unmarshal(data, &varPlanSpecs)

	if err != nil {
		return err
	}

	*o = PlanSpecs(varPlanSpecs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cpus")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "drives")
		delete(additionalProperties, "nics")
		delete(additionalProperties, "features")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanSpecs struct {
	value *PlanSpecs
	isSet bool
}

func (v NullablePlanSpecs) Get() *PlanSpecs {
	return v.value
}

func (v *NullablePlanSpecs) Set(val *PlanSpecs) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSpecs) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSpecs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSpecs(val *PlanSpecs) *NullablePlanSpecs {
	return &NullablePlanSpecs{value: val, isSet: true}
}

func (v NullablePlanSpecs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSpecs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
