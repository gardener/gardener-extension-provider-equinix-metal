/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PlanSpecsNicsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanSpecsNicsInner{}

// PlanSpecsNicsInner struct for PlanSpecsNicsInner
type PlanSpecsNicsInner struct {
	Count *int32 `json:"count,omitempty"`
	// Values may include '1Gbps', '10Gbps', '25Gbps'
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlanSpecsNicsInner PlanSpecsNicsInner

// NewPlanSpecsNicsInner instantiates a new PlanSpecsNicsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSpecsNicsInner() *PlanSpecsNicsInner {
	this := PlanSpecsNicsInner{}
	return &this
}

// NewPlanSpecsNicsInnerWithDefaults instantiates a new PlanSpecsNicsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSpecsNicsInnerWithDefaults() *PlanSpecsNicsInner {
	this := PlanSpecsNicsInner{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PlanSpecsNicsInner) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecsNicsInner) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PlanSpecsNicsInner) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PlanSpecsNicsInner) SetCount(v int32) {
	o.Count = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlanSpecsNicsInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecsNicsInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlanSpecsNicsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PlanSpecsNicsInner) SetType(v string) {
	o.Type = &v
}

func (o PlanSpecsNicsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanSpecsNicsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanSpecsNicsInner) UnmarshalJSON(data []byte) (err error) {
	varPlanSpecsNicsInner := _PlanSpecsNicsInner{}

	err = json.Unmarshal(data, &varPlanSpecsNicsInner)

	if err != nil {
		return err
	}

	*o = PlanSpecsNicsInner(varPlanSpecsNicsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanSpecsNicsInner struct {
	value *PlanSpecsNicsInner
	isSet bool
}

func (v NullablePlanSpecsNicsInner) Get() *PlanSpecsNicsInner {
	return v.value
}

func (v *NullablePlanSpecsNicsInner) Set(val *PlanSpecsNicsInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSpecsNicsInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSpecsNicsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSpecsNicsInner(val *PlanSpecsNicsInner) *NullablePlanSpecsNicsInner {
	return &NullablePlanSpecsNicsInner{value: val, isSet: true}
}

func (v NullablePlanSpecsNicsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSpecsNicsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
