/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// InterconnectionPortRole Either 'primary' or 'secondary'.
type InterconnectionPortRole string

// List of InterconnectionPort_role
const (
	INTERCONNECTIONPORTROLE_PRIMARY   InterconnectionPortRole = "primary"
	INTERCONNECTIONPORTROLE_SECONDARY InterconnectionPortRole = "secondary"
)

// All allowed values of InterconnectionPortRole enum
var AllowedInterconnectionPortRoleEnumValues = []InterconnectionPortRole{
	"primary",
	"secondary",
}

func (v *InterconnectionPortRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterconnectionPortRole(value)
	for _, existing := range AllowedInterconnectionPortRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterconnectionPortRole", value)
}

// NewInterconnectionPortRoleFromValue returns a pointer to a valid InterconnectionPortRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterconnectionPortRoleFromValue(v string) (*InterconnectionPortRole, error) {
	ev := InterconnectionPortRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterconnectionPortRole: valid values are %v", v, AllowedInterconnectionPortRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterconnectionPortRole) IsValid() bool {
	for _, existing := range AllowedInterconnectionPortRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterconnectionPort_role value
func (v InterconnectionPortRole) Ptr() *InterconnectionPortRole {
	return &v
}

type NullableInterconnectionPortRole struct {
	value *InterconnectionPortRole
	isSet bool
}

func (v NullableInterconnectionPortRole) Get() *InterconnectionPortRole {
	return v.value
}

func (v *NullableInterconnectionPortRole) Set(val *InterconnectionPortRole) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionPortRole) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionPortRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionPortRole(val *InterconnectionPortRole) *NullableInterconnectionPortRole {
	return &NullableInterconnectionPortRole{value: val, isSet: true}
}

func (v NullableInterconnectionPortRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionPortRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
