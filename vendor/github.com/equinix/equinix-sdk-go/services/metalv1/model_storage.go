/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the Storage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Storage{}

// Storage struct for Storage
type Storage struct {
	Disks                []Disk       `json:"disks,omitempty"`
	Raid                 []Raid       `json:"raid,omitempty"`
	Filesystems          []Filesystem `json:"filesystems,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Storage Storage

// NewStorage instantiates a new Storage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorage() *Storage {
	this := Storage{}
	return &this
}

// NewStorageWithDefaults instantiates a new Storage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageWithDefaults() *Storage {
	this := Storage{}
	return &this
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *Storage) GetDisks() []Disk {
	if o == nil || IsNil(o.Disks) {
		var ret []Disk
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetDisksOk() ([]Disk, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *Storage) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []Disk and assigns it to the Disks field.
func (o *Storage) SetDisks(v []Disk) {
	o.Disks = v
}

// GetRaid returns the Raid field value if set, zero value otherwise.
func (o *Storage) GetRaid() []Raid {
	if o == nil || IsNil(o.Raid) {
		var ret []Raid
		return ret
	}
	return o.Raid
}

// GetRaidOk returns a tuple with the Raid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetRaidOk() ([]Raid, bool) {
	if o == nil || IsNil(o.Raid) {
		return nil, false
	}
	return o.Raid, true
}

// HasRaid returns a boolean if a field has been set.
func (o *Storage) HasRaid() bool {
	if o != nil && !IsNil(o.Raid) {
		return true
	}

	return false
}

// SetRaid gets a reference to the given []Raid and assigns it to the Raid field.
func (o *Storage) SetRaid(v []Raid) {
	o.Raid = v
}

// GetFilesystems returns the Filesystems field value if set, zero value otherwise.
func (o *Storage) GetFilesystems() []Filesystem {
	if o == nil || IsNil(o.Filesystems) {
		var ret []Filesystem
		return ret
	}
	return o.Filesystems
}

// GetFilesystemsOk returns a tuple with the Filesystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetFilesystemsOk() ([]Filesystem, bool) {
	if o == nil || IsNil(o.Filesystems) {
		return nil, false
	}
	return o.Filesystems, true
}

// HasFilesystems returns a boolean if a field has been set.
func (o *Storage) HasFilesystems() bool {
	if o != nil && !IsNil(o.Filesystems) {
		return true
	}

	return false
}

// SetFilesystems gets a reference to the given []Filesystem and assigns it to the Filesystems field.
func (o *Storage) SetFilesystems(v []Filesystem) {
	o.Filesystems = v
}

func (o Storage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Storage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.Raid) {
		toSerialize["raid"] = o.Raid
	}
	if !IsNil(o.Filesystems) {
		toSerialize["filesystems"] = o.Filesystems
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Storage) UnmarshalJSON(data []byte) (err error) {
	varStorage := _Storage{}

	err = json.Unmarshal(data, &varStorage)

	if err != nil {
		return err
	}

	*o = Storage(varStorage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disks")
		delete(additionalProperties, "raid")
		delete(additionalProperties, "filesystems")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorage struct {
	value *Storage
	isSet bool
}

func (v NullableStorage) Get() *Storage {
	return v.value
}

func (v *NullableStorage) Set(val *Storage) {
	v.value = val
	v.isSet = true
}

func (v NullableStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorage(val *Storage) *NullableStorage {
	return &NullableStorage{value: val, isSet: true}
}

func (v NullableStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
