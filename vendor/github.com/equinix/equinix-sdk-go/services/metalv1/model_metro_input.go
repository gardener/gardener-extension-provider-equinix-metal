/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the MetroInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetroInput{}

// MetroInput struct for MetroInput
type MetroInput struct {
	// Metro code or ID of where the device should be provisioned in, or it can be instructed to create the device in the best available metro with `{ \"metro\": \"any\" }`. The special metro value of any means anywhere, any metro. When any is chosen in the request, the metro location is picked per our scheduling algorithms that favor the following factors: hardware reservation location (if requesting reserved hardware), ip reservations, spot instances, etc. The any keyword *does not* optimize for cost, this means that usage costs (instance, transfer, other features dependent on location) will vary. Please check metro value in response to see where the device was created. Either metro or facility must be provided.
	Metro                string `json:"metro"`
	AdditionalProperties map[string]interface{}
}

type _MetroInput MetroInput

// NewMetroInput instantiates a new MetroInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetroInput(metro string) *MetroInput {
	this := MetroInput{}
	this.Metro = metro
	return &this
}

// NewMetroInputWithDefaults instantiates a new MetroInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroInputWithDefaults() *MetroInput {
	this := MetroInput{}
	return &this
}

// GetMetro returns the Metro field value
func (o *MetroInput) GetMetro() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metro
}

// GetMetroOk returns a tuple with the Metro field value
// and a boolean to check if the value has been set.
func (o *MetroInput) GetMetroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metro, true
}

// SetMetro sets field value
func (o *MetroInput) SetMetro(v string) {
	o.Metro = v
}

func (o MetroInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetroInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metro"] = o.Metro

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetroInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metro",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetroInput := _MetroInput{}

	err = json.Unmarshal(data, &varMetroInput)

	if err != nil {
		return err
	}

	*o = MetroInput(varMetroInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metro")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetroInput struct {
	value *MetroInput
	isSet bool
}

func (v NullableMetroInput) Get() *MetroInput {
	return v.value
}

func (v *NullableMetroInput) Set(val *MetroInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroInput(val *MetroInput) *NullableMetroInput {
	return &NullableMetroInput{value: val, isSet: true}
}

func (v NullableMetroInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
