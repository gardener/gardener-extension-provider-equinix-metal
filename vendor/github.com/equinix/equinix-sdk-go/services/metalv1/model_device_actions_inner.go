/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the DeviceActionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceActionsInner{}

// DeviceActionsInner struct for DeviceActionsInner
type DeviceActionsInner struct {
	Type                 *string `json:"type,omitempty"`
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceActionsInner DeviceActionsInner

// NewDeviceActionsInner instantiates a new DeviceActionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceActionsInner() *DeviceActionsInner {
	this := DeviceActionsInner{}
	return &this
}

// NewDeviceActionsInnerWithDefaults instantiates a new DeviceActionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceActionsInnerWithDefaults() *DeviceActionsInner {
	this := DeviceActionsInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceActionsInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceActionsInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceActionsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeviceActionsInner) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceActionsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceActionsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceActionsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceActionsInner) SetName(v string) {
	o.Name = &v
}

func (o DeviceActionsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceActionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceActionsInner) UnmarshalJSON(data []byte) (err error) {
	varDeviceActionsInner := _DeviceActionsInner{}

	err = json.Unmarshal(data, &varDeviceActionsInner)

	if err != nil {
		return err
	}

	*o = DeviceActionsInner(varDeviceActionsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceActionsInner struct {
	value *DeviceActionsInner
	isSet bool
}

func (v NullableDeviceActionsInner) Get() *DeviceActionsInner {
	return v.value
}

func (v *NullableDeviceActionsInner) Set(val *DeviceActionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceActionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceActionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceActionsInner(val *DeviceActionsInner) *NullableDeviceActionsInner {
	return &NullableDeviceActionsInner{value: val, isSet: true}
}

func (v NullableDeviceActionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceActionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
