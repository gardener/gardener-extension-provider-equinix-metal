/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FabricServiceTokenState The state of the service token that corresponds with the service token state on Fabric. An 'inactive' state refers to a token that has not been redeemed yet on the Fabric side, an 'active' state refers to a token that has already been redeemed, and an 'expired' state refers to a token that has reached its expiry time.
type FabricServiceTokenState string

// List of FabricServiceToken_state
const (
	FABRICSERVICETOKENSTATE_INACTIVE FabricServiceTokenState = "inactive"
	FABRICSERVICETOKENSTATE_ACTIVE   FabricServiceTokenState = "active"
	FABRICSERVICETOKENSTATE_EXPIRED  FabricServiceTokenState = "expired"
)

// All allowed values of FabricServiceTokenState enum
var AllowedFabricServiceTokenStateEnumValues = []FabricServiceTokenState{
	"inactive",
	"active",
	"expired",
}

func (v *FabricServiceTokenState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricServiceTokenState(value)
	for _, existing := range AllowedFabricServiceTokenStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricServiceTokenState", value)
}

// NewFabricServiceTokenStateFromValue returns a pointer to a valid FabricServiceTokenState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricServiceTokenStateFromValue(v string) (*FabricServiceTokenState, error) {
	ev := FabricServiceTokenState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricServiceTokenState: valid values are %v", v, AllowedFabricServiceTokenStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricServiceTokenState) IsValid() bool {
	for _, existing := range AllowedFabricServiceTokenStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricServiceToken_state value
func (v FabricServiceTokenState) Ptr() *FabricServiceTokenState {
	return &v
}

type NullableFabricServiceTokenState struct {
	value *FabricServiceTokenState
	isSet bool
}

func (v NullableFabricServiceTokenState) Get() *FabricServiceTokenState {
	return v.value
}

func (v *NullableFabricServiceTokenState) Set(val *FabricServiceTokenState) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricServiceTokenState) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricServiceTokenState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricServiceTokenState(val *FabricServiceTokenState) *NullableFabricServiceTokenState {
	return &NullableFabricServiceTokenState{value: val, isSet: true}
}

func (v NullableFabricServiceTokenState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricServiceTokenState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
