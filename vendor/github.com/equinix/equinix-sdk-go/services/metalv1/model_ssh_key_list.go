/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the SSHKeyList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSHKeyList{}

// SSHKeyList struct for SSHKeyList
type SSHKeyList struct {
	SshKeys              []SSHKey `json:"ssh_keys,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SSHKeyList SSHKeyList

// NewSSHKeyList instantiates a new SSHKeyList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSHKeyList() *SSHKeyList {
	this := SSHKeyList{}
	return &this
}

// NewSSHKeyListWithDefaults instantiates a new SSHKeyList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSHKeyListWithDefaults() *SSHKeyList {
	this := SSHKeyList{}
	return &this
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *SSHKeyList) GetSshKeys() []SSHKey {
	if o == nil || IsNil(o.SshKeys) {
		var ret []SSHKey
		return ret
	}
	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHKeyList) GetSshKeysOk() ([]SSHKey, bool) {
	if o == nil || IsNil(o.SshKeys) {
		return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *SSHKeyList) HasSshKeys() bool {
	if o != nil && !IsNil(o.SshKeys) {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given []SSHKey and assigns it to the SshKeys field.
func (o *SSHKeyList) SetSshKeys(v []SSHKey) {
	o.SshKeys = v
}

func (o SSHKeyList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSHKeyList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SshKeys) {
		toSerialize["ssh_keys"] = o.SshKeys
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SSHKeyList) UnmarshalJSON(data []byte) (err error) {
	varSSHKeyList := _SSHKeyList{}

	err = json.Unmarshal(data, &varSSHKeyList)

	if err != nil {
		return err
	}

	*o = SSHKeyList(varSSHKeyList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ssh_keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSSHKeyList struct {
	value *SSHKeyList
	isSet bool
}

func (v NullableSSHKeyList) Get() *SSHKeyList {
	return v.value
}

func (v *NullableSSHKeyList) Set(val *SSHKeyList) {
	v.value = val
	v.isSet = true
}

func (v NullableSSHKeyList) IsSet() bool {
	return v.isSet
}

func (v *NullableSSHKeyList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSHKeyList(val *SSHKeyList) *NullableSSHKeyList {
	return &NullableSSHKeyList{value: val, isSet: true}
}

func (v NullableSSHKeyList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSHKeyList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
