/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the UserList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserList{}

// UserList struct for UserList
type UserList struct {
	Meta                 *Meta  `json:"meta,omitempty"`
	Users                []User `json:"users,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserList UserList

// NewUserList instantiates a new UserList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserList() *UserList {
	this := UserList{}
	return &this
}

// NewUserListWithDefaults instantiates a new UserList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserListWithDefaults() *UserList {
	this := UserList{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *UserList) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserList) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *UserList) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *UserList) SetMeta(v Meta) {
	o.Meta = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UserList) GetUsers() []User {
	if o == nil || IsNil(o.Users) {
		var ret []User
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserList) GetUsersOk() ([]User, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UserList) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []User and assigns it to the Users field.
func (o *UserList) SetUsers(v []User) {
	o.Users = v
}

func (o UserList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserList) UnmarshalJSON(data []byte) (err error) {
	varUserList := _UserList{}

	err = json.Unmarshal(data, &varUserList)

	if err != nil {
		return err
	}

	*o = UserList(varUserList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "meta")
		delete(additionalProperties, "users")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserList struct {
	value *UserList
	isSet bool
}

func (v NullableUserList) Get() *UserList {
	return v.value
}

func (v *NullableUserList) Set(val *UserList) {
	v.value = val
	v.isSet = true
}

func (v NullableUserList) IsSet() bool {
	return v.isSet
}

func (v *NullableUserList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserList(val *UserList) *NullableUserList {
	return &NullableUserList{value: val, isSet: true}
}

func (v NullableUserList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
