/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the ProjectUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectUpdateInput{}

// ProjectUpdateInput struct for ProjectUpdateInput
type ProjectUpdateInput struct {
	BackendTransferEnabled *bool                  `json:"backend_transfer_enabled,omitempty"`
	Customdata             map[string]interface{} `json:"customdata,omitempty"`
	// The name of the project. Cannot contain characters encoded in greater than 3 bytes such as emojis.
	Name                 *string  `json:"name,omitempty"`
	PaymentMethodId      *string  `json:"payment_method_id,omitempty"`
	Tags                 []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProjectUpdateInput ProjectUpdateInput

// NewProjectUpdateInput instantiates a new ProjectUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectUpdateInput() *ProjectUpdateInput {
	this := ProjectUpdateInput{}
	return &this
}

// NewProjectUpdateInputWithDefaults instantiates a new ProjectUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectUpdateInputWithDefaults() *ProjectUpdateInput {
	this := ProjectUpdateInput{}
	return &this
}

// GetBackendTransferEnabled returns the BackendTransferEnabled field value if set, zero value otherwise.
func (o *ProjectUpdateInput) GetBackendTransferEnabled() bool {
	if o == nil || IsNil(o.BackendTransferEnabled) {
		var ret bool
		return ret
	}
	return *o.BackendTransferEnabled
}

// GetBackendTransferEnabledOk returns a tuple with the BackendTransferEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdateInput) GetBackendTransferEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BackendTransferEnabled) {
		return nil, false
	}
	return o.BackendTransferEnabled, true
}

// HasBackendTransferEnabled returns a boolean if a field has been set.
func (o *ProjectUpdateInput) HasBackendTransferEnabled() bool {
	if o != nil && !IsNil(o.BackendTransferEnabled) {
		return true
	}

	return false
}

// SetBackendTransferEnabled gets a reference to the given bool and assigns it to the BackendTransferEnabled field.
func (o *ProjectUpdateInput) SetBackendTransferEnabled(v bool) {
	o.BackendTransferEnabled = &v
}

// GetCustomdata returns the Customdata field value if set, zero value otherwise.
func (o *ProjectUpdateInput) GetCustomdata() map[string]interface{} {
	if o == nil || IsNil(o.Customdata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Customdata
}

// GetCustomdataOk returns a tuple with the Customdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdateInput) GetCustomdataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Customdata) {
		return map[string]interface{}{}, false
	}
	return o.Customdata, true
}

// HasCustomdata returns a boolean if a field has been set.
func (o *ProjectUpdateInput) HasCustomdata() bool {
	if o != nil && !IsNil(o.Customdata) {
		return true
	}

	return false
}

// SetCustomdata gets a reference to the given map[string]interface{} and assigns it to the Customdata field.
func (o *ProjectUpdateInput) SetCustomdata(v map[string]interface{}) {
	o.Customdata = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectUpdateInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdateInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectUpdateInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectUpdateInput) SetName(v string) {
	o.Name = &v
}

// GetPaymentMethodId returns the PaymentMethodId field value if set, zero value otherwise.
func (o *ProjectUpdateInput) GetPaymentMethodId() string {
	if o == nil || IsNil(o.PaymentMethodId) {
		var ret string
		return ret
	}
	return *o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdateInput) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodId) {
		return nil, false
	}
	return o.PaymentMethodId, true
}

// HasPaymentMethodId returns a boolean if a field has been set.
func (o *ProjectUpdateInput) HasPaymentMethodId() bool {
	if o != nil && !IsNil(o.PaymentMethodId) {
		return true
	}

	return false
}

// SetPaymentMethodId gets a reference to the given string and assigns it to the PaymentMethodId field.
func (o *ProjectUpdateInput) SetPaymentMethodId(v string) {
	o.PaymentMethodId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProjectUpdateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProjectUpdateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ProjectUpdateInput) SetTags(v []string) {
	o.Tags = v
}

func (o ProjectUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackendTransferEnabled) {
		toSerialize["backend_transfer_enabled"] = o.BackendTransferEnabled
	}
	if !IsNil(o.Customdata) {
		toSerialize["customdata"] = o.Customdata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PaymentMethodId) {
		toSerialize["payment_method_id"] = o.PaymentMethodId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectUpdateInput) UnmarshalJSON(data []byte) (err error) {
	varProjectUpdateInput := _ProjectUpdateInput{}

	err = json.Unmarshal(data, &varProjectUpdateInput)

	if err != nil {
		return err
	}

	*o = ProjectUpdateInput(varProjectUpdateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "backend_transfer_enabled")
		delete(additionalProperties, "customdata")
		delete(additionalProperties, "name")
		delete(additionalProperties, "payment_method_id")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectUpdateInput struct {
	value *ProjectUpdateInput
	isSet bool
}

func (v NullableProjectUpdateInput) Get() *ProjectUpdateInput {
	return v.value
}

func (v *NullableProjectUpdateInput) Set(val *ProjectUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectUpdateInput(val *ProjectUpdateInput) *NullableProjectUpdateInput {
	return &NullableProjectUpdateInput{value: val, isSet: true}
}

func (v NullableProjectUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
