/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// IPReservationType the model 'IPReservationType'
type IPReservationType string

// List of IPReservation_type
const (
	IPRESERVATIONTYPE_GLOBAL_IPV4  IPReservationType = "global_ipv4"
	IPRESERVATIONTYPE_PUBLIC_IPV4  IPReservationType = "public_ipv4"
	IPRESERVATIONTYPE_PRIVATE_IPV4 IPReservationType = "private_ipv4"
	IPRESERVATIONTYPE_PUBLIC_IPV6  IPReservationType = "public_ipv6"
)

// All allowed values of IPReservationType enum
var AllowedIPReservationTypeEnumValues = []IPReservationType{
	"global_ipv4",
	"public_ipv4",
	"private_ipv4",
	"public_ipv6",
}

func (v *IPReservationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IPReservationType(value)
	for _, existing := range AllowedIPReservationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IPReservationType", value)
}

// NewIPReservationTypeFromValue returns a pointer to a valid IPReservationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIPReservationTypeFromValue(v string) (*IPReservationType, error) {
	ev := IPReservationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IPReservationType: valid values are %v", v, AllowedIPReservationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IPReservationType) IsValid() bool {
	for _, existing := range AllowedIPReservationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IPReservation_type value
func (v IPReservationType) Ptr() *IPReservationType {
	return &v
}

type NullableIPReservationType struct {
	value *IPReservationType
	isSet bool
}

func (v NullableIPReservationType) Get() *IPReservationType {
	return v.value
}

func (v *NullableIPReservationType) Set(val *IPReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableIPReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableIPReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPReservationType(val *IPReservationType) *NullableIPReservationType {
	return &NullableIPReservationType{value: val, isSet: true}
}

func (v NullableIPReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
