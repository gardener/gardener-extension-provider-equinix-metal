/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the IPAssignmentList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPAssignmentList{}

// IPAssignmentList struct for IPAssignmentList
type IPAssignmentList struct {
	IpAddresses          []IPAssignment `json:"ip_addresses,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IPAssignmentList IPAssignmentList

// NewIPAssignmentList instantiates a new IPAssignmentList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPAssignmentList() *IPAssignmentList {
	this := IPAssignmentList{}
	return &this
}

// NewIPAssignmentListWithDefaults instantiates a new IPAssignmentList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPAssignmentListWithDefaults() *IPAssignmentList {
	this := IPAssignmentList{}
	return &this
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *IPAssignmentList) GetIpAddresses() []IPAssignment {
	if o == nil || IsNil(o.IpAddresses) {
		var ret []IPAssignment
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignmentList) GetIpAddressesOk() ([]IPAssignment, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *IPAssignmentList) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []IPAssignment and assigns it to the IpAddresses field.
func (o *IPAssignmentList) SetIpAddresses(v []IPAssignment) {
	o.IpAddresses = v
}

func (o IPAssignmentList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPAssignmentList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpAddresses) {
		toSerialize["ip_addresses"] = o.IpAddresses
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IPAssignmentList) UnmarshalJSON(data []byte) (err error) {
	varIPAssignmentList := _IPAssignmentList{}

	err = json.Unmarshal(data, &varIPAssignmentList)

	if err != nil {
		return err
	}

	*o = IPAssignmentList(varIPAssignmentList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip_addresses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIPAssignmentList struct {
	value *IPAssignmentList
	isSet bool
}

func (v NullableIPAssignmentList) Get() *IPAssignmentList {
	return v.value
}

func (v *NullableIPAssignmentList) Set(val *IPAssignmentList) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAssignmentList) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAssignmentList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAssignmentList(val *IPAssignmentList) *NullableIPAssignmentList {
	return &NullableIPAssignmentList{value: val, isSet: true}
}

func (v NullableIPAssignmentList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAssignmentList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
