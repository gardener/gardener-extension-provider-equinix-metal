/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// DedicatedPortCreateInputMode The mode of the interconnection (only relevant to Dedicated Ports). Fabric VCs won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
type DedicatedPortCreateInputMode string

// List of DedicatedPortCreateInput_mode
const (
	DEDICATEDPORTCREATEINPUTMODE_STANDARD DedicatedPortCreateInputMode = "standard"
	DEDICATEDPORTCREATEINPUTMODE_TUNNEL   DedicatedPortCreateInputMode = "tunnel"
)

// All allowed values of DedicatedPortCreateInputMode enum
var AllowedDedicatedPortCreateInputModeEnumValues = []DedicatedPortCreateInputMode{
	"standard",
	"tunnel",
}

func (v *DedicatedPortCreateInputMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DedicatedPortCreateInputMode(value)
	for _, existing := range AllowedDedicatedPortCreateInputModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DedicatedPortCreateInputMode", value)
}

// NewDedicatedPortCreateInputModeFromValue returns a pointer to a valid DedicatedPortCreateInputMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDedicatedPortCreateInputModeFromValue(v string) (*DedicatedPortCreateInputMode, error) {
	ev := DedicatedPortCreateInputMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DedicatedPortCreateInputMode: valid values are %v", v, AllowedDedicatedPortCreateInputModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DedicatedPortCreateInputMode) IsValid() bool {
	for _, existing := range AllowedDedicatedPortCreateInputModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DedicatedPortCreateInput_mode value
func (v DedicatedPortCreateInputMode) Ptr() *DedicatedPortCreateInputMode {
	return &v
}

type NullableDedicatedPortCreateInputMode struct {
	value *DedicatedPortCreateInputMode
	isSet bool
}

func (v NullableDedicatedPortCreateInputMode) Get() *DedicatedPortCreateInputMode {
	return v.value
}

func (v *NullableDedicatedPortCreateInputMode) Set(val *DedicatedPortCreateInputMode) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedPortCreateInputMode) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedPortCreateInputMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedPortCreateInputMode(val *DedicatedPortCreateInputMode) *NullableDedicatedPortCreateInputMode {
	return &NullableDedicatedPortCreateInputMode{value: val, isSet: true}
}

func (v NullableDedicatedPortCreateInputMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedPortCreateInputMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
