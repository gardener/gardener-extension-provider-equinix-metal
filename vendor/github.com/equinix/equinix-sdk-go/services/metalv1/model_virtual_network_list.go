/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VirtualNetworkList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualNetworkList{}

// VirtualNetworkList struct for VirtualNetworkList
type VirtualNetworkList struct {
	VirtualNetworks      []VirtualNetwork `json:"virtual_networks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualNetworkList VirtualNetworkList

// NewVirtualNetworkList instantiates a new VirtualNetworkList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualNetworkList() *VirtualNetworkList {
	this := VirtualNetworkList{}
	return &this
}

// NewVirtualNetworkListWithDefaults instantiates a new VirtualNetworkList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualNetworkListWithDefaults() *VirtualNetworkList {
	this := VirtualNetworkList{}
	return &this
}

// GetVirtualNetworks returns the VirtualNetworks field value if set, zero value otherwise.
func (o *VirtualNetworkList) GetVirtualNetworks() []VirtualNetwork {
	if o == nil || IsNil(o.VirtualNetworks) {
		var ret []VirtualNetwork
		return ret
	}
	return o.VirtualNetworks
}

// GetVirtualNetworksOk returns a tuple with the VirtualNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualNetworkList) GetVirtualNetworksOk() ([]VirtualNetwork, bool) {
	if o == nil || IsNil(o.VirtualNetworks) {
		return nil, false
	}
	return o.VirtualNetworks, true
}

// HasVirtualNetworks returns a boolean if a field has been set.
func (o *VirtualNetworkList) HasVirtualNetworks() bool {
	if o != nil && !IsNil(o.VirtualNetworks) {
		return true
	}

	return false
}

// SetVirtualNetworks gets a reference to the given []VirtualNetwork and assigns it to the VirtualNetworks field.
func (o *VirtualNetworkList) SetVirtualNetworks(v []VirtualNetwork) {
	o.VirtualNetworks = v
}

func (o VirtualNetworkList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualNetworkList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VirtualNetworks) {
		toSerialize["virtual_networks"] = o.VirtualNetworks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualNetworkList) UnmarshalJSON(data []byte) (err error) {
	varVirtualNetworkList := _VirtualNetworkList{}

	err = json.Unmarshal(data, &varVirtualNetworkList)

	if err != nil {
		return err
	}

	*o = VirtualNetworkList(varVirtualNetworkList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "virtual_networks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualNetworkList struct {
	value *VirtualNetworkList
	isSet bool
}

func (v NullableVirtualNetworkList) Get() *VirtualNetworkList {
	return v.value
}

func (v *NullableVirtualNetworkList) Set(val *VirtualNetworkList) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualNetworkList) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualNetworkList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualNetworkList(val *VirtualNetworkList) *NullableVirtualNetworkList {
	return &NullableVirtualNetworkList{value: val, isSet: true}
}

func (v NullableVirtualNetworkList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualNetworkList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
