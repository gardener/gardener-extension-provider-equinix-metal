/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindProjectHardwareReservationsProvisionableParameter the model 'FindProjectHardwareReservationsProvisionableParameter'
type FindProjectHardwareReservationsProvisionableParameter string

// List of findProjectHardwareReservations_provisionable_parameter
const (
	FINDPROJECTHARDWARERESERVATIONSPROVISIONABLEPARAMETER_ONLY FindProjectHardwareReservationsProvisionableParameter = "only"
)

// All allowed values of FindProjectHardwareReservationsProvisionableParameter enum
var AllowedFindProjectHardwareReservationsProvisionableParameterEnumValues = []FindProjectHardwareReservationsProvisionableParameter{
	"only",
}

func (v *FindProjectHardwareReservationsProvisionableParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindProjectHardwareReservationsProvisionableParameter(value)
	for _, existing := range AllowedFindProjectHardwareReservationsProvisionableParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindProjectHardwareReservationsProvisionableParameter", value)
}

// NewFindProjectHardwareReservationsProvisionableParameterFromValue returns a pointer to a valid FindProjectHardwareReservationsProvisionableParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindProjectHardwareReservationsProvisionableParameterFromValue(v string) (*FindProjectHardwareReservationsProvisionableParameter, error) {
	ev := FindProjectHardwareReservationsProvisionableParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindProjectHardwareReservationsProvisionableParameter: valid values are %v", v, AllowedFindProjectHardwareReservationsProvisionableParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindProjectHardwareReservationsProvisionableParameter) IsValid() bool {
	for _, existing := range AllowedFindProjectHardwareReservationsProvisionableParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findProjectHardwareReservations_provisionable_parameter value
func (v FindProjectHardwareReservationsProvisionableParameter) Ptr() *FindProjectHardwareReservationsProvisionableParameter {
	return &v
}

type NullableFindProjectHardwareReservationsProvisionableParameter struct {
	value *FindProjectHardwareReservationsProvisionableParameter
	isSet bool
}

func (v NullableFindProjectHardwareReservationsProvisionableParameter) Get() *FindProjectHardwareReservationsProvisionableParameter {
	return v.value
}

func (v *NullableFindProjectHardwareReservationsProvisionableParameter) Set(val *FindProjectHardwareReservationsProvisionableParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableFindProjectHardwareReservationsProvisionableParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableFindProjectHardwareReservationsProvisionableParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindProjectHardwareReservationsProvisionableParameter(val *FindProjectHardwareReservationsProvisionableParameter) *NullableFindProjectHardwareReservationsProvisionableParameter {
	return &NullableFindProjectHardwareReservationsProvisionableParameter{value: val, isSet: true}
}

func (v NullableFindProjectHardwareReservationsProvisionableParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindProjectHardwareReservationsProvisionableParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
