/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the SpotMarketPricesPerMetroReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpotMarketPricesPerMetroReport{}

// SpotMarketPricesPerMetroReport struct for SpotMarketPricesPerMetroReport
type SpotMarketPricesPerMetroReport struct {
	Am                   *SpotPricesPerFacility `json:"am,omitempty"`
	Ch                   *SpotPricesPerFacility `json:"ch,omitempty"`
	Da                   *SpotPricesPerFacility `json:"da,omitempty"`
	La                   *SpotPricesPerFacility `json:"la,omitempty"`
	Ny                   *SpotPricesPerFacility `json:"ny,omitempty"`
	Sg                   *SpotPricesPerFacility `json:"sg,omitempty"`
	Sv                   *SpotPricesPerFacility `json:"sv,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpotMarketPricesPerMetroReport SpotMarketPricesPerMetroReport

// NewSpotMarketPricesPerMetroReport instantiates a new SpotMarketPricesPerMetroReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpotMarketPricesPerMetroReport() *SpotMarketPricesPerMetroReport {
	this := SpotMarketPricesPerMetroReport{}
	return &this
}

// NewSpotMarketPricesPerMetroReportWithDefaults instantiates a new SpotMarketPricesPerMetroReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotMarketPricesPerMetroReportWithDefaults() *SpotMarketPricesPerMetroReport {
	this := SpotMarketPricesPerMetroReport{}
	return &this
}

// GetAm returns the Am field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetAm() SpotPricesPerFacility {
	if o == nil || IsNil(o.Am) {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Am
}

// GetAmOk returns a tuple with the Am field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetAmOk() (*SpotPricesPerFacility, bool) {
	if o == nil || IsNil(o.Am) {
		return nil, false
	}
	return o.Am, true
}

// HasAm returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasAm() bool {
	if o != nil && !IsNil(o.Am) {
		return true
	}

	return false
}

// SetAm gets a reference to the given SpotPricesPerFacility and assigns it to the Am field.
func (o *SpotMarketPricesPerMetroReport) SetAm(v SpotPricesPerFacility) {
	o.Am = &v
}

// GetCh returns the Ch field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetCh() SpotPricesPerFacility {
	if o == nil || IsNil(o.Ch) {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Ch
}

// GetChOk returns a tuple with the Ch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetChOk() (*SpotPricesPerFacility, bool) {
	if o == nil || IsNil(o.Ch) {
		return nil, false
	}
	return o.Ch, true
}

// HasCh returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasCh() bool {
	if o != nil && !IsNil(o.Ch) {
		return true
	}

	return false
}

// SetCh gets a reference to the given SpotPricesPerFacility and assigns it to the Ch field.
func (o *SpotMarketPricesPerMetroReport) SetCh(v SpotPricesPerFacility) {
	o.Ch = &v
}

// GetDa returns the Da field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetDa() SpotPricesPerFacility {
	if o == nil || IsNil(o.Da) {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Da
}

// GetDaOk returns a tuple with the Da field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetDaOk() (*SpotPricesPerFacility, bool) {
	if o == nil || IsNil(o.Da) {
		return nil, false
	}
	return o.Da, true
}

// HasDa returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasDa() bool {
	if o != nil && !IsNil(o.Da) {
		return true
	}

	return false
}

// SetDa gets a reference to the given SpotPricesPerFacility and assigns it to the Da field.
func (o *SpotMarketPricesPerMetroReport) SetDa(v SpotPricesPerFacility) {
	o.Da = &v
}

// GetLa returns the La field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetLa() SpotPricesPerFacility {
	if o == nil || IsNil(o.La) {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.La
}

// GetLaOk returns a tuple with the La field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetLaOk() (*SpotPricesPerFacility, bool) {
	if o == nil || IsNil(o.La) {
		return nil, false
	}
	return o.La, true
}

// HasLa returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasLa() bool {
	if o != nil && !IsNil(o.La) {
		return true
	}

	return false
}

// SetLa gets a reference to the given SpotPricesPerFacility and assigns it to the La field.
func (o *SpotMarketPricesPerMetroReport) SetLa(v SpotPricesPerFacility) {
	o.La = &v
}

// GetNy returns the Ny field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetNy() SpotPricesPerFacility {
	if o == nil || IsNil(o.Ny) {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Ny
}

// GetNyOk returns a tuple with the Ny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetNyOk() (*SpotPricesPerFacility, bool) {
	if o == nil || IsNil(o.Ny) {
		return nil, false
	}
	return o.Ny, true
}

// HasNy returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasNy() bool {
	if o != nil && !IsNil(o.Ny) {
		return true
	}

	return false
}

// SetNy gets a reference to the given SpotPricesPerFacility and assigns it to the Ny field.
func (o *SpotMarketPricesPerMetroReport) SetNy(v SpotPricesPerFacility) {
	o.Ny = &v
}

// GetSg returns the Sg field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetSg() SpotPricesPerFacility {
	if o == nil || IsNil(o.Sg) {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Sg
}

// GetSgOk returns a tuple with the Sg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetSgOk() (*SpotPricesPerFacility, bool) {
	if o == nil || IsNil(o.Sg) {
		return nil, false
	}
	return o.Sg, true
}

// HasSg returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasSg() bool {
	if o != nil && !IsNil(o.Sg) {
		return true
	}

	return false
}

// SetSg gets a reference to the given SpotPricesPerFacility and assigns it to the Sg field.
func (o *SpotMarketPricesPerMetroReport) SetSg(v SpotPricesPerFacility) {
	o.Sg = &v
}

// GetSv returns the Sv field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetSv() SpotPricesPerFacility {
	if o == nil || IsNil(o.Sv) {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Sv
}

// GetSvOk returns a tuple with the Sv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetSvOk() (*SpotPricesPerFacility, bool) {
	if o == nil || IsNil(o.Sv) {
		return nil, false
	}
	return o.Sv, true
}

// HasSv returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasSv() bool {
	if o != nil && !IsNil(o.Sv) {
		return true
	}

	return false
}

// SetSv gets a reference to the given SpotPricesPerFacility and assigns it to the Sv field.
func (o *SpotMarketPricesPerMetroReport) SetSv(v SpotPricesPerFacility) {
	o.Sv = &v
}

func (o SpotMarketPricesPerMetroReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpotMarketPricesPerMetroReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Am) {
		toSerialize["am"] = o.Am
	}
	if !IsNil(o.Ch) {
		toSerialize["ch"] = o.Ch
	}
	if !IsNil(o.Da) {
		toSerialize["da"] = o.Da
	}
	if !IsNil(o.La) {
		toSerialize["la"] = o.La
	}
	if !IsNil(o.Ny) {
		toSerialize["ny"] = o.Ny
	}
	if !IsNil(o.Sg) {
		toSerialize["sg"] = o.Sg
	}
	if !IsNil(o.Sv) {
		toSerialize["sv"] = o.Sv
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpotMarketPricesPerMetroReport) UnmarshalJSON(data []byte) (err error) {
	varSpotMarketPricesPerMetroReport := _SpotMarketPricesPerMetroReport{}

	err = json.Unmarshal(data, &varSpotMarketPricesPerMetroReport)

	if err != nil {
		return err
	}

	*o = SpotMarketPricesPerMetroReport(varSpotMarketPricesPerMetroReport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "am")
		delete(additionalProperties, "ch")
		delete(additionalProperties, "da")
		delete(additionalProperties, "la")
		delete(additionalProperties, "ny")
		delete(additionalProperties, "sg")
		delete(additionalProperties, "sv")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpotMarketPricesPerMetroReport struct {
	value *SpotMarketPricesPerMetroReport
	isSet bool
}

func (v NullableSpotMarketPricesPerMetroReport) Get() *SpotMarketPricesPerMetroReport {
	return v.value
}

func (v *NullableSpotMarketPricesPerMetroReport) Set(val *SpotMarketPricesPerMetroReport) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotMarketPricesPerMetroReport) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotMarketPricesPerMetroReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotMarketPricesPerMetroReport(val *SpotMarketPricesPerMetroReport) *NullableSpotMarketPricesPerMetroReport {
	return &NullableSpotMarketPricesPerMetroReport{value: val, isSet: true}
}

func (v NullableSpotMarketPricesPerMetroReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotMarketPricesPerMetroReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
