/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VrfRouteUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfRouteUpdateInput{}

// VrfRouteUpdateInput struct for VrfRouteUpdateInput
type VrfRouteUpdateInput struct {
	// The IPv4 prefix for the route, in CIDR-style notation. For a static default route, this will always be \"0.0.0.0/0\"
	Prefix *string `json:"prefix,omitempty"`
	// The IPv4 address within the VRF of the host that will handle this route
	NextHop              *string  `json:"next_hop,omitempty"`
	Tags                 []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfRouteUpdateInput VrfRouteUpdateInput

// NewVrfRouteUpdateInput instantiates a new VrfRouteUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfRouteUpdateInput() *VrfRouteUpdateInput {
	this := VrfRouteUpdateInput{}
	return &this
}

// NewVrfRouteUpdateInputWithDefaults instantiates a new VrfRouteUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfRouteUpdateInputWithDefaults() *VrfRouteUpdateInput {
	this := VrfRouteUpdateInput{}
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VrfRouteUpdateInput) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRouteUpdateInput) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VrfRouteUpdateInput) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *VrfRouteUpdateInput) SetPrefix(v string) {
	o.Prefix = &v
}

// GetNextHop returns the NextHop field value if set, zero value otherwise.
func (o *VrfRouteUpdateInput) GetNextHop() string {
	if o == nil || IsNil(o.NextHop) {
		var ret string
		return ret
	}
	return *o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRouteUpdateInput) GetNextHopOk() (*string, bool) {
	if o == nil || IsNil(o.NextHop) {
		return nil, false
	}
	return o.NextHop, true
}

// HasNextHop returns a boolean if a field has been set.
func (o *VrfRouteUpdateInput) HasNextHop() bool {
	if o != nil && !IsNil(o.NextHop) {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given string and assigns it to the NextHop field.
func (o *VrfRouteUpdateInput) SetNextHop(v string) {
	o.NextHop = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VrfRouteUpdateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfRouteUpdateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VrfRouteUpdateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VrfRouteUpdateInput) SetTags(v []string) {
	o.Tags = v
}

func (o VrfRouteUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfRouteUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.NextHop) {
		toSerialize["next_hop"] = o.NextHop
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfRouteUpdateInput) UnmarshalJSON(data []byte) (err error) {
	varVrfRouteUpdateInput := _VrfRouteUpdateInput{}

	err = json.Unmarshal(data, &varVrfRouteUpdateInput)

	if err != nil {
		return err
	}

	*o = VrfRouteUpdateInput(varVrfRouteUpdateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "next_hop")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfRouteUpdateInput struct {
	value *VrfRouteUpdateInput
	isSet bool
}

func (v NullableVrfRouteUpdateInput) Get() *VrfRouteUpdateInput {
	return v.value
}

func (v *NullableVrfRouteUpdateInput) Set(val *VrfRouteUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfRouteUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfRouteUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfRouteUpdateInput(val *VrfRouteUpdateInput) *NullableVrfRouteUpdateInput {
	return &NullableVrfRouteUpdateInput{value: val, isSet: true}
}

func (v NullableVrfRouteUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfRouteUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
