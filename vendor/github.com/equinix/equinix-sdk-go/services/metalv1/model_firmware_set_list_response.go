/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the FirmwareSetListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirmwareSetListResponse{}

// FirmwareSetListResponse Represents collection of Firmware Sets
type FirmwareSetListResponse struct {
	// Max number of items returned in a page
	PageSize *int32 `json:"page_size,omitempty"`
	// Page returned
	Page *int32 `json:"page,omitempty"`
	// Items returned in current page
	PageCount *int32 `json:"page_count,omitempty"`
	// Total count of pages
	TotalPages *int32 `json:"total_pages,omitempty"`
	// Total count of items
	TotalRecordCount *int32 `json:"total_record_count,omitempty"`
	// Represents a list of FirmwareSets
	Records              []FirmwareSet `json:"records,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirmwareSetListResponse FirmwareSetListResponse

// NewFirmwareSetListResponse instantiates a new FirmwareSetListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareSetListResponse() *FirmwareSetListResponse {
	this := FirmwareSetListResponse{}
	return &this
}

// NewFirmwareSetListResponseWithDefaults instantiates a new FirmwareSetListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareSetListResponseWithDefaults() *FirmwareSetListResponse {
	this := FirmwareSetListResponse{}
	return &this
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *FirmwareSetListResponse) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareSetListResponse) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *FirmwareSetListResponse) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *FirmwareSetListResponse) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *FirmwareSetListResponse) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareSetListResponse) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *FirmwareSetListResponse) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *FirmwareSetListResponse) SetPage(v int32) {
	o.Page = &v
}

// GetPageCount returns the PageCount field value if set, zero value otherwise.
func (o *FirmwareSetListResponse) GetPageCount() int32 {
	if o == nil || IsNil(o.PageCount) {
		var ret int32
		return ret
	}
	return *o.PageCount
}

// GetPageCountOk returns a tuple with the PageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareSetListResponse) GetPageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PageCount) {
		return nil, false
	}
	return o.PageCount, true
}

// HasPageCount returns a boolean if a field has been set.
func (o *FirmwareSetListResponse) HasPageCount() bool {
	if o != nil && !IsNil(o.PageCount) {
		return true
	}

	return false
}

// SetPageCount gets a reference to the given int32 and assigns it to the PageCount field.
func (o *FirmwareSetListResponse) SetPageCount(v int32) {
	o.PageCount = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *FirmwareSetListResponse) GetTotalPages() int32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareSetListResponse) GetTotalPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *FirmwareSetListResponse) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *FirmwareSetListResponse) SetTotalPages(v int32) {
	o.TotalPages = &v
}

// GetTotalRecordCount returns the TotalRecordCount field value if set, zero value otherwise.
func (o *FirmwareSetListResponse) GetTotalRecordCount() int32 {
	if o == nil || IsNil(o.TotalRecordCount) {
		var ret int32
		return ret
	}
	return *o.TotalRecordCount
}

// GetTotalRecordCountOk returns a tuple with the TotalRecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareSetListResponse) GetTotalRecordCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRecordCount) {
		return nil, false
	}
	return o.TotalRecordCount, true
}

// HasTotalRecordCount returns a boolean if a field has been set.
func (o *FirmwareSetListResponse) HasTotalRecordCount() bool {
	if o != nil && !IsNil(o.TotalRecordCount) {
		return true
	}

	return false
}

// SetTotalRecordCount gets a reference to the given int32 and assigns it to the TotalRecordCount field.
func (o *FirmwareSetListResponse) SetTotalRecordCount(v int32) {
	o.TotalRecordCount = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *FirmwareSetListResponse) GetRecords() []FirmwareSet {
	if o == nil || IsNil(o.Records) {
		var ret []FirmwareSet
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareSetListResponse) GetRecordsOk() ([]FirmwareSet, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *FirmwareSetListResponse) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []FirmwareSet and assigns it to the Records field.
func (o *FirmwareSetListResponse) SetRecords(v []FirmwareSet) {
	o.Records = v
}

func (o FirmwareSetListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirmwareSetListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PageSize) {
		toSerialize["page_size"] = o.PageSize
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.PageCount) {
		toSerialize["page_count"] = o.PageCount
	}
	if !IsNil(o.TotalPages) {
		toSerialize["total_pages"] = o.TotalPages
	}
	if !IsNil(o.TotalRecordCount) {
		toSerialize["total_record_count"] = o.TotalRecordCount
	}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirmwareSetListResponse) UnmarshalJSON(data []byte) (err error) {
	varFirmwareSetListResponse := _FirmwareSetListResponse{}

	err = json.Unmarshal(data, &varFirmwareSetListResponse)

	if err != nil {
		return err
	}

	*o = FirmwareSetListResponse(varFirmwareSetListResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "page_size")
		delete(additionalProperties, "page")
		delete(additionalProperties, "page_count")
		delete(additionalProperties, "total_pages")
		delete(additionalProperties, "total_record_count")
		delete(additionalProperties, "records")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareSetListResponse struct {
	value *FirmwareSetListResponse
	isSet bool
}

func (v NullableFirmwareSetListResponse) Get() *FirmwareSetListResponse {
	return v.value
}

func (v *NullableFirmwareSetListResponse) Set(val *FirmwareSetListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareSetListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareSetListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareSetListResponse(val *FirmwareSetListResponse) *NullableFirmwareSetListResponse {
	return &NullableFirmwareSetListResponse{value: val, isSet: true}
}

func (v NullableFirmwareSetListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareSetListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
