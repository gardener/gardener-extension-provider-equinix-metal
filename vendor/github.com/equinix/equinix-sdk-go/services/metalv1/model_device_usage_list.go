/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the DeviceUsageList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceUsageList{}

// DeviceUsageList struct for DeviceUsageList
type DeviceUsageList struct {
	Usages               []DeviceUsage `json:"usages,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceUsageList DeviceUsageList

// NewDeviceUsageList instantiates a new DeviceUsageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUsageList() *DeviceUsageList {
	this := DeviceUsageList{}
	return &this
}

// NewDeviceUsageListWithDefaults instantiates a new DeviceUsageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUsageListWithDefaults() *DeviceUsageList {
	this := DeviceUsageList{}
	return &this
}

// GetUsages returns the Usages field value if set, zero value otherwise.
func (o *DeviceUsageList) GetUsages() []DeviceUsage {
	if o == nil || IsNil(o.Usages) {
		var ret []DeviceUsage
		return ret
	}
	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUsageList) GetUsagesOk() ([]DeviceUsage, bool) {
	if o == nil || IsNil(o.Usages) {
		return nil, false
	}
	return o.Usages, true
}

// HasUsages returns a boolean if a field has been set.
func (o *DeviceUsageList) HasUsages() bool {
	if o != nil && !IsNil(o.Usages) {
		return true
	}

	return false
}

// SetUsages gets a reference to the given []DeviceUsage and assigns it to the Usages field.
func (o *DeviceUsageList) SetUsages(v []DeviceUsage) {
	o.Usages = v
}

func (o DeviceUsageList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceUsageList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usages) {
		toSerialize["usages"] = o.Usages
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceUsageList) UnmarshalJSON(data []byte) (err error) {
	varDeviceUsageList := _DeviceUsageList{}

	err = json.Unmarshal(data, &varDeviceUsageList)

	if err != nil {
		return err
	}

	*o = DeviceUsageList(varDeviceUsageList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "usages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceUsageList struct {
	value *DeviceUsageList
	isSet bool
}

func (v NullableDeviceUsageList) Get() *DeviceUsageList {
	return v.value
}

func (v *NullableDeviceUsageList) Set(val *DeviceUsageList) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUsageList) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUsageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUsageList(val *DeviceUsageList) *NullableDeviceUsageList {
	return &NullableDeviceUsageList{value: val, isSet: true}
}

func (v NullableDeviceUsageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUsageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
