/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the IPAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPAddress{}

// IPAddress struct for IPAddress
type IPAddress struct {
	AddressFamily *IPAddressAddressFamily `json:"address_family,omitempty"`
	// Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)
	Cidr *int32 `json:"cidr,omitempty"`
	// UUIDs of any IP reservations to use when assigning IPs
	IpReservations []string `json:"ip_reservations,omitempty"`
	// Address Type for IP Address
	Public               *bool `json:"public,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IPAddress IPAddress

// NewIPAddress instantiates a new IPAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPAddress() *IPAddress {
	this := IPAddress{}
	var public bool = true
	this.Public = &public
	return &this
}

// NewIPAddressWithDefaults instantiates a new IPAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPAddressWithDefaults() *IPAddress {
	this := IPAddress{}
	var public bool = true
	this.Public = &public
	return &this
}

// GetAddressFamily returns the AddressFamily field value if set, zero value otherwise.
func (o *IPAddress) GetAddressFamily() IPAddressAddressFamily {
	if o == nil || IsNil(o.AddressFamily) {
		var ret IPAddressAddressFamily
		return ret
	}
	return *o.AddressFamily
}

// GetAddressFamilyOk returns a tuple with the AddressFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetAddressFamilyOk() (*IPAddressAddressFamily, bool) {
	if o == nil || IsNil(o.AddressFamily) {
		return nil, false
	}
	return o.AddressFamily, true
}

// HasAddressFamily returns a boolean if a field has been set.
func (o *IPAddress) HasAddressFamily() bool {
	if o != nil && !IsNil(o.AddressFamily) {
		return true
	}

	return false
}

// SetAddressFamily gets a reference to the given IPAddressAddressFamily and assigns it to the AddressFamily field.
func (o *IPAddress) SetAddressFamily(v IPAddressAddressFamily) {
	o.AddressFamily = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *IPAddress) GetCidr() int32 {
	if o == nil || IsNil(o.Cidr) {
		var ret int32
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetCidrOk() (*int32, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *IPAddress) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given int32 and assigns it to the Cidr field.
func (o *IPAddress) SetCidr(v int32) {
	o.Cidr = &v
}

// GetIpReservations returns the IpReservations field value if set, zero value otherwise.
func (o *IPAddress) GetIpReservations() []string {
	if o == nil || IsNil(o.IpReservations) {
		var ret []string
		return ret
	}
	return o.IpReservations
}

// GetIpReservationsOk returns a tuple with the IpReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetIpReservationsOk() ([]string, bool) {
	if o == nil || IsNil(o.IpReservations) {
		return nil, false
	}
	return o.IpReservations, true
}

// HasIpReservations returns a boolean if a field has been set.
func (o *IPAddress) HasIpReservations() bool {
	if o != nil && !IsNil(o.IpReservations) {
		return true
	}

	return false
}

// SetIpReservations gets a reference to the given []string and assigns it to the IpReservations field.
func (o *IPAddress) SetIpReservations(v []string) {
	o.IpReservations = v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *IPAddress) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *IPAddress) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *IPAddress) SetPublic(v bool) {
	o.Public = &v
}

func (o IPAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressFamily) {
		toSerialize["address_family"] = o.AddressFamily
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.IpReservations) {
		toSerialize["ip_reservations"] = o.IpReservations
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IPAddress) UnmarshalJSON(data []byte) (err error) {
	varIPAddress := _IPAddress{}

	err = json.Unmarshal(data, &varIPAddress)

	if err != nil {
		return err
	}

	*o = IPAddress(varIPAddress)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address_family")
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "ip_reservations")
		delete(additionalProperties, "public")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIPAddress struct {
	value *IPAddress
	isSet bool
}

func (v NullableIPAddress) Get() *IPAddress {
	return v.value
}

func (v *NullableIPAddress) Set(val *IPAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAddress(val *IPAddress) *NullableIPAddress {
	return &NullableIPAddress{value: val, isSet: true}
}

func (v NullableIPAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
