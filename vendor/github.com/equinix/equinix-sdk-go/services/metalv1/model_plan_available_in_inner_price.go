/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the PlanAvailableInInnerPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanAvailableInInnerPrice{}

// PlanAvailableInInnerPrice struct for PlanAvailableInInnerPrice
type PlanAvailableInInnerPrice struct {
	Hour                 *float64 `json:"hour,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlanAvailableInInnerPrice PlanAvailableInInnerPrice

// NewPlanAvailableInInnerPrice instantiates a new PlanAvailableInInnerPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanAvailableInInnerPrice() *PlanAvailableInInnerPrice {
	this := PlanAvailableInInnerPrice{}
	return &this
}

// NewPlanAvailableInInnerPriceWithDefaults instantiates a new PlanAvailableInInnerPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanAvailableInInnerPriceWithDefaults() *PlanAvailableInInnerPrice {
	this := PlanAvailableInInnerPrice{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *PlanAvailableInInnerPrice) GetHour() float64 {
	if o == nil || IsNil(o.Hour) {
		var ret float64
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanAvailableInInnerPrice) GetHourOk() (*float64, bool) {
	if o == nil || IsNil(o.Hour) {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *PlanAvailableInInnerPrice) HasHour() bool {
	if o != nil && !IsNil(o.Hour) {
		return true
	}

	return false
}

// SetHour gets a reference to the given float64 and assigns it to the Hour field.
func (o *PlanAvailableInInnerPrice) SetHour(v float64) {
	o.Hour = &v
}

func (o PlanAvailableInInnerPrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanAvailableInInnerPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hour) {
		toSerialize["hour"] = o.Hour
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanAvailableInInnerPrice) UnmarshalJSON(data []byte) (err error) {
	varPlanAvailableInInnerPrice := _PlanAvailableInInnerPrice{}

	err = json.Unmarshal(data, &varPlanAvailableInInnerPrice)

	if err != nil {
		return err
	}

	*o = PlanAvailableInInnerPrice(varPlanAvailableInInnerPrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hour")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanAvailableInInnerPrice struct {
	value *PlanAvailableInInnerPrice
	isSet bool
}

func (v NullablePlanAvailableInInnerPrice) Get() *PlanAvailableInInnerPrice {
	return v.value
}

func (v *NullablePlanAvailableInInnerPrice) Set(val *PlanAvailableInInnerPrice) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanAvailableInInnerPrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanAvailableInInnerPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanAvailableInInnerPrice(val *PlanAvailableInInnerPrice) *NullablePlanAvailableInInnerPrice {
	return &NullablePlanAvailableInInnerPrice{value: val, isSet: true}
}

func (v NullablePlanAvailableInInnerPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanAvailableInInnerPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
