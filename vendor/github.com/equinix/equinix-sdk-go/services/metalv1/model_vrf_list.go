/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VrfList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfList{}

// VrfList struct for VrfList
type VrfList struct {
	Meta                 *Meta `json:"meta,omitempty"`
	Vrfs                 []Vrf `json:"vrfs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfList VrfList

// NewVrfList instantiates a new VrfList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfList() *VrfList {
	this := VrfList{}
	return &this
}

// NewVrfListWithDefaults instantiates a new VrfList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfListWithDefaults() *VrfList {
	this := VrfList{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *VrfList) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfList) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *VrfList) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *VrfList) SetMeta(v Meta) {
	o.Meta = &v
}

// GetVrfs returns the Vrfs field value if set, zero value otherwise.
func (o *VrfList) GetVrfs() []Vrf {
	if o == nil || IsNil(o.Vrfs) {
		var ret []Vrf
		return ret
	}
	return o.Vrfs
}

// GetVrfsOk returns a tuple with the Vrfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfList) GetVrfsOk() ([]Vrf, bool) {
	if o == nil || IsNil(o.Vrfs) {
		return nil, false
	}
	return o.Vrfs, true
}

// HasVrfs returns a boolean if a field has been set.
func (o *VrfList) HasVrfs() bool {
	if o != nil && !IsNil(o.Vrfs) {
		return true
	}

	return false
}

// SetVrfs gets a reference to the given []Vrf and assigns it to the Vrfs field.
func (o *VrfList) SetVrfs(v []Vrf) {
	o.Vrfs = v
}

func (o VrfList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Vrfs) {
		toSerialize["vrfs"] = o.Vrfs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfList) UnmarshalJSON(data []byte) (err error) {
	varVrfList := _VrfList{}

	err = json.Unmarshal(data, &varVrfList)

	if err != nil {
		return err
	}

	*o = VrfList(varVrfList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "meta")
		delete(additionalProperties, "vrfs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfList struct {
	value *VrfList
	isSet bool
}

func (v NullableVrfList) Get() *VrfList {
	return v.value
}

func (v *NullableVrfList) Set(val *VrfList) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfList) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfList(val *VrfList) *NullableVrfList {
	return &NullableVrfList{value: val, isSet: true}
}

func (v NullableVrfList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
