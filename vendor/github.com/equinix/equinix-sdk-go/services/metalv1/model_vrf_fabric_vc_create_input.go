/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// checks if the VrfFabricVcCreateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfFabricVcCreateInput{}

// VrfFabricVcCreateInput struct for VrfFabricVcCreateInput
type VrfFabricVcCreateInput struct {
	// The preferred email used for communication and notifications about the Equinix Fabric interconnection. Optional and defaults to the primary user email address when using a User API key or the organization owner email address when using a Project API key.
	ContactEmail *string `json:"contact_email,omitempty"`
	Description  *string `json:"description,omitempty"`
	FacilityId   *string `json:"facility_id,omitempty"`
	// A Metro ID or code. When creating Fabric VCs (Metal Billed), this is where interconnection will be originating from, as we pre-authorize the use of one of our shared ports as the origin of the interconnection using A-Side service tokens. We only allow local connections for Fabric VCs (Metal Billed), so the destination location must be the same as the origin. For Fabric VCs (Fabric Billed), or shared connections, this will be the destination of the interconnection. We allow remote connections for Fabric VCs (Fabric Billed), so the origin of the interconnection can be a different metro set here.
	Metro   string  `json:"metro"`
	Name    string  `json:"name"`
	Project *string `json:"project,omitempty"`
	// Either 'primary' or 'redundant'.
	Redundancy       string                                  `json:"redundancy"`
	ServiceTokenType VlanFabricVcCreateInputServiceTokenType `json:"service_token_type"`
	// A interconnection speed, in bps, mbps, or gbps. For Fabric VCs, this represents the maximum speed of the interconnection. For Fabric VCs (Metal Billed), this can only be one of the following:  ''50mbps'', ''200mbps'', ''500mbps'', ''1gbps'', ''2gbps'', ''5gbps'' or ''10gbps'', and is required for creation. For Fabric VCs (Fabric Billed), this field will always default to ''10gbps'' even if it is not provided. For example, ''500000000'', ''50m'', or' ''500mbps'' will all work as valid inputs.
	Speed *string                     `json:"speed,omitempty"`
	Tags  []string                    `json:"tags,omitempty"`
	Type  VlanFabricVcCreateInputType `json:"type"`
	// This field holds a list of VRF UUIDs that will be set automatically on the virtual circuits of Fabric VCs on creation, and can hold up to two UUIDs. Two UUIDs are required when requesting redundant Fabric VCs. The first UUID will be set on the primary virtual circuit, while the second UUID will be set on the secondary. The two UUIDs can be the same if both the primary and secondary virtual circuits will be in the same VRF. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.
	Vrfs                 []string `json:"vrfs"`
	AdditionalProperties map[string]interface{}
}

type _VrfFabricVcCreateInput VrfFabricVcCreateInput

// NewVrfFabricVcCreateInput instantiates a new VrfFabricVcCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfFabricVcCreateInput(metro string, name string, redundancy string, serviceTokenType VlanFabricVcCreateInputServiceTokenType, type_ VlanFabricVcCreateInputType, vrfs []string) *VrfFabricVcCreateInput {
	this := VrfFabricVcCreateInput{}
	this.Metro = metro
	this.Name = name
	this.Redundancy = redundancy
	this.ServiceTokenType = serviceTokenType
	this.Type = type_
	this.Vrfs = vrfs
	return &this
}

// NewVrfFabricVcCreateInputWithDefaults instantiates a new VrfFabricVcCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfFabricVcCreateInputWithDefaults() *VrfFabricVcCreateInput {
	this := VrfFabricVcCreateInput{}
	return &this
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *VrfFabricVcCreateInput) GetContactEmail() string {
	if o == nil || IsNil(o.ContactEmail) {
		var ret string
		return ret
	}
	return *o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetContactEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmail) {
		return nil, false
	}
	return o.ContactEmail, true
}

// HasContactEmail returns a boolean if a field has been set.
func (o *VrfFabricVcCreateInput) HasContactEmail() bool {
	if o != nil && !IsNil(o.ContactEmail) {
		return true
	}

	return false
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *VrfFabricVcCreateInput) SetContactEmail(v string) {
	o.ContactEmail = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VrfFabricVcCreateInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VrfFabricVcCreateInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VrfFabricVcCreateInput) SetDescription(v string) {
	o.Description = &v
}

// GetFacilityId returns the FacilityId field value if set, zero value otherwise.
func (o *VrfFabricVcCreateInput) GetFacilityId() string {
	if o == nil || IsNil(o.FacilityId) {
		var ret string
		return ret
	}
	return *o.FacilityId
}

// GetFacilityIdOk returns a tuple with the FacilityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetFacilityIdOk() (*string, bool) {
	if o == nil || IsNil(o.FacilityId) {
		return nil, false
	}
	return o.FacilityId, true
}

// HasFacilityId returns a boolean if a field has been set.
func (o *VrfFabricVcCreateInput) HasFacilityId() bool {
	if o != nil && !IsNil(o.FacilityId) {
		return true
	}

	return false
}

// SetFacilityId gets a reference to the given string and assigns it to the FacilityId field.
func (o *VrfFabricVcCreateInput) SetFacilityId(v string) {
	o.FacilityId = &v
}

// GetMetro returns the Metro field value
func (o *VrfFabricVcCreateInput) GetMetro() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metro
}

// GetMetroOk returns a tuple with the Metro field value
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetMetroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metro, true
}

// SetMetro sets field value
func (o *VrfFabricVcCreateInput) SetMetro(v string) {
	o.Metro = v
}

// GetName returns the Name field value
func (o *VrfFabricVcCreateInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VrfFabricVcCreateInput) SetName(v string) {
	o.Name = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *VrfFabricVcCreateInput) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *VrfFabricVcCreateInput) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *VrfFabricVcCreateInput) SetProject(v string) {
	o.Project = &v
}

// GetRedundancy returns the Redundancy field value
func (o *VrfFabricVcCreateInput) GetRedundancy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetRedundancyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Redundancy, true
}

// SetRedundancy sets field value
func (o *VrfFabricVcCreateInput) SetRedundancy(v string) {
	o.Redundancy = v
}

// GetServiceTokenType returns the ServiceTokenType field value
func (o *VrfFabricVcCreateInput) GetServiceTokenType() VlanFabricVcCreateInputServiceTokenType {
	if o == nil {
		var ret VlanFabricVcCreateInputServiceTokenType
		return ret
	}

	return o.ServiceTokenType
}

// GetServiceTokenTypeOk returns a tuple with the ServiceTokenType field value
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetServiceTokenTypeOk() (*VlanFabricVcCreateInputServiceTokenType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceTokenType, true
}

// SetServiceTokenType sets field value
func (o *VrfFabricVcCreateInput) SetServiceTokenType(v VlanFabricVcCreateInputServiceTokenType) {
	o.ServiceTokenType = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *VrfFabricVcCreateInput) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *VrfFabricVcCreateInput) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *VrfFabricVcCreateInput) SetSpeed(v string) {
	o.Speed = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VrfFabricVcCreateInput) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VrfFabricVcCreateInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VrfFabricVcCreateInput) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *VrfFabricVcCreateInput) GetType() VlanFabricVcCreateInputType {
	if o == nil {
		var ret VlanFabricVcCreateInputType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetTypeOk() (*VlanFabricVcCreateInputType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VrfFabricVcCreateInput) SetType(v VlanFabricVcCreateInputType) {
	o.Type = v
}

// GetVrfs returns the Vrfs field value
func (o *VrfFabricVcCreateInput) GetVrfs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Vrfs
}

// GetVrfsOk returns a tuple with the Vrfs field value
// and a boolean to check if the value has been set.
func (o *VrfFabricVcCreateInput) GetVrfsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vrfs, true
}

// SetVrfs sets field value
func (o *VrfFabricVcCreateInput) SetVrfs(v []string) {
	o.Vrfs = v
}

func (o VrfFabricVcCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfFabricVcCreateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactEmail) {
		toSerialize["contact_email"] = o.ContactEmail
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FacilityId) {
		toSerialize["facility_id"] = o.FacilityId
	}
	toSerialize["metro"] = o.Metro
	toSerialize["name"] = o.Name
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	toSerialize["redundancy"] = o.Redundancy
	toSerialize["service_token_type"] = o.ServiceTokenType
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	toSerialize["vrfs"] = o.Vrfs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfFabricVcCreateInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metro",
		"name",
		"redundancy",
		"service_token_type",
		"type",
		"vrfs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVrfFabricVcCreateInput := _VrfFabricVcCreateInput{}

	err = json.Unmarshal(data, &varVrfFabricVcCreateInput)

	if err != nil {
		return err
	}

	*o = VrfFabricVcCreateInput(varVrfFabricVcCreateInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contact_email")
		delete(additionalProperties, "description")
		delete(additionalProperties, "facility_id")
		delete(additionalProperties, "metro")
		delete(additionalProperties, "name")
		delete(additionalProperties, "project")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "service_token_type")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vrfs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfFabricVcCreateInput struct {
	value *VrfFabricVcCreateInput
	isSet bool
}

func (v NullableVrfFabricVcCreateInput) Get() *VrfFabricVcCreateInput {
	return v.value
}

func (v *NullableVrfFabricVcCreateInput) Set(val *VrfFabricVcCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfFabricVcCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfFabricVcCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfFabricVcCreateInput(val *VrfFabricVcCreateInput) *NullableVrfFabricVcCreateInput {
	return &NullableVrfFabricVcCreateInput{value: val, isSet: true}
}

func (v NullableVrfFabricVcCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfFabricVcCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
