/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"time"
)

// checks if the IPAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPAssignment{}

// IPAssignment struct for IPAssignment
type IPAssignment struct {
	Address       *string            `json:"address,omitempty"`
	AddressFamily *int32             `json:"address_family,omitempty"`
	AssignedTo    *Href              `json:"assigned_to,omitempty"`
	Cidr          *int32             `json:"cidr,omitempty"`
	CreatedAt     *time.Time         `json:"created_at,omitempty"`
	Enabled       *bool              `json:"enabled,omitempty"`
	Gateway       *string            `json:"gateway,omitempty"`
	GlobalIp      *bool              `json:"global_ip,omitempty"`
	Href          *string            `json:"href,omitempty"`
	Id            *string            `json:"id,omitempty"`
	Manageable    *bool              `json:"manageable,omitempty"`
	Management    *bool              `json:"management,omitempty"`
	Metro         *IPAssignmentMetro `json:"metro,omitempty"`
	Netmask       *string            `json:"netmask,omitempty"`
	Network       *string            `json:"network,omitempty"`
	ParentBlock   *ParentBlock       `json:"parent_block,omitempty"`
	Public        *bool              `json:"public,omitempty"`
	State         *IPAssignmentState `json:"state,omitempty"`
	// Only set when this is a Metal Gateway Elastic IP Assignment.  The IP address within the Metal Gateway to which requests to the Elastic IP are forwarded.
	NextHop              *string           `json:"next_hop,omitempty"`
	Type                 *IPAssignmentType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IPAssignment IPAssignment

// NewIPAssignment instantiates a new IPAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPAssignment() *IPAssignment {
	this := IPAssignment{}
	return &this
}

// NewIPAssignmentWithDefaults instantiates a new IPAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPAssignmentWithDefaults() *IPAssignment {
	this := IPAssignment{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *IPAssignment) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IPAssignment) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *IPAssignment) SetAddress(v string) {
	o.Address = &v
}

// GetAddressFamily returns the AddressFamily field value if set, zero value otherwise.
func (o *IPAssignment) GetAddressFamily() int32 {
	if o == nil || IsNil(o.AddressFamily) {
		var ret int32
		return ret
	}
	return *o.AddressFamily
}

// GetAddressFamilyOk returns a tuple with the AddressFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetAddressFamilyOk() (*int32, bool) {
	if o == nil || IsNil(o.AddressFamily) {
		return nil, false
	}
	return o.AddressFamily, true
}

// HasAddressFamily returns a boolean if a field has been set.
func (o *IPAssignment) HasAddressFamily() bool {
	if o != nil && !IsNil(o.AddressFamily) {
		return true
	}

	return false
}

// SetAddressFamily gets a reference to the given int32 and assigns it to the AddressFamily field.
func (o *IPAssignment) SetAddressFamily(v int32) {
	o.AddressFamily = &v
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *IPAssignment) GetAssignedTo() Href {
	if o == nil || IsNil(o.AssignedTo) {
		var ret Href
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetAssignedToOk() (*Href, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *IPAssignment) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given Href and assigns it to the AssignedTo field.
func (o *IPAssignment) SetAssignedTo(v Href) {
	o.AssignedTo = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *IPAssignment) GetCidr() int32 {
	if o == nil || IsNil(o.Cidr) {
		var ret int32
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetCidrOk() (*int32, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *IPAssignment) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given int32 and assigns it to the Cidr field.
func (o *IPAssignment) SetCidr(v int32) {
	o.Cidr = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IPAssignment) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IPAssignment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IPAssignment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IPAssignment) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IPAssignment) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IPAssignment) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *IPAssignment) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *IPAssignment) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *IPAssignment) SetGateway(v string) {
	o.Gateway = &v
}

// GetGlobalIp returns the GlobalIp field value if set, zero value otherwise.
func (o *IPAssignment) GetGlobalIp() bool {
	if o == nil || IsNil(o.GlobalIp) {
		var ret bool
		return ret
	}
	return *o.GlobalIp
}

// GetGlobalIpOk returns a tuple with the GlobalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetGlobalIpOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalIp) {
		return nil, false
	}
	return o.GlobalIp, true
}

// HasGlobalIp returns a boolean if a field has been set.
func (o *IPAssignment) HasGlobalIp() bool {
	if o != nil && !IsNil(o.GlobalIp) {
		return true
	}

	return false
}

// SetGlobalIp gets a reference to the given bool and assigns it to the GlobalIp field.
func (o *IPAssignment) SetGlobalIp(v bool) {
	o.GlobalIp = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *IPAssignment) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *IPAssignment) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *IPAssignment) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IPAssignment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IPAssignment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IPAssignment) SetId(v string) {
	o.Id = &v
}

// GetManageable returns the Manageable field value if set, zero value otherwise.
func (o *IPAssignment) GetManageable() bool {
	if o == nil || IsNil(o.Manageable) {
		var ret bool
		return ret
	}
	return *o.Manageable
}

// GetManageableOk returns a tuple with the Manageable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetManageableOk() (*bool, bool) {
	if o == nil || IsNil(o.Manageable) {
		return nil, false
	}
	return o.Manageable, true
}

// HasManageable returns a boolean if a field has been set.
func (o *IPAssignment) HasManageable() bool {
	if o != nil && !IsNil(o.Manageable) {
		return true
	}

	return false
}

// SetManageable gets a reference to the given bool and assigns it to the Manageable field.
func (o *IPAssignment) SetManageable(v bool) {
	o.Manageable = &v
}

// GetManagement returns the Management field value if set, zero value otherwise.
func (o *IPAssignment) GetManagement() bool {
	if o == nil || IsNil(o.Management) {
		var ret bool
		return ret
	}
	return *o.Management
}

// GetManagementOk returns a tuple with the Management field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.Management) {
		return nil, false
	}
	return o.Management, true
}

// HasManagement returns a boolean if a field has been set.
func (o *IPAssignment) HasManagement() bool {
	if o != nil && !IsNil(o.Management) {
		return true
	}

	return false
}

// SetManagement gets a reference to the given bool and assigns it to the Management field.
func (o *IPAssignment) SetManagement(v bool) {
	o.Management = &v
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *IPAssignment) GetMetro() IPAssignmentMetro {
	if o == nil || IsNil(o.Metro) {
		var ret IPAssignmentMetro
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetMetroOk() (*IPAssignmentMetro, bool) {
	if o == nil || IsNil(o.Metro) {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *IPAssignment) HasMetro() bool {
	if o != nil && !IsNil(o.Metro) {
		return true
	}

	return false
}

// SetMetro gets a reference to the given IPAssignmentMetro and assigns it to the Metro field.
func (o *IPAssignment) SetMetro(v IPAssignmentMetro) {
	o.Metro = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *IPAssignment) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *IPAssignment) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *IPAssignment) SetNetmask(v string) {
	o.Netmask = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *IPAssignment) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *IPAssignment) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *IPAssignment) SetNetwork(v string) {
	o.Network = &v
}

// GetParentBlock returns the ParentBlock field value if set, zero value otherwise.
func (o *IPAssignment) GetParentBlock() ParentBlock {
	if o == nil || IsNil(o.ParentBlock) {
		var ret ParentBlock
		return ret
	}
	return *o.ParentBlock
}

// GetParentBlockOk returns a tuple with the ParentBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetParentBlockOk() (*ParentBlock, bool) {
	if o == nil || IsNil(o.ParentBlock) {
		return nil, false
	}
	return o.ParentBlock, true
}

// HasParentBlock returns a boolean if a field has been set.
func (o *IPAssignment) HasParentBlock() bool {
	if o != nil && !IsNil(o.ParentBlock) {
		return true
	}

	return false
}

// SetParentBlock gets a reference to the given ParentBlock and assigns it to the ParentBlock field.
func (o *IPAssignment) SetParentBlock(v ParentBlock) {
	o.ParentBlock = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *IPAssignment) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *IPAssignment) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *IPAssignment) SetPublic(v bool) {
	o.Public = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IPAssignment) GetState() IPAssignmentState {
	if o == nil || IsNil(o.State) {
		var ret IPAssignmentState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetStateOk() (*IPAssignmentState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IPAssignment) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given IPAssignmentState and assigns it to the State field.
func (o *IPAssignment) SetState(v IPAssignmentState) {
	o.State = &v
}

// GetNextHop returns the NextHop field value if set, zero value otherwise.
func (o *IPAssignment) GetNextHop() string {
	if o == nil || IsNil(o.NextHop) {
		var ret string
		return ret
	}
	return *o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetNextHopOk() (*string, bool) {
	if o == nil || IsNil(o.NextHop) {
		return nil, false
	}
	return o.NextHop, true
}

// HasNextHop returns a boolean if a field has been set.
func (o *IPAssignment) HasNextHop() bool {
	if o != nil && !IsNil(o.NextHop) {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given string and assigns it to the NextHop field.
func (o *IPAssignment) SetNextHop(v string) {
	o.NextHop = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IPAssignment) GetType() IPAssignmentType {
	if o == nil || IsNil(o.Type) {
		var ret IPAssignmentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAssignment) GetTypeOk() (*IPAssignmentType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IPAssignment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IPAssignmentType and assigns it to the Type field.
func (o *IPAssignment) SetType(v IPAssignmentType) {
	o.Type = &v
}

func (o IPAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.AddressFamily) {
		toSerialize["address_family"] = o.AddressFamily
	}
	if !IsNil(o.AssignedTo) {
		toSerialize["assigned_to"] = o.AssignedTo
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.GlobalIp) {
		toSerialize["global_ip"] = o.GlobalIp
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Manageable) {
		toSerialize["manageable"] = o.Manageable
	}
	if !IsNil(o.Management) {
		toSerialize["management"] = o.Management
	}
	if !IsNil(o.Metro) {
		toSerialize["metro"] = o.Metro
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.ParentBlock) {
		toSerialize["parent_block"] = o.ParentBlock
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.NextHop) {
		toSerialize["next_hop"] = o.NextHop
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IPAssignment) UnmarshalJSON(data []byte) (err error) {
	varIPAssignment := _IPAssignment{}

	err = json.Unmarshal(data, &varIPAssignment)

	if err != nil {
		return err
	}

	*o = IPAssignment(varIPAssignment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "address_family")
		delete(additionalProperties, "assigned_to")
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "global_ip")
		delete(additionalProperties, "href")
		delete(additionalProperties, "id")
		delete(additionalProperties, "manageable")
		delete(additionalProperties, "management")
		delete(additionalProperties, "metro")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "network")
		delete(additionalProperties, "parent_block")
		delete(additionalProperties, "public")
		delete(additionalProperties, "state")
		delete(additionalProperties, "next_hop")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIPAssignment struct {
	value *IPAssignment
	isSet bool
}

func (v NullableIPAssignment) Get() *IPAssignment {
	return v.value
}

func (v *NullableIPAssignment) Set(val *IPAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAssignment(val *IPAssignment) *NullableIPAssignment {
	return &NullableIPAssignment{value: val, isSet: true}
}

func (v NullableIPAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
