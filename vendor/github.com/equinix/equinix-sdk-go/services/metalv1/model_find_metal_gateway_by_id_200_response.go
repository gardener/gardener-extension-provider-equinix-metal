/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindMetalGatewayById200Response - struct for FindMetalGatewayById200Response
type FindMetalGatewayById200Response struct {
	MetalGateway    *MetalGateway
	VrfMetalGateway *VrfMetalGateway
}

// MetalGatewayAsFindMetalGatewayById200Response is a convenience function that returns MetalGateway wrapped in FindMetalGatewayById200Response
func MetalGatewayAsFindMetalGatewayById200Response(v *MetalGateway) FindMetalGatewayById200Response {
	return FindMetalGatewayById200Response{
		MetalGateway: v,
	}
}

// VrfMetalGatewayAsFindMetalGatewayById200Response is a convenience function that returns VrfMetalGateway wrapped in FindMetalGatewayById200Response
func VrfMetalGatewayAsFindMetalGatewayById200Response(v *VrfMetalGateway) FindMetalGatewayById200Response {
	return FindMetalGatewayById200Response{
		VrfMetalGateway: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FindMetalGatewayById200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MetalGateway
	err = newStrictDecoder(data).Decode(&dst.MetalGateway)
	if err == nil {
		jsonMetalGateway, _ := json.Marshal(dst.MetalGateway)
		if string(jsonMetalGateway) == "{}" { // empty struct
			dst.MetalGateway = nil
		} else {
			match++
		}
	} else {
		dst.MetalGateway = nil
	}

	// try to unmarshal data into VrfMetalGateway
	err = newStrictDecoder(data).Decode(&dst.VrfMetalGateway)
	if err == nil {
		jsonVrfMetalGateway, _ := json.Marshal(dst.VrfMetalGateway)
		if string(jsonVrfMetalGateway) == "{}" { // empty struct
			dst.VrfMetalGateway = nil
		} else {
			match++
		}
	} else {
		dst.VrfMetalGateway = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MetalGateway = nil
		dst.VrfMetalGateway = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FindMetalGatewayById200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FindMetalGatewayById200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FindMetalGatewayById200Response) MarshalJSON() ([]byte, error) {
	if src.MetalGateway != nil {
		return json.Marshal(&src.MetalGateway)
	}

	if src.VrfMetalGateway != nil {
		return json.Marshal(&src.VrfMetalGateway)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FindMetalGatewayById200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MetalGateway != nil {
		return obj.MetalGateway
	}

	if obj.VrfMetalGateway != nil {
		return obj.VrfMetalGateway
	}

	// all schemas are nil
	return nil
}

type NullableFindMetalGatewayById200Response struct {
	value *FindMetalGatewayById200Response
	isSet bool
}

func (v NullableFindMetalGatewayById200Response) Get() *FindMetalGatewayById200Response {
	return v.value
}

func (v *NullableFindMetalGatewayById200Response) Set(val *FindMetalGatewayById200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindMetalGatewayById200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindMetalGatewayById200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindMetalGatewayById200Response(val *FindMetalGatewayById200Response) *NullableFindMetalGatewayById200Response {
	return &NullableFindMetalGatewayById200Response{value: val, isSet: true}
}

func (v NullableFindMetalGatewayById200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindMetalGatewayById200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
