/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the InterconnectionPortList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterconnectionPortList{}

// InterconnectionPortList struct for InterconnectionPortList
type InterconnectionPortList struct {
	Ports                []InterconnectionPort `json:"ports,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InterconnectionPortList InterconnectionPortList

// NewInterconnectionPortList instantiates a new InterconnectionPortList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterconnectionPortList() *InterconnectionPortList {
	this := InterconnectionPortList{}
	return &this
}

// NewInterconnectionPortListWithDefaults instantiates a new InterconnectionPortList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterconnectionPortListWithDefaults() *InterconnectionPortList {
	this := InterconnectionPortList{}
	return &this
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *InterconnectionPortList) GetPorts() []InterconnectionPort {
	if o == nil || IsNil(o.Ports) {
		var ret []InterconnectionPort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPortList) GetPortsOk() ([]InterconnectionPort, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *InterconnectionPortList) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []InterconnectionPort and assigns it to the Ports field.
func (o *InterconnectionPortList) SetPorts(v []InterconnectionPort) {
	o.Ports = v
}

func (o InterconnectionPortList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterconnectionPortList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InterconnectionPortList) UnmarshalJSON(data []byte) (err error) {
	varInterconnectionPortList := _InterconnectionPortList{}

	err = json.Unmarshal(data, &varInterconnectionPortList)

	if err != nil {
		return err
	}

	*o = InterconnectionPortList(varInterconnectionPortList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ports")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInterconnectionPortList struct {
	value *InterconnectionPortList
	isSet bool
}

func (v NullableInterconnectionPortList) Get() *InterconnectionPortList {
	return v.value
}

func (v *NullableInterconnectionPortList) Set(val *InterconnectionPortList) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionPortList) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionPortList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionPortList(val *InterconnectionPortList) *NullableInterconnectionPortList {
	return &NullableInterconnectionPortList{value: val, isSet: true}
}

func (v NullableInterconnectionPortList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionPortList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
