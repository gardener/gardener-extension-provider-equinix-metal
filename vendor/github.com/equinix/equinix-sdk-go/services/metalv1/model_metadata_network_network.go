/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the MetadataNetworkNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataNetworkNetwork{}

// MetadataNetworkNetwork struct for MetadataNetworkNetwork
type MetadataNetworkNetwork struct {
	Bonding              *MetadataNetworkNetworkBonding `json:"bonding,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetadataNetworkNetwork MetadataNetworkNetwork

// NewMetadataNetworkNetwork instantiates a new MetadataNetworkNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataNetworkNetwork() *MetadataNetworkNetwork {
	this := MetadataNetworkNetwork{}
	return &this
}

// NewMetadataNetworkNetworkWithDefaults instantiates a new MetadataNetworkNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataNetworkNetworkWithDefaults() *MetadataNetworkNetwork {
	this := MetadataNetworkNetwork{}
	return &this
}

// GetBonding returns the Bonding field value if set, zero value otherwise.
func (o *MetadataNetworkNetwork) GetBonding() MetadataNetworkNetworkBonding {
	if o == nil || IsNil(o.Bonding) {
		var ret MetadataNetworkNetworkBonding
		return ret
	}
	return *o.Bonding
}

// GetBondingOk returns a tuple with the Bonding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataNetworkNetwork) GetBondingOk() (*MetadataNetworkNetworkBonding, bool) {
	if o == nil || IsNil(o.Bonding) {
		return nil, false
	}
	return o.Bonding, true
}

// HasBonding returns a boolean if a field has been set.
func (o *MetadataNetworkNetwork) HasBonding() bool {
	if o != nil && !IsNil(o.Bonding) {
		return true
	}

	return false
}

// SetBonding gets a reference to the given MetadataNetworkNetworkBonding and assigns it to the Bonding field.
func (o *MetadataNetworkNetwork) SetBonding(v MetadataNetworkNetworkBonding) {
	o.Bonding = &v
}

func (o MetadataNetworkNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataNetworkNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bonding) {
		toSerialize["bonding"] = o.Bonding
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetadataNetworkNetwork) UnmarshalJSON(data []byte) (err error) {
	varMetadataNetworkNetwork := _MetadataNetworkNetwork{}

	err = json.Unmarshal(data, &varMetadataNetworkNetwork)

	if err != nil {
		return err
	}

	*o = MetadataNetworkNetwork(varMetadataNetworkNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bonding")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetadataNetworkNetwork struct {
	value *MetadataNetworkNetwork
	isSet bool
}

func (v NullableMetadataNetworkNetwork) Get() *MetadataNetworkNetwork {
	return v.value
}

func (v *NullableMetadataNetworkNetwork) Set(val *MetadataNetworkNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataNetworkNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataNetworkNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataNetworkNetwork(val *MetadataNetworkNetwork) *NullableMetadataNetworkNetwork {
	return &NullableMetadataNetworkNetwork{value: val, isSet: true}
}

func (v NullableMetadataNetworkNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataNetworkNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
