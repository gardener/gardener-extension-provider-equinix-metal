/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the OperatingSystemList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperatingSystemList{}

// OperatingSystemList struct for OperatingSystemList
type OperatingSystemList struct {
	OperatingSystems     []OperatingSystem `json:"operating_systems,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OperatingSystemList OperatingSystemList

// NewOperatingSystemList instantiates a new OperatingSystemList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatingSystemList() *OperatingSystemList {
	this := OperatingSystemList{}
	return &this
}

// NewOperatingSystemListWithDefaults instantiates a new OperatingSystemList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatingSystemListWithDefaults() *OperatingSystemList {
	this := OperatingSystemList{}
	return &this
}

// GetOperatingSystems returns the OperatingSystems field value if set, zero value otherwise.
func (o *OperatingSystemList) GetOperatingSystems() []OperatingSystem {
	if o == nil || IsNil(o.OperatingSystems) {
		var ret []OperatingSystem
		return ret
	}
	return o.OperatingSystems
}

// GetOperatingSystemsOk returns a tuple with the OperatingSystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystemList) GetOperatingSystemsOk() ([]OperatingSystem, bool) {
	if o == nil || IsNil(o.OperatingSystems) {
		return nil, false
	}
	return o.OperatingSystems, true
}

// HasOperatingSystems returns a boolean if a field has been set.
func (o *OperatingSystemList) HasOperatingSystems() bool {
	if o != nil && !IsNil(o.OperatingSystems) {
		return true
	}

	return false
}

// SetOperatingSystems gets a reference to the given []OperatingSystem and assigns it to the OperatingSystems field.
func (o *OperatingSystemList) SetOperatingSystems(v []OperatingSystem) {
	o.OperatingSystems = v
}

func (o OperatingSystemList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperatingSystemList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OperatingSystems) {
		toSerialize["operating_systems"] = o.OperatingSystems
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OperatingSystemList) UnmarshalJSON(data []byte) (err error) {
	varOperatingSystemList := _OperatingSystemList{}

	err = json.Unmarshal(data, &varOperatingSystemList)

	if err != nil {
		return err
	}

	*o = OperatingSystemList(varOperatingSystemList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operating_systems")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOperatingSystemList struct {
	value *OperatingSystemList
	isSet bool
}

func (v NullableOperatingSystemList) Get() *OperatingSystemList {
	return v.value
}

func (v *NullableOperatingSystemList) Set(val *OperatingSystemList) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatingSystemList) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatingSystemList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatingSystemList(val *OperatingSystemList) *NullableOperatingSystemList {
	return &NullableOperatingSystemList{value: val, isSet: true}
}

func (v NullableOperatingSystemList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatingSystemList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
