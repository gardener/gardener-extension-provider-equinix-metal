/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
	"fmt"
)

// FindOrganizationsPersonalParameter the model 'FindOrganizationsPersonalParameter'
type FindOrganizationsPersonalParameter string

// List of findOrganizations_personal_parameter
const (
	FINDORGANIZATIONSPERSONALPARAMETER_INCLUDE FindOrganizationsPersonalParameter = "include"
	FINDORGANIZATIONSPERSONALPARAMETER_EXCLUDE FindOrganizationsPersonalParameter = "exclude"
	FINDORGANIZATIONSPERSONALPARAMETER_ONLY    FindOrganizationsPersonalParameter = "only"
)

// All allowed values of FindOrganizationsPersonalParameter enum
var AllowedFindOrganizationsPersonalParameterEnumValues = []FindOrganizationsPersonalParameter{
	"include",
	"exclude",
	"only",
}

func (v *FindOrganizationsPersonalParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FindOrganizationsPersonalParameter(value)
	for _, existing := range AllowedFindOrganizationsPersonalParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FindOrganizationsPersonalParameter", value)
}

// NewFindOrganizationsPersonalParameterFromValue returns a pointer to a valid FindOrganizationsPersonalParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFindOrganizationsPersonalParameterFromValue(v string) (*FindOrganizationsPersonalParameter, error) {
	ev := FindOrganizationsPersonalParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FindOrganizationsPersonalParameter: valid values are %v", v, AllowedFindOrganizationsPersonalParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FindOrganizationsPersonalParameter) IsValid() bool {
	for _, existing := range AllowedFindOrganizationsPersonalParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to findOrganizations_personal_parameter value
func (v FindOrganizationsPersonalParameter) Ptr() *FindOrganizationsPersonalParameter {
	return &v
}

type NullableFindOrganizationsPersonalParameter struct {
	value *FindOrganizationsPersonalParameter
	isSet bool
}

func (v NullableFindOrganizationsPersonalParameter) Get() *FindOrganizationsPersonalParameter {
	return v.value
}

func (v *NullableFindOrganizationsPersonalParameter) Set(val *FindOrganizationsPersonalParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableFindOrganizationsPersonalParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableFindOrganizationsPersonalParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindOrganizationsPersonalParameter(val *FindOrganizationsPersonalParameter) *NullableFindOrganizationsPersonalParameter {
	return &NullableFindOrganizationsPersonalParameter{value: val, isSet: true}
}

func (v NullableFindOrganizationsPersonalParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindOrganizationsPersonalParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
