/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the VrfBGPNeighborsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfBGPNeighborsList{}

// VrfBGPNeighborsList struct for VrfBGPNeighborsList
type VrfBGPNeighborsList struct {
	BgpNeighbors         []VrfBGPNeighbors `json:"bgp_neighbors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfBGPNeighborsList VrfBGPNeighborsList

// NewVrfBGPNeighborsList instantiates a new VrfBGPNeighborsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfBGPNeighborsList() *VrfBGPNeighborsList {
	this := VrfBGPNeighborsList{}
	return &this
}

// NewVrfBGPNeighborsListWithDefaults instantiates a new VrfBGPNeighborsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfBGPNeighborsListWithDefaults() *VrfBGPNeighborsList {
	this := VrfBGPNeighborsList{}
	return &this
}

// GetBgpNeighbors returns the BgpNeighbors field value if set, zero value otherwise.
func (o *VrfBGPNeighborsList) GetBgpNeighbors() []VrfBGPNeighbors {
	if o == nil || IsNil(o.BgpNeighbors) {
		var ret []VrfBGPNeighbors
		return ret
	}
	return o.BgpNeighbors
}

// GetBgpNeighborsOk returns a tuple with the BgpNeighbors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfBGPNeighborsList) GetBgpNeighborsOk() ([]VrfBGPNeighbors, bool) {
	if o == nil || IsNil(o.BgpNeighbors) {
		return nil, false
	}
	return o.BgpNeighbors, true
}

// HasBgpNeighbors returns a boolean if a field has been set.
func (o *VrfBGPNeighborsList) HasBgpNeighbors() bool {
	if o != nil && !IsNil(o.BgpNeighbors) {
		return true
	}

	return false
}

// SetBgpNeighbors gets a reference to the given []VrfBGPNeighbors and assigns it to the BgpNeighbors field.
func (o *VrfBGPNeighborsList) SetBgpNeighbors(v []VrfBGPNeighbors) {
	o.BgpNeighbors = v
}

func (o VrfBGPNeighborsList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfBGPNeighborsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BgpNeighbors) {
		toSerialize["bgp_neighbors"] = o.BgpNeighbors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfBGPNeighborsList) UnmarshalJSON(data []byte) (err error) {
	varVrfBGPNeighborsList := _VrfBGPNeighborsList{}

	err = json.Unmarshal(data, &varVrfBGPNeighborsList)

	if err != nil {
		return err
	}

	*o = VrfBGPNeighborsList(varVrfBGPNeighborsList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bgp_neighbors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfBGPNeighborsList struct {
	value *VrfBGPNeighborsList
	isSet bool
}

func (v NullableVrfBGPNeighborsList) Get() *VrfBGPNeighborsList {
	return v.value
}

func (v *NullableVrfBGPNeighborsList) Set(val *VrfBGPNeighborsList) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfBGPNeighborsList) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfBGPNeighborsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfBGPNeighborsList(val *VrfBGPNeighborsList) *NullableVrfBGPNeighborsList {
	return &NullableVrfBGPNeighborsList{value: val, isSet: true}
}

func (v NullableVrfBGPNeighborsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfBGPNeighborsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
